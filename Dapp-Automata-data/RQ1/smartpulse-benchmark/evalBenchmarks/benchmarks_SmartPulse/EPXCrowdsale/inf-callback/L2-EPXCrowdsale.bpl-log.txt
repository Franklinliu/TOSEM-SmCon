This is Ultimate 0.1.24-9993c5c-m
[2020-05-30 20:11:44,268 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-05-30 20:11:44,269 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-05-30 20:11:44,279 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-05-30 20:11:44,280 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-05-30 20:11:44,281 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-05-30 20:11:44,282 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-05-30 20:11:44,284 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-05-30 20:11:44,286 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-05-30 20:11:44,287 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-05-30 20:11:44,288 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-05-30 20:11:44,288 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-05-30 20:11:44,290 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-05-30 20:11:44,291 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-05-30 20:11:44,293 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-05-30 20:11:44,294 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-05-30 20:11:44,295 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-05-30 20:11:44,296 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-05-30 20:11:44,297 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-05-30 20:11:44,299 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-05-30 20:11:44,300 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-05-30 20:11:44,301 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-05-30 20:11:44,303 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-05-30 20:11:44,303 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-05-30 20:11:44,304 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-05-30 20:11:44,304 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-05-30 20:11:44,305 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-05-30 20:11:44,306 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-05-30 20:11:44,306 INFO  L174        SettingsManager]: Resetting UtopiaLiveness preferences to default values
[2020-05-30 20:11:44,306 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-05-30 20:11:44,306 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-05-30 20:11:44,307 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-05-30 20:11:44,308 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-05-30 20:11:44,309 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-05-30 20:11:44,311 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-05-30 20:11:44,312 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-05-30 20:11:44,312 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-05-30 20:11:44,313 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-05-30 20:11:44,313 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-05-30 20:11:44,313 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-05-30 20:11:44,314 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-05-30 20:11:44,315 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-05-30 20:11:44,315 INFO  L98         SettingsManager]: Beginning loading settings from /Users/jon/Documents/Research/masterUltimate/SmartPulse/settings.epf
[2020-05-30 20:11:44,324 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-05-30 20:11:44,324 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-05-30 20:11:44,325 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-05-30 20:11:44,325 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-05-30 20:11:44,325 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/Users/jon/Documents/Research/devUltimate/ltl2ba
[2020-05-30 20:11:44,325 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-05-30 20:11:44,325 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-05-30 20:11:44,326 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-05-30 20:11:44,326 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-05-30 20:11:44,326 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-05-30 20:11:44,326 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-05-30 20:11:44,326 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-05-30 20:11:44,326 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-05-30 20:11:44,326 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-05-30 20:11:44,326 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-05-30 20:11:44,327 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-05-30 20:11:44,327 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-05-30 20:11:44,327 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-05-30 20:11:44,327 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-05-30 20:11:44,327 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-05-30 20:11:44,327 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-05-30 20:11:44,327 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-05-30 20:11:44,327 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-05-30 20:11:44,327 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-05-30 20:11:44,327 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-05-30 20:11:44,327 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-05-30 20:11:44,347 INFO  L81    nceAwareModelManager]: Repository-Root is: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T
[2020-05-30 20:11:44,357 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-05-30 20:11:44,359 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-05-30 20:11:44,360 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-05-30 20:11:44,360 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-05-30 20:11:44,361 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/EPXCrowdsale/inf-callback/L2-EPXCrowdsale.bpl
[2020-05-30 20:11:44,361 INFO  L111           BoogieParser]: Parsing: '/Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/EPXCrowdsale/inf-callback/L2-EPXCrowdsale.bpl'
[2020-05-30 20:11:44,421 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-05-30 20:11:44,422 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-05-30 20:11:44,423 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-05-30 20:11:44,423 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-05-30 20:11:44,423 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-05-30 20:11:44,436 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 08:11:44" (1/1) ...
[2020-05-30 20:11:44,437 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 08:11:44" (1/1) ...
[2020-05-30 20:11:44,462 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 08:11:44" (1/1) ...
[2020-05-30 20:11:44,462 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 08:11:44" (1/1) ...
[2020-05-30 20:11:44,478 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 08:11:44" (1/1) ...
[2020-05-30 20:11:44,487 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 08:11:44" (1/1) ...
[2020-05-30 20:11:44,493 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 08:11:44" (1/1) ...
[2020-05-30 20:11:44,500 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-05-30 20:11:44,501 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-05-30 20:11:44,501 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-05-30 20:11:44,503 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-05-30 20:11:44,506 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 08:11:44" (1/1) ...
[2020-05-30 20:11:44,520 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: <>(finished(*, (areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum(EPXCrowdsale.buy, 2) == fsum(send(from, to, amt), 2, to == ben))))
[2020-05-30 20:11:44,525 INFO  L979   opiaSpecLangObserver]: Successfully lexed: <>(finished(*, (areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum(EPXCrowdsale.buy, 2) == fsum(send(from, to, amt), 2, to == ben))))
[2020-05-30 20:11:44,531 INFO  L981   opiaSpecLangObserver]: Successfully parsed: <>(finished(*, (areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum(EPXCrowdsale.buy, 2) == fsum(send(from, to, amt), 2, to == ben))))
[2020-05-30 20:11:44,535 INFO  L599   opiaSpecLangObserver]: Parsed to==ben to BinaryExpression[COMPEQ,IdentifierExpression[to,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[ben,GLOBAL]]
[2020-05-30 20:11:44,537 INFO  L599   opiaSpecLangObserver]: Parsed (( areFundsReleasedToBeneficiary_EPXCrowdsale[this]==true && fsum_buy_EPXCrowdsale_2_0==fsum_send__success_2_0 )) && !revert to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[areFundsReleasedToBeneficiary_EPXCrowdsale,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,CorralChoice_EPXCrowdsale>]]],BooleanLiteral[true]],BinaryExpression[COMPEQ,IdentifierExpression[fsum_buy_EPXCrowdsale_2_0,GLOBAL],IdentifierExpression[fsum_send__success_2_0,GLOBAL]]],UnaryExpression[LOGICNEG,IdentifierExpression[revert,GLOBAL]]]
[2020-05-30 20:11:44,537 INFO  L968   opiaSpecLangObserver]: Compiling: <>(finished(*, (areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum(EPXCrowdsale.buy, 2) == fsum(send(from, to, amt), 2, to == ben))))
[2020-05-30 20:11:44,538 INFO  L970   opiaSpecLangObserver]: Compiled to ( <>AP(success_CorralChoice_EPXCrowdsale0) )
[2020-05-30 20:11:44,538 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(*, areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true) ==> <>(finished(EPXCrowdsale.beneficiaryMultiSigWithdraw(amt), amt == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]))) && <>(finished(*, areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true))
[2020-05-30 20:11:44,538 INFO  L979   opiaSpecLangObserver]: Successfully lexed: [](started(*, areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true) ==> <>(finished(EPXCrowdsale.beneficiaryMultiSigWithdraw(amt), amt == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]))) && <>(finished(*, areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true))
[2020-05-30 20:11:44,539 INFO  L981   opiaSpecLangObserver]: Successfully parsed: [](started(*, areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true) ==> <>(finished(EPXCrowdsale.beneficiaryMultiSigWithdraw(amt), amt == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]))) && <>(finished(*, areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true))
[2020-05-30 20:11:44,541 INFO  L599   opiaSpecLangObserver]: Parsed ( _amount_s558==( old(Balance[this]) ) && ben==beneficiaryWallet_EPXCrowdsale[this] ) to BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[_amount_s558,<IMPLEMENTATION_INPARAM,beneficiaryMultiSigWithdraw_EPXCrowdsale>],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[Balance,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,beneficiaryMultiSigWithdraw_EPXCrowdsale>]]]]],BinaryExpression[COMPEQ,IdentifierExpression[ben,GLOBAL],ArrayAccessExpression[IdentifierExpression[beneficiaryWallet_EPXCrowdsale,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,beneficiaryMultiSigWithdraw_EPXCrowdsale>]]]]]
[2020-05-30 20:11:44,543 INFO  L599   opiaSpecLangObserver]: Parsed areFundsReleasedToBeneficiary_EPXCrowdsale[this]==true to BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[areFundsReleasedToBeneficiary_EPXCrowdsale,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,CorralChoice_EPXCrowdsale>]]],BooleanLiteral[true]]
[2020-05-30 20:11:44,544 INFO  L599   opiaSpecLangObserver]: Parsed (areFundsReleasedToBeneficiary_EPXCrowdsale[this]==true) && !revert to BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[areFundsReleasedToBeneficiary_EPXCrowdsale,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,CorralChoice_EPXCrowdsale>]]],BooleanLiteral[true]],UnaryExpression[LOGICNEG,IdentifierExpression[revert,GLOBAL]]]
[2020-05-30 20:11:44,544 INFO  L968   opiaSpecLangObserver]: Compiling: [](started(*, areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true) ==> <>(finished(EPXCrowdsale.beneficiaryMultiSigWithdraw(amt), amt == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]))) && <>(finished(*, areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true))
[2020-05-30 20:11:44,544 INFO  L970   opiaSpecLangObserver]: Compiled to ( ( []( AP(call_CorralChoice_EPXCrowdsale1) ==> ( <>AP(success_beneficiaryMultiSigWithdraw_EPXCrowdsale0) ) ) ) && ( <>AP(success_CorralChoice_EPXCrowdsale2) ) )
Executed UtopiaSpecLang
[2020-05-30 20:11:44,551 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 08:11:44 PropertyContainer
[2020-05-30 20:11:44,551 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-05-30 20:11:44,551 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-05-30 20:11:44,551 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-05-30 20:11:44,551 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-05-30 20:11:44,552 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 08:11:44" (1/2) ...
[2020-05-30 20:11:44,552 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-30 20:11:44,553 INFO  L120   oogiePrinterObserver]: Writing to file /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-30 20:11:44,563 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 08:11:44" (2/2) ...
[2020-05-30 20:11:44,563 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-05-30 20:11:44,564 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-05-30 20:11:44,564 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-05-30 20:11:44,564 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-05-30 20:11:44,564 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 08:11:44" (1/2) ...
[2020-05-30 20:11:44,607 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-05-30 20:11:44,607 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned_NoBaseCtor__success
[2020-05-30 20:11:44,607 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned
[2020-05-30 20:11:44,607 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned
[2020-05-30 20:11:44,607 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMath_safeMath_NoBaseCtor__success
[2020-05-30 20:11:44,607 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMath_safeMath
[2020-05-30 20:11:44,607 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMath_safeMath
[2020-05-30 20:11:44,608 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul_safeMath__success
[2020-05-30 20:11:44,608 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv_safeMath__success
[2020-05-30 20:11:44,608 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub_safeMath__success
[2020-05-30 20:11:44,608 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd_safeMath__success
[2020-05-30 20:11:44,608 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAssert_safeMath__success
[2020-05-30 20:11:44,608 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-05-30 20:11:44,608 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-05-30 20:11:44,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-05-30 20:11:44,609 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf_StandardToken
[2020-05-30 20:11:44,609 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer_StandardToken
[2020-05-30 20:11:44,609 INFO  L130     BoogieDeclarations]: Found specification of procedure EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success
[2020-05-30 20:11:44,609 INFO  L130     BoogieDeclarations]: Found specification of procedure EPXCrowdsale_EPXCrowdsale
[2020-05-30 20:11:44,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure EPXCrowdsale_EPXCrowdsale
[2020-05-30 20:11:44,609 INFO  L130     BoogieDeclarations]: Found specification of procedure initialEPXSupply_EPXCrowdsale
[2020-05-30 20:11:44,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialEPXSupply_EPXCrowdsale
[2020-05-30 20:11:44,609 INFO  L130     BoogieDeclarations]: Found specification of procedure remainingEPXSupply_EPXCrowdsale
[2020-05-30 20:11:44,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure remainingEPXSupply_EPXCrowdsale
[2020-05-30 20:11:44,610 INFO  L130     BoogieDeclarations]: Found specification of procedure SetupCrowdsale_EPXCrowdsale
[2020-05-30 20:11:44,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure SetupCrowdsale_EPXCrowdsale
[2020-05-30 20:11:44,610 INFO  L130     BoogieDeclarations]: Found specification of procedure checkPrice_EPXCrowdsale__success
[2020-05-30 20:11:44,610 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_EPXCrowdsale__success
[2020-05-30 20:11:44,610 INFO  L130     BoogieDeclarations]: Found specification of procedure buy_EPXCrowdsale
[2020-05-30 20:11:44,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure buy_EPXCrowdsale
[2020-05-30 20:11:44,610 INFO  L130     BoogieDeclarations]: Found specification of procedure beneficiaryMultiSigWithdraw_EPXCrowdsale
[2020-05-30 20:11:44,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure beneficiaryMultiSigWithdraw_EPXCrowdsale
[2020-05-30 20:11:44,610 INFO  L130     BoogieDeclarations]: Found specification of procedure checkGoalReached_EPXCrowdsale
[2020-05-30 20:11:44,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure checkGoalReached_EPXCrowdsale
[2020-05-30 20:11:44,610 INFO  L130     BoogieDeclarations]: Found specification of procedure refund_EPXCrowdsale
[2020-05-30 20:11:44,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure refund_EPXCrowdsale
[2020-05-30 20:11:44,611 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-05-30 20:11:44,611 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-05-30 20:11:44,611 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-05-30 20:11:44,611 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-05-30 20:11:44,611 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_owned
[2020-05-30 20:11:44,611 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_owned
[2020-05-30 20:11:44,611 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_safeMath
[2020-05-30 20:11:44,611 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_safeMath
[2020-05-30 20:11:44,611 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-05-30 20:11:44,611 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-05-30 20:11:44,611 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_EPXCrowdsale
[2020-05-30 20:11:44,611 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-05-30 20:11:44,611 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-05-30 20:11:44,612 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned_NoBaseCtor__fail
[2020-05-30 20:11:44,612 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned__success
[2020-05-30 20:11:44,612 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned__fail
[2020-05-30 20:11:44,612 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMath_safeMath_NoBaseCtor__fail
[2020-05-30 20:11:44,612 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMath_safeMath__success
[2020-05-30 20:11:44,612 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMath_safeMath__fail
[2020-05-30 20:11:44,612 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul_safeMath__fail
[2020-05-30 20:11:44,612 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv_safeMath__fail
[2020-05-30 20:11:44,612 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub_safeMath__fail
[2020-05-30 20:11:44,612 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd_safeMath__fail
[2020-05-30 20:11:44,612 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAssert_safeMath__fail
[2020-05-30 20:11:44,612 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-05-30 20:11:44,613 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-05-30 20:11:44,613 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-05-30 20:11:44,613 INFO  L130     BoogieDeclarations]: Found specification of procedure EPXCrowdsale_EPXCrowdsale_NoBaseCtor__fail
[2020-05-30 20:11:44,613 INFO  L130     BoogieDeclarations]: Found specification of procedure EPXCrowdsale_EPXCrowdsale__success
[2020-05-30 20:11:44,613 INFO  L130     BoogieDeclarations]: Found specification of procedure EPXCrowdsale_EPXCrowdsale__fail
[2020-05-30 20:11:44,613 INFO  L130     BoogieDeclarations]: Found specification of procedure initialEPXSupply_EPXCrowdsale__success
[2020-05-30 20:11:44,613 INFO  L130     BoogieDeclarations]: Found specification of procedure initialEPXSupply_EPXCrowdsale__fail
[2020-05-30 20:11:44,613 INFO  L130     BoogieDeclarations]: Found specification of procedure remainingEPXSupply_EPXCrowdsale__success
[2020-05-30 20:11:44,613 INFO  L130     BoogieDeclarations]: Found specification of procedure remainingEPXSupply_EPXCrowdsale__fail
[2020-05-30 20:11:44,613 INFO  L130     BoogieDeclarations]: Found specification of procedure SetupCrowdsale_EPXCrowdsale__success
[2020-05-30 20:11:44,613 INFO  L130     BoogieDeclarations]: Found specification of procedure SetupCrowdsale_EPXCrowdsale__fail
[2020-05-30 20:11:44,613 INFO  L130     BoogieDeclarations]: Found specification of procedure checkPrice_EPXCrowdsale__fail
[2020-05-30 20:11:44,614 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_EPXCrowdsale__fail
[2020-05-30 20:11:44,614 INFO  L130     BoogieDeclarations]: Found specification of procedure buy_EPXCrowdsale__success
[2020-05-30 20:11:44,614 INFO  L130     BoogieDeclarations]: Found specification of procedure buy_EPXCrowdsale__fail
[2020-05-30 20:11:44,614 INFO  L130     BoogieDeclarations]: Found specification of procedure beneficiaryMultiSigWithdraw_EPXCrowdsale__success
[2020-05-30 20:11:44,614 INFO  L130     BoogieDeclarations]: Found specification of procedure beneficiaryMultiSigWithdraw_EPXCrowdsale__fail
[2020-05-30 20:11:44,614 INFO  L130     BoogieDeclarations]: Found specification of procedure checkGoalReached_EPXCrowdsale__success
[2020-05-30 20:11:44,614 INFO  L130     BoogieDeclarations]: Found specification of procedure checkGoalReached_EPXCrowdsale__fail
[2020-05-30 20:11:44,614 INFO  L130     BoogieDeclarations]: Found specification of procedure refund_EPXCrowdsale__success
[2020-05-30 20:11:44,614 INFO  L130     BoogieDeclarations]: Found specification of procedure refund_EPXCrowdsale__fail
[2020-05-30 20:11:44,614 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-05-30 20:11:44,614 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-05-30 20:11:44,614 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-05-30 20:11:44,615 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-05-30 20:11:44,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-05-30 20:11:44,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-05-30 20:11:44,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned_NoBaseCtor__fail
[2020-05-30 20:11:44,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned_NoBaseCtor__success
[2020-05-30 20:11:44,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned__fail
[2020-05-30 20:11:44,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned__success
[2020-05-30 20:11:44,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMath_safeMath_NoBaseCtor__fail
[2020-05-30 20:11:44,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMath_safeMath_NoBaseCtor__success
[2020-05-30 20:11:44,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMath_safeMath__fail
[2020-05-30 20:11:44,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMath_safeMath__success
[2020-05-30 20:11:44,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul_safeMath__fail
[2020-05-30 20:11:44,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul_safeMath__success
[2020-05-30 20:11:44,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv_safeMath__fail
[2020-05-30 20:11:44,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv_safeMath__success
[2020-05-30 20:11:44,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub_safeMath__fail
[2020-05-30 20:11:44,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub_safeMath__success
[2020-05-30 20:11:44,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd_safeMath__fail
[2020-05-30 20:11:44,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd_safeMath__success
[2020-05-30 20:11:44,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAssert_safeMath__fail
[2020-05-30 20:11:44,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAssert_safeMath__success
[2020-05-30 20:11:44,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-05-30 20:11:44,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-05-30 20:11:44,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-05-30 20:11:44,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-05-30 20:11:44,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure EPXCrowdsale_EPXCrowdsale_NoBaseCtor__fail
[2020-05-30 20:11:44,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success
[2020-05-30 20:11:44,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure EPXCrowdsale_EPXCrowdsale__fail
[2020-05-30 20:11:44,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure EPXCrowdsale_EPXCrowdsale__success
[2020-05-30 20:11:44,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialEPXSupply_EPXCrowdsale__fail
[2020-05-30 20:11:44,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialEPXSupply_EPXCrowdsale__success
[2020-05-30 20:11:44,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure remainingEPXSupply_EPXCrowdsale__fail
[2020-05-30 20:11:44,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure remainingEPXSupply_EPXCrowdsale__success
[2020-05-30 20:11:44,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure SetupCrowdsale_EPXCrowdsale__fail
[2020-05-30 20:11:44,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure SetupCrowdsale_EPXCrowdsale__success
[2020-05-30 20:11:44,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure checkPrice_EPXCrowdsale__fail
[2020-05-30 20:11:44,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure checkPrice_EPXCrowdsale__success
[2020-05-30 20:11:44,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_EPXCrowdsale__fail
[2020-05-30 20:11:44,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_EPXCrowdsale__success
[2020-05-30 20:11:44,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure buy_EPXCrowdsale__fail
[2020-05-30 20:11:44,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure buy_EPXCrowdsale__success
[2020-05-30 20:11:44,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure beneficiaryMultiSigWithdraw_EPXCrowdsale__fail
[2020-05-30 20:11:44,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure beneficiaryMultiSigWithdraw_EPXCrowdsale__success
[2020-05-30 20:11:44,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure checkGoalReached_EPXCrowdsale__fail
[2020-05-30 20:11:44,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure checkGoalReached_EPXCrowdsale__success
[2020-05-30 20:11:44,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure refund_EPXCrowdsale__fail
[2020-05-30 20:11:44,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure refund_EPXCrowdsale__success
[2020-05-30 20:11:44,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-05-30 20:11:44,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-05-30 20:11:44,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-05-30 20:11:44,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-05-30 20:11:44,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-05-30 20:11:44,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-05-30 20:11:44,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-05-30 20:11:44,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-05-30 20:11:44,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_owned
[2020-05-30 20:11:44,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_owned
[2020-05-30 20:11:44,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_safeMath
[2020-05-30 20:11:44,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_safeMath
[2020-05-30 20:11:44,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-05-30 20:11:44,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-05-30 20:11:44,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_EPXCrowdsale
[2020-05-30 20:11:44,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-05-30 20:11:44,621 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-05-30 20:11:44,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-05-30 20:11:44,789 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 20:11:44,802 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 20:11:44,831 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 20:11:44,925 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 20:11:44,926 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 20:11:44,926 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 20:11:45,162 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-05-30 20:11:45,162 INFO  L286             CfgBuilder]: Removed 4 assue(true) statements.
[2020-05-30 20:11:45,164 INFO  L202        PluginConnector]: Adding new model L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 08:11:45 BoogieIcfgContainer
[2020-05-30 20:11:45,164 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 08:11:44" (2/2) ...
[2020-05-30 20:11:45,164 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-05-30 20:11:45,164 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@4fa982a9 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 08:11:45, skipping insertion in model container
[2020-05-30 20:11:45,164 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-05-30 20:11:45,164 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-05-30 20:11:45,164 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-05-30 20:11:45,166 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-05-30 20:11:45,166 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 08:11:44" (1/3) ...
[2020-05-30 20:11:45,166 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@7a4d6234 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 08:11:45, skipping insertion in model container
[2020-05-30 20:11:45,166 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 08:11:44" (2/3) ...
No working directory specified, using /Users/jon/Documents/Research/devUltimate/ltl2ba
Starting monitored process 1 with /Users/jon/Documents/Research/devUltimate/ltl2ba -f  ( ( [] ( a -> ( <>b ) ) ) && ( <>c ) ) && ! ( ( <>d ) )  (exit command is null, workingDir is null)
[2020-05-30 20:11:45,211 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 08:11:45 NWAContainer
[2020-05-30 20:11:45,211 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-05-30 20:11:45,211 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-05-30 20:11:45,211 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-05-30 20:11:45,211 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-05-30 20:11:45,212 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 08:11:45" (3/4) ...
[2020-05-30 20:11:45,213 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@22cab0f7 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 08:11:45, skipping insertion in model container
[2020-05-30 20:11:45,213 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 08:11:45" (4/4) ...
[2020-05-30 20:11:45,216 INFO  L104   BuchiProductObserver]: Initial property automaton 6 locations, 20 edges
[2020-05-30 20:11:45,218 INFO  L110   BuchiProductObserver]: Initial RCFG 1845 locations, 2319 edges
[2020-05-30 20:11:45,218 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-05-30 20:11:45,229 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-05-30 20:11:52,888 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-05-30 20:11:52,903 INFO  L110   BuchiProductObserver]: BuchiProgram size 10557 locations, 38305 edges
[2020-05-30 20:11:52,903 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 08:11:52 BoogieIcfgContainer
[2020-05-30 20:11:52,903 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-05-30 20:11:52,904 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-05-30 20:11:52,904 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-05-30 20:11:52,905 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-05-30 20:11:52,905 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 08:11:52" (1/1) ...
[2020-05-30 20:11:53,103 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_1 := FreshRefGenerator__fail();
[2020-05-30 20:11:53,103 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, b_s90 > 0);
[2020-05-30 20:11:53,103 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,103 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,103 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[2020-05-30 20:11:53,104 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[2020-05-30 20:11:53,104 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,104 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,104 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, b_s90 > 0);
[2020-05-30 20:11:53,104 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[2020-05-30 20:11:53,104 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[2020-05-30 20:11:53,105 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_2 := FreshRefGenerator__fail();
[2020-05-30 20:11:53,105 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,105 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[2020-05-30 20:11:53,105 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,106 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,106 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[2020-05-30 20:11:53,106 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_12 := safeSub_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[2020-05-30 20:11:53,106 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[2020-05-30 20:11:53,107 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[2020-05-30 20:11:53,107 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[2020-05-30 20:11:53,107 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,107 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,107 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call owned_owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,108 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,108 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,108 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,108 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[2020-05-30 20:11:53,108 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,108 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,108 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,109 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,109 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,109 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,109 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,109 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,109 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call CorralChoice_owned(this);
[2020-05-30 20:11:53,110 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,110 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,110 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,110 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[2020-05-30 20:11:53,110 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[2020-05-30 20:11:53,110 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,110 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,110 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[2020-05-30 20:11:53,111 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,111 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[2020-05-30 20:11:53,111 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call initialEPXtokenCount_s286 := initialEPXSupply_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,111 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call initialEPXtokenCount_s286 := initialEPXSupply_EPXCrowdsale__success(from, to, msgvalue_MSG);
[2020-05-30 20:11:53,111 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 20:11:53,111 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 20:11:53,111 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call refund_EPXCrowdsale__fail(from, to, msgvalue_MSG);
[2020-05-30 20:11:53,111 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 20:11:53,112 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 20:11:53,112 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[2020-05-30 20:11:53,112 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call remainingEPXtokenCount_s299 := remainingEPXSupply_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,112 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call initialEPXtokenCount_s286 := initialEPXSupply_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,112 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 20:11:53,112 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 20:11:53,112 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 20:11:53,112 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 20:11:53,112 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 20:11:53,112 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 20:11:53,112 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 20:11:53,112 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_2 := FreshRefGenerator__success();
[2020-05-30 20:11:53,113 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 20:11:53,113 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 20:11:53,113 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_1 := FreshRefGenerator__success();
[2020-05-30 20:11:53,113 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,113 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_3 := safeDiv_safeMath__success(this, msgsender_MSG, msgvalue_MSG, initialTokenSupply_EPXCrowdsale[this], 10000);
[2020-05-30 20:11:53,113 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call remainingEPXtokenCount_s299 := remainingEPXSupply_EPXCrowdsale__fail(from, to, msgvalue_MSG);
[2020-05-30 20:11:53,113 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_5 := safeDiv_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], 10000);
[2020-05-30 20:11:53,113 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,114 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,114 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[2020-05-30 20:11:53,114 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[2020-05-30 20:11:53,114 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call remainingEPXtokenCount_s299 := remainingEPXSupply_EPXCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,114 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,114 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call refund_EPXCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,115 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_10 := safeMul_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[2020-05-30 20:11:53,115 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,115 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[2020-05-30 20:11:53,115 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call owned_owned(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,115 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(from, to, msgvalue_MSG, _amount_s558);
[2020-05-30 20:11:53,116 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call buy_EPXCrowdsale__success(from, to, msgvalue_MSG);
[2020-05-30 20:11:53,116 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call CorralChoice_safeMath(this);
[2020-05-30 20:11:53,116 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,116 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, b_s90 > 0);
[2020-05-30 20:11:53,117 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s90 == nonlinearMul(b_s90, c_s89) + nonlinearMod(a_s90, b_s90));
[2020-05-30 20:11:53,117 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[2020-05-30 20:11:53,117 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[2020-05-30 20:11:53,117 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s90 == nonlinearMul(b_s90, c_s89) + nonlinearMod(a_s90, b_s90));
[2020-05-30 20:11:53,117 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[2020-05-30 20:11:53,117 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,117 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s90 == nonlinearMul(b_s90, c_s89) + nonlinearMod(a_s90, b_s90));
[2020-05-30 20:11:53,118 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[2020-05-30 20:11:53,118 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,118 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,118 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_5 := safeDiv_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__tokensRemaining_EPXCrowdsale[this], 10000);
[2020-05-30 20:11:53,118 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_3 := safeDiv_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__initialTokenSupply_EPXCrowdsale[this], 10000);
[2020-05-30 20:11:53,119 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_17 := send__fail(this, __tmp__beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[2020-05-30 20:11:53,119 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,119 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call FallbackDispatch__success(from, to, amount);
[2020-05-30 20:11:53,119 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,119 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,119 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,119 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,119 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Fallback_UnknownType__fail(from, to, amount);
[2020-05-30 20:11:53,119 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_19 := send__fail(this, msgsender_MSG, ethRefund_s797);
[2020-05-30 20:11:53,120 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call checkGoalReached_EPXCrowdsale__success(from, to, msgvalue_MSG);
[2020-05-30 20:11:53,120 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,120 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,120 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call remainingEPXtokenCount_s299 := remainingEPXSupply_EPXCrowdsale__success(from, to, msgvalue_MSG);
[2020-05-30 20:11:53,120 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call remainingEPXtokenCount_s299 := remainingEPXSupply_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,120 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call FallbackDispatch__fail(from, to, amount);
[2020-05-30 20:11:53,120 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,121 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call FallbackDispatch__fail(from, to, amount);
[2020-05-30 20:11:53,121 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call FallbackDispatch__fail(from, to, amount);
[2020-05-30 20:11:53,121 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call response_s391 := SetupCrowdsale_EPXCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[2020-05-30 20:11:53,121 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call response_s391 := SetupCrowdsale_EPXCrowdsale__fail(from, to, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[2020-05-30 20:11:53,121 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,121 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call checkGoalReached_EPXCrowdsale__fail(from, to, msgvalue_MSG);
[2020-05-30 20:11:53,122 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call checkGoalReached_EPXCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,122 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_15 := safeAdd_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__M_Ref_int_usersEPXfundValue1[__tmp__usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[2020-05-30 20:11:53,122 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,122 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call beneficiaryMultiSigWithdraw_EPXCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[2020-05-30 20:11:53,122 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,122 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call beneficiaryMultiSigWithdraw_EPXCrowdsale__fail(from, to, msgvalue_MSG, _amount_s558);
[2020-05-30 20:11:53,123 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call initialEPXtokenCount_s286 := initialEPXSupply_EPXCrowdsale__fail(from, to, msgvalue_MSG);
[2020-05-30 20:11:53,123 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call refund_EPXCrowdsale__success(from, to, msgvalue_MSG);
[2020-05-30 20:11:53,123 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call initialEPXtokenCount_s286 := initialEPXSupply_EPXCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,123 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,123 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,123 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,123 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,123 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,124 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_11 := checkPrice_EPXCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,124 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,124 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[2020-05-30 20:11:53,124 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,124 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call EPXCrowdsale_EPXCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,124 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call FallbackMethod_EPXCrowdsale__fail(to, from, amount);
[2020-05-30 20:11:53,125 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_9 := safeAdd_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[2020-05-30 20:11:53,125 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[2020-05-30 20:11:53,125 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call response_s391 := SetupCrowdsale_EPXCrowdsale__success(from, to, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[2020-05-30 20:11:53,126 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,126 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,126 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,126 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[2020-05-30 20:11:53,127 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[2020-05-30 20:11:53,127 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[2020-05-30 20:11:53,127 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[2020-05-30 20:11:53,127 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[2020-05-30 20:11:53,128 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s90 == nonlinearMul(b_s90, c_s89) + nonlinearMod(a_s90, b_s90));
[2020-05-30 20:11:53,128 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s90 > 0);
[2020-05-30 20:11:53,128 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s90 == nonlinearMul(b_s90, c_s89) + nonlinearMod(a_s90, b_s90));
[2020-05-30 20:11:53,128 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s90 > 0);
[2020-05-30 20:11:53,128 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s90 == nonlinearMul(b_s90, c_s89) + nonlinearMod(a_s90, b_s90));
[2020-05-30 20:11:53,129 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Fallback_UnknownType__success(from, to, amount);
[2020-05-30 20:11:53,129 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s90 > 0);
[2020-05-30 20:11:53,129 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call buy_EPXCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,129 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call buy_EPXCrowdsale__fail(from, to, msgvalue_MSG);
[2020-05-30 20:11:53,130 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call buy_EPXCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 20:11:53,131 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call CorralChoice_EPXCrowdsale(this);
[2020-05-30 20:11:53,133 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call CorralChoice_StandardToken(this);
[2020-05-30 20:11:53,152 INFO  L313           BlockEncoder]: Initial Icfg 10557 locations, 38305 edges
[2020-05-30 20:11:53,152 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-05-30 20:11:53,153 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-05-30 20:11:53,153 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-05-30 20:11:53,154 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-05-30 20:11:53,181 INFO  L70    emoveInfeasibleEdges]: Removed 592 edges and 30 locations because of local infeasibility
[2020-05-30 20:11:53,200 INFO  L70        RemoveSinkStates]: Removed 368 edges and 115 locations by removing sink states
[2020-05-30 20:11:53,231 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-05-30 20:11:53,241 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-05-30 20:11:53,250 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-05-30 20:11:53,251 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-05-30 20:11:53,261 INFO  L313           BlockEncoder]: Encoded RCFG 10372 locations, 37228 edges
[2020-05-30 20:11:53,261 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 30.05 08:11:53 BasicIcfg
[2020-05-30 20:11:53,261 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-05-30 20:11:53,262 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-05-30 20:11:53,262 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-05-30 20:11:53,264 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-05-30 20:11:53,264 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 20:11:53,264 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 08:11:44" (1/6) ...
[2020-05-30 20:11:53,265 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3ac204fd and model type L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 30.05 08:11:53, skipping insertion in model container
[2020-05-30 20:11:53,265 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 20:11:53,265 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 08:11:44" (2/6) ...
[2020-05-30 20:11:53,265 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3ac204fd and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 30.05 08:11:53, skipping insertion in model container
[2020-05-30 20:11:53,266 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 20:11:53,266 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 08:11:45" (3/6) ...
[2020-05-30 20:11:53,266 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3ac204fd and model type L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 30.05 08:11:53, skipping insertion in model container
[2020-05-30 20:11:53,266 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 20:11:53,266 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 08:11:45" (4/6) ...
[2020-05-30 20:11:53,266 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3ac204fd and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 30.05 08:11:53, skipping insertion in model container
[2020-05-30 20:11:53,266 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 20:11:53,266 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 08:11:52" (5/6) ...
[2020-05-30 20:11:53,266 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3ac204fd and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 30.05 08:11:53, skipping insertion in model container
[2020-05-30 20:11:53,266 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 20:11:53,267 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 30.05 08:11:53" (6/6) ...
[2020-05-30 20:11:53,267 INFO  L404   chiAutomizerObserver]: Analyzing ICFG L2-EPXCrowdsale.bpl_BEv2
[2020-05-30 20:11:53,298 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-05-30 20:11:53,298 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-05-30 20:11:53,298 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-05-30 20:11:53,298 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-05-30 20:11:53,298 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-05-30 20:11:53,298 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-05-30 20:11:53,298 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-05-30 20:11:53,298 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-05-30 20:11:53,298 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-05-30 20:11:53,384 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10372 states.
[2020-05-30 20:11:53,541 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:11:53,542 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:11:53,542 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:11:53,553 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:11:53,553 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:11:53,553 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-05-30 20:11:53,554 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10372 states.
[2020-05-30 20:11:53,623 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:11:53,623 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:11:53,623 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:11:53,626 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:11:53,626 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_CorralChoice_EPXCrowdsale2 := false;
[L7]                 success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                 call_CorralChoice_EPXCrowdsale1 := false;
[L7]                 fsum_send__success_2_0 := 0;
[L7]                 fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                 success_CorralChoice_EPXCrowdsale0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L3957]              assume null == 0;
[L3958]  CALL        call this := FreshRefGenerator__success();
[L1098]              havoc newRef;
[L1099]              assume Alloc[newRef] == false;
[L1100]              Alloc[newRef] := true;
[L1101]              assume newRef != null;
[L3958]  RET         call this := FreshRefGenerator__success();
[L3959]              assume now >= 0;
[L3960]              assume DType[this] == EPXCrowdsale;
[L3961]              gas := gas - 53000;
[L3962]  CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]               havoc __exception;
[L342]               revert := false;
[L343]   COND FALSE  !(__exception)
[L376]   CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]              assume msgsender_MSG != null;
[L1119]              Balance[this] := 0;
[L1120]              owner_owned[this] := null;
[L1121]              owner_owned[this] := msgsender_MSG;
[L1139]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]  COND FALSE  !(revert)
[L1891]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]  COND TRUE   revert
[L376]   RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]               assume !revert && gas >= 0;
[L3962]  RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]              assume !revert && gas >= 0;
[L3966]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]              havoc msgsender_MSG;
[L3864]              havoc msgvalue_MSG;
[L3865]              havoc choice;
[L3866]              havoc initialEPXtokenCount_s286;
[L3867]              havoc remainingEPXtokenCount_s299;
[L3868]              havoc _fundingStartBlock_s391;
[L3869]              havoc _fundingEndBlock_s391;
[L3870]              havoc response_s391;
[L3871]              havoc _amount_s558;
[L3872]              havoc tmpNow;
[L3873]              havoc gas;
[L3874]              assume gas > 4000000 && gas <= 8000000;
[L3875]              tmpNow := now;
[L3876]              havoc now;
[L3877]              assume now > tmpNow;
[L3878]              assume msgsender_MSG != null;
[L3879]              assume DType[msgsender_MSG] != owned;
[L3880]              assume DType[msgsender_MSG] != safeMath;
[L3881]              assume DType[msgsender_MSG] != StandardToken;
[L3882]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]              Alloc[msgsender_MSG] := true;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                 revert := revert_hold;
[L3884]  COND TRUE   choice == 7
[L3886]              gas := gas - 21000;
[L3887]  COND FALSE  !(gas >= 0)
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                 revert := revert_hold;
[L3966]  RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]              havoc msgsender_MSG;
[L3864]              havoc msgvalue_MSG;
[L3865]              havoc choice;
[L3866]              havoc initialEPXtokenCount_s286;
[L3867]              havoc remainingEPXtokenCount_s299;
[L3868]              havoc _fundingStartBlock_s391;
[L3869]              havoc _fundingEndBlock_s391;
[L3870]              havoc response_s391;
[L3871]              havoc _amount_s558;
[L3872]              havoc tmpNow;
[L3873]              havoc gas;
[L3874]              assume gas > 4000000 && gas <= 8000000;
[L3875]              tmpNow := now;
[L3876]              havoc now;
[L3877]              assume now > tmpNow;
[L3878]              assume msgsender_MSG != null;
[L3879]              assume DType[msgsender_MSG] != owned;
[L3880]              assume DType[msgsender_MSG] != safeMath;
[L3881]              assume DType[msgsender_MSG] != StandardToken;
[L3882]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]              Alloc[msgsender_MSG] := true;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                 revert := revert_hold;
[L3884]  COND TRUE   choice == 7
[L3886]              gas := gas - 21000;
[L3887]  COND FALSE  !(gas >= 0)
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                 revert := revert_hold;
[L3966]  RET         call CorralChoice_EPXCrowdsale(this);
[L3966]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]              havoc msgsender_MSG;
[L3864]              havoc msgvalue_MSG;
[L3865]              havoc choice;
[L3866]              havoc initialEPXtokenCount_s286;
[L3867]              havoc remainingEPXtokenCount_s299;
[L3868]              havoc _fundingStartBlock_s391;
[L3869]              havoc _fundingEndBlock_s391;
[L3870]              havoc response_s391;
[L3871]              havoc _amount_s558;
[L3872]              havoc tmpNow;
[L3873]              havoc gas;
[L3874]              assume gas > 4000000 && gas <= 8000000;
[L3875]              tmpNow := now;
[L3876]              havoc now;
[L3877]              assume now > tmpNow;
[L3878]              assume msgsender_MSG != null;
[L3879]              assume DType[msgsender_MSG] != owned;
[L3880]              assume DType[msgsender_MSG] != safeMath;
[L3881]              assume DType[msgsender_MSG] != StandardToken;
[L3882]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]              Alloc[msgsender_MSG] := true;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                 revert := revert_hold;
[L3884]  COND TRUE   choice == 7
[L3886]              gas := gas - 21000;
[L3887]  COND FALSE  !(gas >= 0)
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                 revert := revert_hold;
[L3966]  RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:11:53,641 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:11:53,642 INFO  L82        PathProgramCache]: Analyzing trace with hash 971947976, now seen corresponding path program 1 times
[2020-05-30 20:11:53,645 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:11:53,669 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:11:53,717 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-30 20:11:53,719 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:11:53,719 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 20:11:53,723 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:11:53,735 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 20:11:53,735 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 20:11:53,737 INFO  L87              Difference]: Start difference. First operand 10372 states. Second operand 3 states.
[2020-05-30 20:11:54,851 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:11:54,851 INFO  L93              Difference]: Finished difference Result 9040 states and 19944 transitions.
[2020-05-30 20:11:54,852 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 20:11:54,854 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9040 states and 19944 transitions.
[2020-05-30 20:11:54,916 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:11:55,000 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9040 states to 9040 states and 19944 transitions.
[2020-05-30 20:11:55,001 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 8
[2020-05-30 20:11:55,001 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 10
[2020-05-30 20:11:55,001 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9040 states and 19944 transitions.
[2020-05-30 20:11:55,039 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:11:55,039 INFO  L728         BuchiCegarLoop]: Abstraction has 9040 states and 19944 transitions.
[2020-05-30 20:11:55,065 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9040 states and 19944 transitions.
[2020-05-30 20:11:55,218 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9040 to 9040.
[2020-05-30 20:11:55,218 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9040 states.
[2020-05-30 20:11:55,240 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9040 states to 9040 states and 19944 transitions.
[2020-05-30 20:11:55,241 INFO  L751         BuchiCegarLoop]: Abstraction has 9040 states and 19944 transitions.
[2020-05-30 20:11:55,241 INFO  L631         BuchiCegarLoop]: Abstraction has 9040 states and 19944 transitions.
[2020-05-30 20:11:55,241 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-05-30 20:11:55,241 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9040 states and 19944 transitions.
[2020-05-30 20:11:55,257 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:11:55,257 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:11:55,257 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:11:55,259 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:11:55,259 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_CorralChoice_EPXCrowdsale2 := false;
[L7]                 success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                 call_CorralChoice_EPXCrowdsale1 := false;
[L7]                 fsum_send__success_2_0 := 0;
[L7]                 fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                 success_CorralChoice_EPXCrowdsale0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L3957]              assume null == 0;
[L3958]  CALL        call this := FreshRefGenerator__success();
[L1098]              havoc newRef;
[L1099]              assume Alloc[newRef] == false;
[L1100]              Alloc[newRef] := true;
[L1101]              assume newRef != null;
[L3958]  RET         call this := FreshRefGenerator__success();
[L3959]              assume now >= 0;
[L3960]              assume DType[this] == EPXCrowdsale;
[L3961]              gas := gas - 53000;
[L3962]  CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]               havoc __exception;
[L342]               revert := false;
[L343]   COND FALSE  !(__exception)
[L376]   CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]              assume msgsender_MSG != null;
[L1119]              Balance[this] := 0;
[L1120]              owner_owned[this] := null;
[L1121]              owner_owned[this] := msgsender_MSG;
[L1139]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]  COND FALSE  !(revert)
[L1891]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]  COND TRUE   revert
[L376]   RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]               assume !revert && gas >= 0;
[L3962]  RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]              assume !revert && gas >= 0;
[L3966]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]              havoc msgsender_MSG;
[L3864]              havoc msgvalue_MSG;
[L3865]              havoc choice;
[L3866]              havoc initialEPXtokenCount_s286;
[L3867]              havoc remainingEPXtokenCount_s299;
[L3868]              havoc _fundingStartBlock_s391;
[L3869]              havoc _fundingEndBlock_s391;
[L3870]              havoc response_s391;
[L3871]              havoc _amount_s558;
[L3872]              havoc tmpNow;
[L3873]              havoc gas;
[L3874]              assume gas > 4000000 && gas <= 8000000;
[L3875]              tmpNow := now;
[L3876]              havoc now;
[L3877]              assume now > tmpNow;
[L3878]              assume msgsender_MSG != null;
[L3879]              assume DType[msgsender_MSG] != owned;
[L3880]              assume DType[msgsender_MSG] != safeMath;
[L3881]              assume DType[msgsender_MSG] != StandardToken;
[L3882]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]              Alloc[msgsender_MSG] := true;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                 revert := revert_hold;
[L3884]  COND TRUE   choice == 7
[L3886]              gas := gas - 21000;
[L3887]  COND FALSE  !(gas >= 0)
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                 success_CorralChoice_EPXCrowdsale2 := true;
[L7]                 success_CorralChoice_EPXCrowdsale2 := false;
[L7]                 revert := revert_hold;
[L3966]  RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]              havoc msgsender_MSG;
[L3864]              havoc msgvalue_MSG;
[L3865]              havoc choice;
[L3866]              havoc initialEPXtokenCount_s286;
[L3867]              havoc remainingEPXtokenCount_s299;
[L3868]              havoc _fundingStartBlock_s391;
[L3869]              havoc _fundingEndBlock_s391;
[L3870]              havoc response_s391;
[L3871]              havoc _amount_s558;
[L3872]              havoc tmpNow;
[L3873]              havoc gas;
[L3874]              assume gas > 4000000 && gas <= 8000000;
[L3875]              tmpNow := now;
[L3876]              havoc now;
[L3877]              assume now > tmpNow;
[L3878]              assume msgsender_MSG != null;
[L3879]              assume DType[msgsender_MSG] != owned;
[L3880]              assume DType[msgsender_MSG] != safeMath;
[L3881]              assume DType[msgsender_MSG] != StandardToken;
[L3882]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]              Alloc[msgsender_MSG] := true;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                 revert := revert_hold;
[L3884]  COND TRUE   choice == 7
[L3886]              gas := gas - 21000;
[L3887]  COND FALSE  !(gas >= 0)
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                 success_CorralChoice_EPXCrowdsale2 := true;
[L7]                 success_CorralChoice_EPXCrowdsale2 := false;
[L7]                 revert := revert_hold;
[L3966]  RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:11:55,262 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:11:55,262 INFO  L82        PathProgramCache]: Analyzing trace with hash 1751224667, now seen corresponding path program 1 times
[2020-05-30 20:11:55,263 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:11:55,273 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:11:55,289 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-30 20:11:55,289 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:11:55,289 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 20:11:55,290 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:11:55,290 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 20:11:55,290 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 20:11:55,291 INFO  L87              Difference]: Start difference. First operand 9040 states and 19944 transitions. cyclomatic complexity: 10913 Second operand 3 states.
[2020-05-30 20:11:55,647 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:11:55,647 INFO  L93              Difference]: Finished difference Result 10660 states and 23262 transitions.
[2020-05-30 20:11:55,647 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 20:11:55,647 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10660 states and 23262 transitions.
[2020-05-30 20:11:55,688 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:11:55,763 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10660 states to 10660 states and 23262 transitions.
[2020-05-30 20:11:55,763 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 10
[2020-05-30 20:11:55,763 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 10
[2020-05-30 20:11:55,763 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10660 states and 23262 transitions.
[2020-05-30 20:11:55,783 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:11:55,783 INFO  L728         BuchiCegarLoop]: Abstraction has 10660 states and 23262 transitions.
[2020-05-30 20:11:55,796 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10660 states and 23262 transitions.
[2020-05-30 20:11:55,956 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10660 to 10074.
[2020-05-30 20:11:55,956 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10074 states.
[2020-05-30 20:11:55,983 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10074 states to 10074 states and 22180 transitions.
[2020-05-30 20:11:55,983 INFO  L751         BuchiCegarLoop]: Abstraction has 10074 states and 22180 transitions.
[2020-05-30 20:11:55,983 INFO  L631         BuchiCegarLoop]: Abstraction has 10074 states and 22180 transitions.
[2020-05-30 20:11:55,983 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-05-30 20:11:55,983 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10074 states and 22180 transitions.
[2020-05-30 20:11:56,000 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:11:56,000 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:11:56,000 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:11:56,001 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:11:56,002 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_CorralChoice_EPXCrowdsale2 := false;
[L7]                 success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                 call_CorralChoice_EPXCrowdsale1 := false;
[L7]                 fsum_send__success_2_0 := 0;
[L7]                 fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                 success_CorralChoice_EPXCrowdsale0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L3957]              assume null == 0;
[L3958]  CALL        call this := FreshRefGenerator__success();
[L1098]              havoc newRef;
[L1099]              assume Alloc[newRef] == false;
[L1100]              Alloc[newRef] := true;
[L1101]              assume newRef != null;
[L3958]  RET         call this := FreshRefGenerator__success();
[L3959]              assume now >= 0;
[L3960]              assume DType[this] == EPXCrowdsale;
[L3961]              gas := gas - 53000;
[L3962]  CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]               havoc __exception;
[L342]               revert := false;
[L343]   COND FALSE  !(__exception)
[L376]   CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]              assume msgsender_MSG != null;
[L1119]              Balance[this] := 0;
[L1120]              owner_owned[this] := null;
[L1121]              owner_owned[this] := msgsender_MSG;
[L1139]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]  COND FALSE  !(revert)
[L1891]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]  COND FALSE  !(revert)
[L1897]  CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]  CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]              assume msgsender_MSG != null;
[L1159]              Balance[this] := 0;
[L1177]  RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]  COND FALSE  !(revert)
[L1897]  RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]  COND FALSE  !(revert)
[L1903]  CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]              assume msgsender_MSG != null;
[L1817]              Balance[this] := 0;
[L1818]              admin_EPXCrowdsale[this] := null;
[L1819]              initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]              tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]              beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]              amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]              fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]              CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]              fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]              fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]              isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]              areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]              isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]  CALL        call __var_1 := FreshRefGenerator__success();
[L1098]              havoc newRef;
[L1099]              assume Alloc[newRef] == false;
[L1100]              Alloc[newRef] := true;
[L1101]              assume newRef != null;
[L1830]  RET         call __var_1 := FreshRefGenerator__success();
[L1831]  COND FALSE  !(revert)
[L1836]              balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]              M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]  CALL        call __var_2 := FreshRefGenerator__success();
[L1098]              havoc newRef;
[L1099]              assume Alloc[newRef] == false;
[L1100]              Alloc[newRef] := true;
[L1101]              assume newRef != null;
[L1839]  RET         call __var_2 := FreshRefGenerator__success();
[L1840]  COND FALSE  !(revert)
[L1845]              usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]              M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              gas := gas - 828;
[L3668]  COND TRUE   !(msgsender_MSG == owner_owned[this])
[L3670]              revert := true;
[L1848]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  COND TRUE   revert
[L1903]  RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  COND FALSE  !(revert)
[L376]   RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]               assume !revert && gas >= 0;
[L3962]  RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]              assume !revert && gas >= 0;
[L3966]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]              havoc msgsender_MSG;
[L3864]              havoc msgvalue_MSG;
[L3865]              havoc choice;
[L3866]              havoc initialEPXtokenCount_s286;
[L3867]              havoc remainingEPXtokenCount_s299;
[L3868]              havoc _fundingStartBlock_s391;
[L3869]              havoc _fundingEndBlock_s391;
[L3870]              havoc response_s391;
[L3871]              havoc _amount_s558;
[L3872]              havoc tmpNow;
[L3873]              havoc gas;
[L3874]              assume gas > 4000000 && gas <= 8000000;
[L3875]              tmpNow := now;
[L3876]              havoc now;
[L3877]              assume now > tmpNow;
[L3878]              assume msgsender_MSG != null;
[L3879]              assume DType[msgsender_MSG] != owned;
[L3880]              assume DType[msgsender_MSG] != safeMath;
[L3881]              assume DType[msgsender_MSG] != StandardToken;
[L3882]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]              Alloc[msgsender_MSG] := true;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                 revert := revert_hold;
[L3884]  COND TRUE   choice == 7
[L3886]              gas := gas - 21000;
[L3887]  COND FALSE  !(gas >= 0)
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                 success_CorralChoice_EPXCrowdsale2 := true;
[L7]                 success_CorralChoice_EPXCrowdsale2 := false;
[L7]                 revert := revert_hold;
[L3966]  RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]              havoc msgsender_MSG;
[L3864]              havoc msgvalue_MSG;
[L3865]              havoc choice;
[L3866]              havoc initialEPXtokenCount_s286;
[L3867]              havoc remainingEPXtokenCount_s299;
[L3868]              havoc _fundingStartBlock_s391;
[L3869]              havoc _fundingEndBlock_s391;
[L3870]              havoc response_s391;
[L3871]              havoc _amount_s558;
[L3872]              havoc tmpNow;
[L3873]              havoc gas;
[L3874]              assume gas > 4000000 && gas <= 8000000;
[L3875]              tmpNow := now;
[L3876]              havoc now;
[L3877]              assume now > tmpNow;
[L3878]              assume msgsender_MSG != null;
[L3879]              assume DType[msgsender_MSG] != owned;
[L3880]              assume DType[msgsender_MSG] != safeMath;
[L3881]              assume DType[msgsender_MSG] != StandardToken;
[L3882]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]              Alloc[msgsender_MSG] := true;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                 revert := revert_hold;
[L3884]  COND TRUE   choice == 7
[L3886]              gas := gas - 21000;
[L3887]  COND FALSE  !(gas >= 0)
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                 success_CorralChoice_EPXCrowdsale2 := true;
[L7]                 success_CorralChoice_EPXCrowdsale2 := false;
[L7]                 revert := revert_hold;
[L3966]  RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:11:56,004 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:11:56,004 INFO  L82        PathProgramCache]: Analyzing trace with hash 2144388010, now seen corresponding path program 1 times
[2020-05-30 20:11:56,004 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:11:56,015 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:11:56,048 INFO  L134       CoverageAnalysis]: Checked inductivity of 18 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 18 trivial. 0 not checked.
[2020-05-30 20:11:56,048 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:11:56,048 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-30 20:11:56,048 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:11:56,049 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 20:11:56,049 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-30 20:11:56,049 INFO  L87              Difference]: Start difference. First operand 10074 states and 22180 transitions. cyclomatic complexity: 12115 Second operand 4 states.
[2020-05-30 20:11:57,827 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:11:57,827 INFO  L93              Difference]: Finished difference Result 10072 states and 15797 transitions.
[2020-05-30 20:11:57,827 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-30 20:11:57,827 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10072 states and 15797 transitions.
[2020-05-30 20:11:57,853 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:11:57,896 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10072 states to 10072 states and 15797 transitions.
[2020-05-30 20:11:57,897 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 9
[2020-05-30 20:11:57,897 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 9
[2020-05-30 20:11:57,897 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10072 states and 15797 transitions.
[2020-05-30 20:11:57,906 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:11:57,906 INFO  L728         BuchiCegarLoop]: Abstraction has 10072 states and 15797 transitions.
[2020-05-30 20:11:57,917 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10072 states and 15797 transitions.
[2020-05-30 20:11:58,029 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10072 to 10072.
[2020-05-30 20:11:58,030 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10072 states.
[2020-05-30 20:11:58,062 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10072 states to 10072 states and 15797 transitions.
[2020-05-30 20:11:58,062 INFO  L751         BuchiCegarLoop]: Abstraction has 10072 states and 15797 transitions.
[2020-05-30 20:11:58,062 INFO  L631         BuchiCegarLoop]: Abstraction has 10072 states and 15797 transitions.
[2020-05-30 20:11:58,063 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-05-30 20:11:58,063 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10072 states and 15797 transitions.
[2020-05-30 20:11:58,088 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:11:58,089 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:11:58,089 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:11:58,092 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:11:58,092 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND TRUE   !(msgsender_MSG == owner_owned[this])
[L3670]                    revert := true;
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND TRUE   revert
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND TRUE   !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this])
[L2645]                    revert := true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]              havoc msgsender_MSG;
[L3864]              havoc msgvalue_MSG;
[L3865]              havoc choice;
[L3866]              havoc initialEPXtokenCount_s286;
[L3867]              havoc remainingEPXtokenCount_s299;
[L3868]              havoc _fundingStartBlock_s391;
[L3869]              havoc _fundingEndBlock_s391;
[L3870]              havoc response_s391;
[L3871]              havoc _amount_s558;
[L3872]              havoc tmpNow;
[L3873]              havoc gas;
[L3874]              assume gas > 4000000 && gas <= 8000000;
[L3875]              tmpNow := now;
[L3876]              havoc now;
[L3877]              assume now > tmpNow;
[L3878]              assume msgsender_MSG != null;
[L3879]              assume DType[msgsender_MSG] != owned;
[L3880]              assume DType[msgsender_MSG] != safeMath;
[L3881]              assume DType[msgsender_MSG] != StandardToken;
[L3882]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]              Alloc[msgsender_MSG] := true;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                 revert := revert_hold;
[L3884]  COND TRUE   choice == 7
[L3886]              gas := gas - 21000;
[L3887]  COND FALSE  !(gas >= 0)
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                 success_CorralChoice_EPXCrowdsale2 := true;
[L7]                 success_CorralChoice_EPXCrowdsale2 := false;
[L7]                 revert := revert_hold;
[L3966]  RET         call CorralChoice_EPXCrowdsale(this);
[L3966]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]              havoc msgsender_MSG;
[L3864]              havoc msgvalue_MSG;
[L3865]              havoc choice;
[L3866]              havoc initialEPXtokenCount_s286;
[L3867]              havoc remainingEPXtokenCount_s299;
[L3868]              havoc _fundingStartBlock_s391;
[L3869]              havoc _fundingEndBlock_s391;
[L3870]              havoc response_s391;
[L3871]              havoc _amount_s558;
[L3872]              havoc tmpNow;
[L3873]              havoc gas;
[L3874]              assume gas > 4000000 && gas <= 8000000;
[L3875]              tmpNow := now;
[L3876]              havoc now;
[L3877]              assume now > tmpNow;
[L3878]              assume msgsender_MSG != null;
[L3879]              assume DType[msgsender_MSG] != owned;
[L3880]              assume DType[msgsender_MSG] != safeMath;
[L3881]              assume DType[msgsender_MSG] != StandardToken;
[L3882]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]              Alloc[msgsender_MSG] := true;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                 revert := revert_hold;
[L3884]  COND FALSE  !(choice == 7)
[L3893]  COND FALSE  !(choice == 6)
[L3902]  COND FALSE  !(choice == 5)
[L3911]  COND FALSE  !(choice == 4)
[L3920]  COND TRUE   choice == 3
[L3922]              gas := gas - 21000;
[L3923]  COND TRUE   gas >= 0
[L3925]              assume msgvalue_MSG == 0;
[L3926]  CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]               havoc __exception;
[L622]               revert := false;
[L623]   COND FALSE  !(__exception)
[L656]   CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              gas := gas - 828;
[L3668]  COND TRUE   !(msgsender_MSG == owner_owned[this])
[L3670]              revert := true;
[L2633]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]  COND TRUE   revert
[L656]   RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                 success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                 success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                 revert := revert_hold;
[L3926]  RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                 revert := revert_hold;
[L3966]  RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:11:58,097 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:11:58,097 INFO  L82        PathProgramCache]: Analyzing trace with hash -1533407502, now seen corresponding path program 1 times
[2020-05-30 20:11:58,098 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:11:58,122 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:11:58,227 INFO  L134       CoverageAnalysis]: Checked inductivity of 14 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 12 trivial. 0 not checked.
[2020-05-30 20:11:58,227 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:11:58,227 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [3] total 3
[2020-05-30 20:11:58,227 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:11:58,228 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 20:11:58,228 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 20:11:58,228 INFO  L87              Difference]: Start difference. First operand 10072 states and 15797 transitions. cyclomatic complexity: 5738 Second operand 3 states.
[2020-05-30 20:11:58,412 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:11:58,412 INFO  L93              Difference]: Finished difference Result 10583 states and 15908 transitions.
[2020-05-30 20:11:58,412 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 20:11:58,412 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10583 states and 15908 transitions.
[2020-05-30 20:11:58,434 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:11:58,470 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10583 states to 9861 states and 14806 transitions.
[2020-05-30 20:11:58,470 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 9
[2020-05-30 20:11:58,470 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 9
[2020-05-30 20:11:58,470 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9861 states and 14806 transitions.
[2020-05-30 20:11:58,480 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:11:58,481 INFO  L728         BuchiCegarLoop]: Abstraction has 9861 states and 14806 transitions.
[2020-05-30 20:11:58,490 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9861 states and 14806 transitions.
[2020-05-30 20:11:58,558 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9861 to 9518.
[2020-05-30 20:11:58,558 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9518 states.
[2020-05-30 20:11:58,572 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9518 states to 9518 states and 14358 transitions.
[2020-05-30 20:11:58,572 INFO  L751         BuchiCegarLoop]: Abstraction has 9518 states and 14358 transitions.
[2020-05-30 20:11:58,572 INFO  L631         BuchiCegarLoop]: Abstraction has 9518 states and 14358 transitions.
[2020-05-30 20:11:58,572 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-05-30 20:11:58,572 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9518 states and 14358 transitions.
[2020-05-30 20:11:58,582 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:11:58,582 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:11:58,582 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:11:58,583 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:11:58,583 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_CorralChoice_EPXCrowdsale2 := false;
[L7]                 success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                 call_CorralChoice_EPXCrowdsale1 := false;
[L7]                 fsum_send__success_2_0 := 0;
[L7]                 fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                 success_CorralChoice_EPXCrowdsale0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L3957]              assume null == 0;
[L3958]  CALL        call this := FreshRefGenerator__success();
[L1098]              havoc newRef;
[L1099]              assume Alloc[newRef] == false;
[L1100]              Alloc[newRef] := true;
[L1101]              assume newRef != null;
[L3958]  RET         call this := FreshRefGenerator__success();
[L3959]              assume now >= 0;
[L3960]              assume DType[this] == EPXCrowdsale;
[L3961]              gas := gas - 53000;
[L3962]  CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]               havoc __exception;
[L342]               revert := false;
[L343]   COND FALSE  !(__exception)
[L376]   CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]              assume msgsender_MSG != null;
[L1119]              Balance[this] := 0;
[L1120]              owner_owned[this] := null;
[L1121]              owner_owned[this] := msgsender_MSG;
[L1139]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]  COND FALSE  !(revert)
[L1891]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]  COND FALSE  !(revert)
[L1897]  CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]  CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]              assume msgsender_MSG != null;
[L1159]              Balance[this] := 0;
[L1177]  RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]  COND FALSE  !(revert)
[L1897]  RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]  COND FALSE  !(revert)
[L1903]  CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]              assume msgsender_MSG != null;
[L1817]              Balance[this] := 0;
[L1818]              admin_EPXCrowdsale[this] := null;
[L1819]              initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]              tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]              beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]              amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]              fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]              CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]              fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]              fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]              isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]              areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]              isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]  CALL        call __var_1 := FreshRefGenerator__success();
[L1098]              havoc newRef;
[L1099]              assume Alloc[newRef] == false;
[L1100]              Alloc[newRef] := true;
[L1101]              assume newRef != null;
[L1830]  RET         call __var_1 := FreshRefGenerator__success();
[L1831]  COND FALSE  !(revert)
[L1836]              balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]              M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]  CALL        call __var_2 := FreshRefGenerator__success();
[L1098]              havoc newRef;
[L1099]              assume Alloc[newRef] == false;
[L1100]              Alloc[newRef] := true;
[L1101]              assume newRef != null;
[L1839]  RET         call __var_2 := FreshRefGenerator__success();
[L1840]  COND FALSE  !(revert)
[L1845]              usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]              M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              gas := gas - 828;
[L3668]  COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  COND FALSE  !(revert)
[L1854]              admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]              CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]  RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  COND FALSE  !(revert)
[L376]   RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]               assume !revert && gas >= 0;
[L3962]  RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]              assume !revert && gas >= 0;
[L3966]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]              havoc msgsender_MSG;
[L3864]              havoc msgvalue_MSG;
[L3865]              havoc choice;
[L3866]              havoc initialEPXtokenCount_s286;
[L3867]              havoc remainingEPXtokenCount_s299;
[L3868]              havoc _fundingStartBlock_s391;
[L3869]              havoc _fundingEndBlock_s391;
[L3870]              havoc response_s391;
[L3871]              havoc _amount_s558;
[L3872]              havoc tmpNow;
[L3873]              havoc gas;
[L3874]              assume gas > 4000000 && gas <= 8000000;
[L3875]              tmpNow := now;
[L3876]              havoc now;
[L3877]              assume now > tmpNow;
[L3878]              assume msgsender_MSG != null;
[L3879]              assume DType[msgsender_MSG] != owned;
[L3880]              assume DType[msgsender_MSG] != safeMath;
[L3881]              assume DType[msgsender_MSG] != StandardToken;
[L3882]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]              Alloc[msgsender_MSG] := true;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                 revert := revert_hold;
[L3884]  COND TRUE   choice == 7
[L3886]              gas := gas - 21000;
[L3887]  COND FALSE  !(gas >= 0)
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                 success_CorralChoice_EPXCrowdsale2 := true;
[L7]                 success_CorralChoice_EPXCrowdsale2 := false;
[L7]                 revert := revert_hold;
[L3966]  RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND FALSE  !(Balance[from] >= amount)
[L3644]                    success := false;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:11:58,586 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:11:58,586 INFO  L82        PathProgramCache]: Analyzing trace with hash -595603276, now seen corresponding path program 1 times
[2020-05-30 20:11:58,587 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:11:58,597 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:11:58,621 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-05-30 20:11:58,621 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:11:58,621 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-30 20:11:58,622 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:11:58,622 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 20:11:58,622 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-05-30 20:11:58,622 INFO  L87              Difference]: Start difference. First operand 9518 states and 14358 transitions. cyclomatic complexity: 4853 Second operand 4 states.
[2020-05-30 20:11:58,910 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:11:58,911 INFO  L93              Difference]: Finished difference Result 9778 states and 14746 transitions.
[2020-05-30 20:11:58,911 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-30 20:11:58,911 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9778 states and 14746 transitions.
[2020-05-30 20:11:58,938 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 20:11:58,981 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9778 states to 9778 states and 14746 transitions.
[2020-05-30 20:11:58,981 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 15
[2020-05-30 20:11:58,981 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 15
[2020-05-30 20:11:58,981 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9778 states and 14746 transitions.
[2020-05-30 20:11:58,989 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:11:58,989 INFO  L728         BuchiCegarLoop]: Abstraction has 9778 states and 14746 transitions.
[2020-05-30 20:11:58,998 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9778 states and 14746 transitions.
[2020-05-30 20:11:59,058 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9778 to 9554.
[2020-05-30 20:11:59,058 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9554 states.
[2020-05-30 20:11:59,072 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9554 states to 9554 states and 14377 transitions.
[2020-05-30 20:11:59,072 INFO  L751         BuchiCegarLoop]: Abstraction has 9554 states and 14377 transitions.
[2020-05-30 20:11:59,072 INFO  L631         BuchiCegarLoop]: Abstraction has 9554 states and 14377 transitions.
[2020-05-30 20:11:59,072 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-05-30 20:11:59,072 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9554 states and 14377 transitions.
[2020-05-30 20:11:59,081 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:11:59,081 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:11:59,081 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:11:59,083 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:11:59,083 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND FALSE  !(Balance[from] >= amount)
[L3644]                    success := false;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND FALSE  !(choice == 1)
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND FALSE  !(Balance[from] >= amount)
[L3644]                    success := false;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:11:59,086 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:11:59,086 INFO  L82        PathProgramCache]: Analyzing trace with hash 1417390756, now seen corresponding path program 1 times
[2020-05-30 20:11:59,086 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:11:59,099 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:11:59,124 INFO  L134       CoverageAnalysis]: Checked inductivity of 14 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 14 trivial. 0 not checked.
[2020-05-30 20:11:59,124 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:11:59,125 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-30 20:11:59,125 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:11:59,125 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 20:11:59,125 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-30 20:11:59,125 INFO  L87              Difference]: Start difference. First operand 9554 states and 14377 transitions. cyclomatic complexity: 4836 Second operand 4 states.
[2020-05-30 20:11:59,222 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:11:59,222 INFO  L93              Difference]: Finished difference Result 9589 states and 14431 transitions.
[2020-05-30 20:11:59,223 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-30 20:11:59,223 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9589 states and 14431 transitions.
[2020-05-30 20:11:59,244 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:11:59,273 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9589 states to 9579 states and 14419 transitions.
[2020-05-30 20:11:59,274 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 13
[2020-05-30 20:11:59,274 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 13
[2020-05-30 20:11:59,274 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9579 states and 14419 transitions.
[2020-05-30 20:11:59,281 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:11:59,281 INFO  L728         BuchiCegarLoop]: Abstraction has 9579 states and 14419 transitions.
[2020-05-30 20:11:59,290 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9579 states and 14419 transitions.
[2020-05-30 20:11:59,349 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9579 to 9579.
[2020-05-30 20:11:59,349 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9579 states.
[2020-05-30 20:11:59,363 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9579 states to 9579 states and 14419 transitions.
[2020-05-30 20:11:59,363 INFO  L751         BuchiCegarLoop]: Abstraction has 9579 states and 14419 transitions.
[2020-05-30 20:11:59,363 INFO  L631         BuchiCegarLoop]: Abstraction has 9579 states and 14419 transitions.
[2020-05-30 20:11:59,363 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-05-30 20:11:59,363 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9579 states and 14419 transitions.
[2020-05-30 20:11:59,373 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:11:59,373 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:11:59,373 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:11:59,375 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:11:59,375 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND FALSE  !(choice == 1)
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:11:59,378 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:11:59,378 INFO  L82        PathProgramCache]: Analyzing trace with hash 548236997, now seen corresponding path program 1 times
[2020-05-30 20:11:59,378 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:11:59,392 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:11:59,452 INFO  L134       CoverageAnalysis]: Checked inductivity of 14 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 14 trivial. 0 not checked.
[2020-05-30 20:11:59,452 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:11:59,452 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-05-30 20:11:59,452 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:11:59,453 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 20:11:59,453 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-05-30 20:11:59,453 INFO  L87              Difference]: Start difference. First operand 9579 states and 14419 transitions. cyclomatic complexity: 4853 Second operand 11 states.
[2020-05-30 20:12:06,058 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:12:06,058 INFO  L93              Difference]: Finished difference Result 10695 states and 16280 transitions.
[2020-05-30 20:12:06,058 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 20:12:06,058 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10695 states and 16280 transitions.
[2020-05-30 20:12:06,085 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-05-30 20:12:06,121 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10695 states to 10695 states and 16280 transitions.
[2020-05-30 20:12:06,122 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 30
[2020-05-30 20:12:06,122 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 30
[2020-05-30 20:12:06,122 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10695 states and 16280 transitions.
[2020-05-30 20:12:06,130 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:12:06,130 INFO  L728         BuchiCegarLoop]: Abstraction has 10695 states and 16280 transitions.
[2020-05-30 20:12:06,137 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10695 states and 16280 transitions.
[2020-05-30 20:12:06,213 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10695 to 10516.
[2020-05-30 20:12:06,213 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10516 states.
[2020-05-30 20:12:06,229 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10516 states to 10516 states and 15934 transitions.
[2020-05-30 20:12:06,229 INFO  L751         BuchiCegarLoop]: Abstraction has 10516 states and 15934 transitions.
[2020-05-30 20:12:06,229 INFO  L631         BuchiCegarLoop]: Abstraction has 10516 states and 15934 transitions.
[2020-05-30 20:12:06,229 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-05-30 20:12:06,229 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10516 states and 15934 transitions.
[2020-05-30 20:12:06,239 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:12:06,240 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:12:06,240 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:12:06,241 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:12:06,242 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -437875663;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND FALSE  !(choice == 1)
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:12:06,244 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:12:06,245 INFO  L82        PathProgramCache]: Analyzing trace with hash 415121247, now seen corresponding path program 1 times
[2020-05-30 20:12:06,245 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:12:06,256 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:12:06,293 INFO  L134       CoverageAnalysis]: Checked inductivity of 22 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 22 trivial. 0 not checked.
[2020-05-30 20:12:06,293 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:12:06,293 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-05-30 20:12:06,294 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:12:06,294 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-30 20:12:06,294 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-05-30 20:12:06,294 INFO  L87              Difference]: Start difference. First operand 10516 states and 15934 transitions. cyclomatic complexity: 5434 Second operand 10 states.
[2020-05-30 20:12:13,624 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:12:13,624 INFO  L93              Difference]: Finished difference Result 12052 states and 18910 transitions.
[2020-05-30 20:12:13,624 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-05-30 20:12:13,624 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12052 states and 18910 transitions.
[2020-05-30 20:12:13,659 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-05-30 20:12:13,707 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12052 states to 12052 states and 18910 transitions.
[2020-05-30 20:12:13,708 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 47
[2020-05-30 20:12:13,708 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 47
[2020-05-30 20:12:13,708 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12052 states and 18910 transitions.
[2020-05-30 20:12:13,718 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:12:13,718 INFO  L728         BuchiCegarLoop]: Abstraction has 12052 states and 18910 transitions.
[2020-05-30 20:12:13,726 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12052 states and 18910 transitions.
[2020-05-30 20:12:13,826 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12052 to 12042.
[2020-05-30 20:12:13,826 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 12042 states.
[2020-05-30 20:12:13,850 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 12042 states to 12042 states and 18796 transitions.
[2020-05-30 20:12:13,851 INFO  L751         BuchiCegarLoop]: Abstraction has 12042 states and 18796 transitions.
[2020-05-30 20:12:13,851 INFO  L631         BuchiCegarLoop]: Abstraction has 12042 states and 18796 transitions.
[2020-05-30 20:12:13,851 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-05-30 20:12:13,851 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12042 states and 18796 transitions.
[2020-05-30 20:12:13,865 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-05-30 20:12:13,865 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:12:13,865 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:12:13,867 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:12:13,867 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND FALSE  !(gas < 21000)
[L3344]        COND TRUE   iterate && gas >= 21000
[L3346]                    havoc msgsender_MSG;
[L3347]                    havoc msgvalue_MSG;
[L3348]                    havoc choice;
[L3349]                    havoc who_s162;
[L3350]                    havoc __ret_0_balanceOf;
[L3351]                    havoc to_s171;
[L3352]                    havoc value_s171;
[L3353]                    havoc __ret_0_transfer;
[L3354]                    havoc initialEPXtokenCount_s286;
[L3355]                    havoc remainingEPXtokenCount_s299;
[L3356]                    havoc _fundingStartBlock_s391;
[L3357]                    havoc _fundingEndBlock_s391;
[L3358]                    havoc response_s391;
[L3359]                    havoc _amount_s558;
[L3360]                    havoc iterate;
[L3361]        COND TRUE   DType[from] == EPXCrowdsale
[L3363]        COND FALSE  !(choice == 7)
[L3376]        COND FALSE  !(choice == 6)
[L3389]        COND FALSE  !(choice == 5)
[L3402]        COND FALSE  !(choice == 4)
[L3415]        COND FALSE  !(choice == 3)
[L3428]        COND TRUE   choice == 2
[L3430]                    gas := gas - 21000;
[L3431]        COND TRUE   gas >= 0
[L3433]                    assume msgvalue_MSG == 0;
[L3434]        CALL        call checkGoalReached_EPXCrowdsale__success(from, to, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -437875663;
[L3434]        RET         call checkGoalReached_EPXCrowdsale__success(from, to, msgvalue_MSG);
[L3435]        COND FALSE  !(revert)
[L3344]        COND FALSE  !(iterate && gas >= 21000)
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND FALSE  !(choice == 1)
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:12:13,870 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:12:13,871 INFO  L82        PathProgramCache]: Analyzing trace with hash -1524697694, now seen corresponding path program 1 times
[2020-05-30 20:12:13,871 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:12:13,890 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:12:13,966 INFO  L134       CoverageAnalysis]: Checked inductivity of 23 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 23 trivial. 0 not checked.
[2020-05-30 20:12:13,966 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:12:13,966 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-05-30 20:12:13,966 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:12:13,966 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-05-30 20:12:13,966 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-05-30 20:12:13,967 INFO  L87              Difference]: Start difference. First operand 12042 states and 18796 transitions. cyclomatic complexity: 6776 Second operand 5 states.
[2020-05-30 20:12:16,736 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:12:16,736 INFO  L93              Difference]: Finished difference Result 11971 states and 17742 transitions.
[2020-05-30 20:12:16,736 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-30 20:12:16,736 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11971 states and 17742 transitions.
[2020-05-30 20:12:16,758 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 20:12:16,788 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11971 states to 11971 states and 17742 transitions.
[2020-05-30 20:12:16,789 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 40
[2020-05-30 20:12:16,789 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 40
[2020-05-30 20:12:16,789 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11971 states and 17742 transitions.
[2020-05-30 20:12:16,797 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:12:16,797 INFO  L728         BuchiCegarLoop]: Abstraction has 11971 states and 17742 transitions.
[2020-05-30 20:12:16,803 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11971 states and 17742 transitions.
[2020-05-30 20:12:16,866 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11971 to 11272.
[2020-05-30 20:12:16,866 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11272 states.
[2020-05-30 20:12:16,880 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11272 states to 11272 states and 16574 transitions.
[2020-05-30 20:12:16,880 INFO  L751         BuchiCegarLoop]: Abstraction has 11272 states and 16574 transitions.
[2020-05-30 20:12:16,880 INFO  L631         BuchiCegarLoop]: Abstraction has 11272 states and 16574 transitions.
[2020-05-30 20:12:16,881 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-05-30 20:12:16,881 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11272 states and 16574 transitions.
[2020-05-30 20:12:16,892 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:12:16,892 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:12:16,892 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:12:16,893 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:12:16,893 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND TRUE   __exception
[L345]                     __tmp__Balance := Balance;
[L346]                     __tmp__DType := DType;
[L347]                     __tmp__Alloc := Alloc;
[L348]                     __tmp__balance_ADDR := balance_ADDR;
[L349]                     __tmp__M_Ref_int_balancesArray0 := M_Ref_int_balancesArray0;
[L350]                     __tmp__sum_balancesArray0 := sum_balancesArray0;
[L351]                     __tmp__M_Ref_int_usersEPXfundValue1 := M_Ref_int_usersEPXfundValue1;
[L352]                     __tmp__sum_usersEPXfundValue1 := sum_usersEPXfundValue1;
[L353]                     __tmp__Length := Length;
[L354]                     __tmp__now := now;
[L355]                     __tmp__owner_owned := owner_owned;
[L356]                     __tmp__admin_EPXCrowdsale := admin_EPXCrowdsale;
[L357]                     __tmp__tokenReward_EPXCrowdsale := tokenReward_EPXCrowdsale;
[L358]                     __tmp__initialTokenSupply_EPXCrowdsale := initialTokenSupply_EPXCrowdsale;
[L359]                     __tmp__tokensRemaining_EPXCrowdsale := tokensRemaining_EPXCrowdsale;
[L360]                     __tmp__beneficiaryWallet_EPXCrowdsale := beneficiaryWallet_EPXCrowdsale;
[L361]                     __tmp__amountRaisedInWei_EPXCrowdsale := amountRaisedInWei_EPXCrowdsale;
[L362]                     __tmp__fundingMinCapInWei_EPXCrowdsale := fundingMinCapInWei_EPXCrowdsale;
[L363]                     __tmp__CurrentStatus_EPXCrowdsale := CurrentStatus_EPXCrowdsale;
[L364]                     __tmp__fundingStartBlock_EPXCrowdsale := fundingStartBlock_EPXCrowdsale;
[L365]                     __tmp__fundingEndBlock_EPXCrowdsale := fundingEndBlock_EPXCrowdsale;
[L366]                     __tmp__isCrowdSaleClosed_EPXCrowdsale := isCrowdSaleClosed_EPXCrowdsale;
[L367]                     __tmp__areFundsReleasedToBeneficiary_EPXCrowdsale := areFundsReleasedToBeneficiary_EPXCrowdsale;
[L368]                     __tmp__isCrowdSaleSetup_EPXCrowdsale := isCrowdSaleSetup_EPXCrowdsale;
[L369]                     __tmp__balancesArray_EPXCrowdsale := balancesArray_EPXCrowdsale;
[L370]                     __tmp__usersEPXfundValue_EPXCrowdsale := usersEPXfundValue_EPXCrowdsale;
[L371]         CALL        call EPXCrowdsale_EPXCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L1865]        CALL        call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[L1128]        CALL        call owned_owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1108]                    assume msgsender_MSG != null;
[L1109]                    __tmp__Balance[this] := 0;
[L1110]                    __tmp__owner_owned[this] := null;
[L1111]                    __tmp__owner_owned[this] := msgsender_MSG;
[L1128]        RET         call owned_owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1129]        COND FALSE  !(revert)
[L1865]        RET         call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[L1866]        COND FALSE  !(revert)
[L1871]        CALL        call safeMath_safeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[L1166]        CALL        call safeMath_safeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1150]                    assume msgsender_MSG != null;
[L1151]                    __tmp__Balance[this] := 0;
[L1166]        RET         call safeMath_safeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1167]        COND FALSE  !(revert)
[L1871]        RET         call safeMath_safeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[L1872]        COND FALSE  !(revert)
[L1877]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1767]                    assume msgsender_MSG != null;
[L1768]                    __tmp__Balance[this] := 0;
[L1769]                    __tmp__admin_EPXCrowdsale[this] := null;
[L1770]                    __tmp__initialTokenSupply_EPXCrowdsale[this] := 0;
[L1771]                    __tmp__tokensRemaining_EPXCrowdsale[this] := 0;
[L1772]                    __tmp__beneficiaryWallet_EPXCrowdsale[this] := null;
[L1773]                    __tmp__amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1774]                    __tmp__fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1775]                    __tmp__CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1776]                    __tmp__fundingStartBlock_EPXCrowdsale[this] := 0;
[L1777]                    __tmp__fundingEndBlock_EPXCrowdsale[this] := 0;
[L1778]                    __tmp__isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1779]                    __tmp__areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1780]                    __tmp__isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1781]        CALL        call __var_1 := FreshRefGenerator__fail();
[L1088]                    havoc newRef;
[L1089]                    assume __tmp__Alloc[newRef] == false;
[L1090]                    __tmp__Alloc[newRef] := true;
[L1091]                    assume newRef != null;
[L1781]        RET         call __var_1 := FreshRefGenerator__fail();
[L1782]        COND FALSE  !(revert)
[L1787]                    __tmp__balancesArray_EPXCrowdsale[this] := __var_1;
[L1788]                    __tmp__M_Ref_int_balancesArray0[__tmp__balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1789]                    __tmp__sum_balancesArray0[__tmp__balancesArray_EPXCrowdsale[this]] := 0;
[L1790]        CALL        call __var_2 := FreshRefGenerator__fail();
[L1088]                    havoc newRef;
[L1089]                    assume __tmp__Alloc[newRef] == false;
[L1090]                    __tmp__Alloc[newRef] := true;
[L1091]                    assume newRef != null;
[L1790]        RET         call __var_2 := FreshRefGenerator__fail();
[L1791]        COND FALSE  !(revert)
[L1796]                    __tmp__usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1797]                    __tmp__M_Ref_int_usersEPXfundValue1[__tmp__usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1798]                    __tmp__sum_usersEPXfundValue1[__tmp__usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1799]        CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3655]                    gas := gas - 828;
[L3656]        COND FALSE  !(!(msgsender_MSG == __tmp__owner_owned[this]))
[L1799]        RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L1800]        COND FALSE  !(revert)
[L1805]                    __tmp__admin_EPXCrowdsale[this] := msgsender_MSG;
[L1806]                    __tmp__CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1877]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1878]        COND FALSE  !(revert)
[L371]         RET         call EPXCrowdsale_EPXCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L372]                     assume revert || gas < 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND FALSE  !(choice == 1)
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:12:16,896 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:12:16,896 INFO  L82        PathProgramCache]: Analyzing trace with hash 929465463, now seen corresponding path program 1 times
[2020-05-30 20:12:16,897 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:12:16,910 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:12:16,940 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-30 20:12:16,940 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:12:16,940 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-30 20:12:16,941 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:12:16,941 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 20:12:16,941 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-30 20:12:16,941 INFO  L87              Difference]: Start difference. First operand 11272 states and 16574 transitions. cyclomatic complexity: 5311 Second operand 4 states.
[2020-05-30 20:12:17,285 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:12:17,285 INFO  L93              Difference]: Finished difference Result 12307 states and 18138 transitions.
[2020-05-30 20:12:17,286 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-30 20:12:17,286 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12307 states and 18138 transitions.
[2020-05-30 20:12:17,313 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 20:12:17,347 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12307 states to 11971 states and 17701 transitions.
[2020-05-30 20:12:17,347 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 32
[2020-05-30 20:12:17,347 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 32
[2020-05-30 20:12:17,348 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11971 states and 17701 transitions.
[2020-05-30 20:12:17,356 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:12:17,356 INFO  L728         BuchiCegarLoop]: Abstraction has 11971 states and 17701 transitions.
[2020-05-30 20:12:17,363 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11971 states and 17701 transitions.
[2020-05-30 20:12:17,428 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11971 to 11033.
[2020-05-30 20:12:17,428 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11033 states.
[2020-05-30 20:12:17,443 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11033 states to 11033 states and 16270 transitions.
[2020-05-30 20:12:17,443 INFO  L751         BuchiCegarLoop]: Abstraction has 11033 states and 16270 transitions.
[2020-05-30 20:12:17,443 INFO  L631         BuchiCegarLoop]: Abstraction has 11033 states and 16270 transitions.
[2020-05-30 20:12:17,443 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-05-30 20:12:17,443 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11033 states and 16270 transitions.
[2020-05-30 20:12:17,455 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:12:17,455 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:12:17,455 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:12:17,456 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:12:17,456 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -437875663;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:12:17,459 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:12:17,459 INFO  L82        PathProgramCache]: Analyzing trace with hash -280359696, now seen corresponding path program 1 times
[2020-05-30 20:12:17,460 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:12:17,475 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:12:17,515 INFO  L134       CoverageAnalysis]: Checked inductivity of 59 backedges. 7 proven. 0 refuted. 0 times theorem prover too weak. 52 trivial. 0 not checked.
[2020-05-30 20:12:17,516 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:12:17,516 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-05-30 20:12:17,516 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:12:17,517 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-05-30 20:12:17,517 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-05-30 20:12:17,517 INFO  L87              Difference]: Start difference. First operand 11033 states and 16270 transitions. cyclomatic complexity: 5246 Second operand 5 states.
[2020-05-30 20:12:17,937 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:12:17,937 INFO  L93              Difference]: Finished difference Result 11521 states and 16859 transitions.
[2020-05-30 20:12:17,937 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-30 20:12:17,937 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11521 states and 16859 transitions.
[2020-05-30 20:12:17,963 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:12:17,992 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11521 states to 11521 states and 16859 transitions.
[2020-05-30 20:12:17,992 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 27
[2020-05-30 20:12:17,992 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 27
[2020-05-30 20:12:17,992 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11521 states and 16859 transitions.
[2020-05-30 20:12:17,999 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:12:17,999 INFO  L728         BuchiCegarLoop]: Abstraction has 11521 states and 16859 transitions.
[2020-05-30 20:12:18,006 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11521 states and 16859 transitions.
[2020-05-30 20:12:18,064 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11521 to 11334.
[2020-05-30 20:12:18,064 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11334 states.
[2020-05-30 20:12:18,081 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11334 states to 11334 states and 16605 transitions.
[2020-05-30 20:12:18,081 INFO  L751         BuchiCegarLoop]: Abstraction has 11334 states and 16605 transitions.
[2020-05-30 20:12:18,081 INFO  L631         BuchiCegarLoop]: Abstraction has 11334 states and 16605 transitions.
[2020-05-30 20:12:18,081 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-05-30 20:12:18,081 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11334 states and 16605 transitions.
[2020-05-30 20:12:18,093 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:12:18,093 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:12:18,093 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:12:18,094 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:12:18,094 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1137288944;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1137288944;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:12:18,098 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:12:18,098 INFO  L82        PathProgramCache]: Analyzing trace with hash 452553146, now seen corresponding path program 1 times
[2020-05-30 20:12:18,098 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:12:18,116 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:12:18,234 INFO  L134       CoverageAnalysis]: Checked inductivity of 67 backedges. 30 proven. 7 refuted. 0 times theorem prover too weak. 30 trivial. 0 not checked.
[2020-05-30 20:12:18,234 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:12:18,234 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-05-30 20:12:18,235 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:12:18,235 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 20:12:18,235 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=20, Invalid=90, Unknown=0, NotChecked=0, Total=110
[2020-05-30 20:12:18,235 INFO  L87              Difference]: Start difference. First operand 11334 states and 16605 transitions. cyclomatic complexity: 5280 Second operand 11 states.
[2020-05-30 20:12:26,352 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:12:26,352 INFO  L93              Difference]: Finished difference Result 13087 states and 19345 transitions.
[2020-05-30 20:12:26,353 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-30 20:12:26,353 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 13087 states and 19345 transitions.
[2020-05-30 20:12:26,393 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 20:12:26,435 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 13087 states to 13087 states and 19345 transitions.
[2020-05-30 20:12:26,436 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 49
[2020-05-30 20:12:26,436 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 49
[2020-05-30 20:12:26,436 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 13087 states and 19345 transitions.
[2020-05-30 20:12:26,446 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:12:26,446 INFO  L728         BuchiCegarLoop]: Abstraction has 13087 states and 19345 transitions.
[2020-05-30 20:12:26,453 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 13087 states and 19345 transitions.
[2020-05-30 20:12:26,529 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 13087 to 12963.
[2020-05-30 20:12:26,529 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 12963 states.
[2020-05-30 20:12:26,551 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 12963 states to 12963 states and 19172 transitions.
[2020-05-30 20:12:26,551 INFO  L751         BuchiCegarLoop]: Abstraction has 12963 states and 19172 transitions.
[2020-05-30 20:12:26,551 INFO  L631         BuchiCegarLoop]: Abstraction has 12963 states and 19172 transitions.
[2020-05-30 20:12:26,551 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-05-30 20:12:26,551 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12963 states and 19172 transitions.
[2020-05-30 20:12:26,566 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 20:12:26,566 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:12:26,566 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:12:26,568 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:12:26,568 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -437875663;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND FALSE  !(choice == 1)
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:12:26,572 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:12:26,572 INFO  L82        PathProgramCache]: Analyzing trace with hash 1692635513, now seen corresponding path program 1 times
[2020-05-30 20:12:26,573 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:12:26,593 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:12:26,696 INFO  L134       CoverageAnalysis]: Checked inductivity of 137 backedges. 73 proven. 0 refuted. 0 times theorem prover too weak. 64 trivial. 0 not checked.
[2020-05-30 20:12:26,696 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:12:26,696 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-05-30 20:12:26,696 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:12:26,697 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 20:12:26,697 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-05-30 20:12:26,697 INFO  L87              Difference]: Start difference. First operand 12963 states and 19172 transitions. cyclomatic complexity: 6218 Second operand 11 states.
[2020-05-30 20:12:33,274 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:12:33,274 INFO  L93              Difference]: Finished difference Result 13415 states and 19721 transitions.
[2020-05-30 20:12:33,274 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-30 20:12:33,274 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 13415 states and 19721 transitions.
[2020-05-30 20:12:33,299 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 20:12:33,335 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 13415 states to 13304 states and 19502 transitions.
[2020-05-30 20:12:33,335 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 47
[2020-05-30 20:12:33,335 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 47
[2020-05-30 20:12:33,335 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 13304 states and 19502 transitions.
[2020-05-30 20:12:33,343 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:12:33,344 INFO  L728         BuchiCegarLoop]: Abstraction has 13304 states and 19502 transitions.
[2020-05-30 20:12:33,350 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 13304 states and 19502 transitions.
[2020-05-30 20:12:33,413 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 13304 to 12945.
[2020-05-30 20:12:33,413 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 12945 states.
[2020-05-30 20:12:33,435 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 12945 states to 12945 states and 18959 transitions.
[2020-05-30 20:12:33,435 INFO  L751         BuchiCegarLoop]: Abstraction has 12945 states and 18959 transitions.
[2020-05-30 20:12:33,435 INFO  L631         BuchiCegarLoop]: Abstraction has 12945 states and 18959 transitions.
[2020-05-30 20:12:33,435 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-05-30 20:12:33,435 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12945 states and 18959 transitions.
[2020-05-30 20:12:33,449 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 20:12:33,449 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:12:33,449 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:12:33,451 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:12:33,452 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND TRUE   DType[to] == EPXCrowdsale
[L3111]        CALL        call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L2307]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2308]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2309]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2310]                    gas := gas - 4;
[L2311]        CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND FALSE  !(DType[this] == EPXCrowdsale)
[L1267]        COND TRUE   DType[this] == StandardToken
[L1269]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1269]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1270]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND FALSE  !(DType[this] == EPXCrowdsale)
[L1535]        COND FALSE  !(DType[this] == StandardToken)
[L1543]        COND TRUE   DType[this] == safeMath
[L1545]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1545]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1546]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L2311]        RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2312]        COND FALSE  !(revert)
[L3111]        RET         call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L3112]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1137288944;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND TRUE   DType[to] == EPXCrowdsale
[L3111]        CALL        call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L2307]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2308]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2309]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2310]                    gas := gas - 4;
[L2311]        CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND FALSE  !(DType[this] == EPXCrowdsale)
[L1535]        COND FALSE  !(DType[this] == StandardToken)
[L1543]        COND TRUE   DType[this] == safeMath
[L1545]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1545]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1546]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L2311]        RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2312]        COND FALSE  !(revert)
[L3111]        RET         call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L3112]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:12:33,458 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:12:33,458 INFO  L82        PathProgramCache]: Analyzing trace with hash 396771473, now seen corresponding path program 1 times
[2020-05-30 20:12:33,458 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:12:33,481 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:12:33,592 INFO  L134       CoverageAnalysis]: Checked inductivity of 186 backedges. 21 proven. 18 refuted. 0 times theorem prover too weak. 147 trivial. 0 not checked.
[2020-05-30 20:12:33,592 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:12:33,593 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-05-30 20:12:33,593 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:12:33,593 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-30 20:12:33,594 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-05-30 20:12:33,594 INFO  L87              Difference]: Start difference. First operand 12945 states and 18959 transitions. cyclomatic complexity: 6020 Second operand 7 states.
[2020-05-30 20:12:33,911 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:12:33,912 INFO  L93              Difference]: Finished difference Result 12937 states and 18931 transitions.
[2020-05-30 20:12:33,912 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-05-30 20:12:33,912 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12937 states and 18931 transitions.
[2020-05-30 20:12:33,940 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 20:12:33,976 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12937 states to 12459 states and 18001 transitions.
[2020-05-30 20:12:33,976 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 42
[2020-05-30 20:12:33,976 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 42
[2020-05-30 20:12:33,976 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12459 states and 18001 transitions.
[2020-05-30 20:12:33,986 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:12:33,986 INFO  L728         BuchiCegarLoop]: Abstraction has 12459 states and 18001 transitions.
[2020-05-30 20:12:33,994 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12459 states and 18001 transitions.
[2020-05-30 20:12:34,059 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12459 to 12459.
[2020-05-30 20:12:34,059 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 12459 states.
[2020-05-30 20:12:34,080 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 12459 states to 12459 states and 18001 transitions.
[2020-05-30 20:12:34,080 INFO  L751         BuchiCegarLoop]: Abstraction has 12459 states and 18001 transitions.
[2020-05-30 20:12:34,080 INFO  L631         BuchiCegarLoop]: Abstraction has 12459 states and 18001 transitions.
[2020-05-30 20:12:34,080 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-05-30 20:12:34,080 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12459 states and 18001 transitions.
[2020-05-30 20:12:34,093 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 20:12:34,093 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:12:34,093 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:12:34,095 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:12:34,095 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND FALSE  !(DType[this] == EPXCrowdsale)
[L1645]        COND FALSE  !(DType[this] == StandardToken)
[L1653]        COND TRUE   DType[this] == safeMath
[L1655]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1655]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1656]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND FALSE  !(DType[this] == EPXCrowdsale)
[L1535]        COND TRUE   DType[this] == StandardToken
[L1537]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1537]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1538]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND FALSE  !(DType[this] == EPXCrowdsale)
[L1645]        COND FALSE  !(DType[this] == StandardToken)
[L1653]        COND TRUE   DType[this] == safeMath
[L1655]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1655]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1656]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1137288944;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND TRUE   DType[to] == EPXCrowdsale
[L3111]        CALL        call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L2307]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2308]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2309]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2310]                    gas := gas - 4;
[L2311]        CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND FALSE  !(DType[this] == EPXCrowdsale)
[L1267]        COND TRUE   DType[this] == StandardToken
[L1269]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1269]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1270]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L2311]        RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2312]        COND FALSE  !(revert)
[L3111]        RET         call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L3112]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:12:34,101 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:12:34,101 INFO  L82        PathProgramCache]: Analyzing trace with hash -396862017, now seen corresponding path program 1 times
[2020-05-30 20:12:34,101 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:12:34,120 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:12:34,221 INFO  L134       CoverageAnalysis]: Checked inductivity of 186 backedges. 13 proven. 17 refuted. 0 times theorem prover too weak. 156 trivial. 0 not checked.
[2020-05-30 20:12:34,221 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:12:34,221 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-05-30 20:12:34,221 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:12:34,221 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-30 20:12:34,221 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-05-30 20:12:34,222 INFO  L87              Difference]: Start difference. First operand 12459 states and 18001 transitions. cyclomatic complexity: 5548 Second operand 7 states.
[2020-05-30 20:12:34,568 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:12:34,568 INFO  L93              Difference]: Finished difference Result 12802 states and 18438 transitions.
[2020-05-30 20:12:34,568 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-05-30 20:12:34,569 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12802 states and 18438 transitions.
[2020-05-30 20:12:34,603 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 20:12:34,646 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12802 states to 12451 states and 17953 transitions.
[2020-05-30 20:12:34,646 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 42
[2020-05-30 20:12:34,646 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 42
[2020-05-30 20:12:34,646 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12451 states and 17953 transitions.
[2020-05-30 20:12:34,658 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:12:34,658 INFO  L728         BuchiCegarLoop]: Abstraction has 12451 states and 17953 transitions.
[2020-05-30 20:12:34,667 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12451 states and 17953 transitions.
[2020-05-30 20:12:34,730 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12451 to 12424.
[2020-05-30 20:12:34,731 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 12424 states.
[2020-05-30 20:12:34,748 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 12424 states to 12424 states and 17926 transitions.
[2020-05-30 20:12:34,748 INFO  L751         BuchiCegarLoop]: Abstraction has 12424 states and 17926 transitions.
[2020-05-30 20:12:34,748 INFO  L631         BuchiCegarLoop]: Abstraction has 12424 states and 17926 transitions.
[2020-05-30 20:12:34,748 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-05-30 20:12:34,748 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12424 states and 17926 transitions.
[2020-05-30 20:12:34,760 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 20:12:34,760 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:12:34,760 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:12:34,762 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:12:34,762 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND FALSE  !(DType[this] == EPXCrowdsale)
[L1267]        COND TRUE   DType[this] == StandardToken
[L1269]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1269]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1270]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1137288944;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND FALSE  !(choice == 1)
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:12:34,766 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:12:34,766 INFO  L82        PathProgramCache]: Analyzing trace with hash 373929515, now seen corresponding path program 1 times
[2020-05-30 20:12:34,767 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:12:34,788 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:12:34,886 INFO  L134       CoverageAnalysis]: Checked inductivity of 192 backedges. 13 proven. 7 refuted. 0 times theorem prover too weak. 172 trivial. 0 not checked.
[2020-05-30 20:12:34,886 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:12:34,886 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-05-30 20:12:34,888 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:12:34,888 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-30 20:12:34,888 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-05-30 20:12:34,888 INFO  L87              Difference]: Start difference. First operand 12424 states and 17926 transitions. cyclomatic complexity: 5508 Second operand 7 states.
[2020-05-30 20:12:35,273 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:12:35,273 INFO  L93              Difference]: Finished difference Result 12544 states and 18064 transitions.
[2020-05-30 20:12:35,273 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-30 20:12:35,273 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12544 states and 18064 transitions.
[2020-05-30 20:12:35,298 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 20:12:35,333 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12544 states to 12344 states and 17794 transitions.
[2020-05-30 20:12:35,333 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 42
[2020-05-30 20:12:35,333 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 42
[2020-05-30 20:12:35,333 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12344 states and 17794 transitions.
[2020-05-30 20:12:35,342 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:12:35,342 INFO  L728         BuchiCegarLoop]: Abstraction has 12344 states and 17794 transitions.
[2020-05-30 20:12:35,349 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12344 states and 17794 transitions.
[2020-05-30 20:12:35,413 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12344 to 12344.
[2020-05-30 20:12:35,413 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 12344 states.
[2020-05-30 20:12:35,431 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 12344 states to 12344 states and 17794 transitions.
[2020-05-30 20:12:35,431 INFO  L751         BuchiCegarLoop]: Abstraction has 12344 states and 17794 transitions.
[2020-05-30 20:12:35,431 INFO  L631         BuchiCegarLoop]: Abstraction has 12344 states and 17794 transitions.
[2020-05-30 20:12:35,431 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-05-30 20:12:35,431 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12344 states and 17794 transitions.
[2020-05-30 20:12:35,443 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 20:12:35,443 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:12:35,443 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:12:35,445 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:12:35,445 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND FALSE  !(DType[this] == EPXCrowdsale)
[L1535]        COND TRUE   DType[this] == StandardToken
[L1537]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1537]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1538]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1137288944;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:12:35,449 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:12:35,449 INFO  L82        PathProgramCache]: Analyzing trace with hash -2052473569, now seen corresponding path program 1 times
[2020-05-30 20:12:35,449 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:12:35,467 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:12:35,559 INFO  L134       CoverageAnalysis]: Checked inductivity of 184 backedges. 13 proven. 7 refuted. 0 times theorem prover too weak. 164 trivial. 0 not checked.
[2020-05-30 20:12:35,559 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:12:35,559 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-05-30 20:12:35,559 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:12:35,560 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-30 20:12:35,560 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-05-30 20:12:35,560 INFO  L87              Difference]: Start difference. First operand 12344 states and 17794 transitions. cyclomatic complexity: 5456 Second operand 7 states.
[2020-05-30 20:12:35,743 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:12:35,743 INFO  L93              Difference]: Finished difference Result 12496 states and 17972 transitions.
[2020-05-30 20:12:35,743 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-30 20:12:35,743 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12496 states and 17972 transitions.
[2020-05-30 20:12:35,768 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 20:12:35,801 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12496 states to 12264 states and 17662 transitions.
[2020-05-30 20:12:35,801 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 42
[2020-05-30 20:12:35,801 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 42
[2020-05-30 20:12:35,801 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12264 states and 17662 transitions.
[2020-05-30 20:12:35,810 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:12:35,810 INFO  L728         BuchiCegarLoop]: Abstraction has 12264 states and 17662 transitions.
[2020-05-30 20:12:35,817 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12264 states and 17662 transitions.
[2020-05-30 20:12:35,876 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12264 to 12264.
[2020-05-30 20:12:35,877 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 12264 states.
[2020-05-30 20:12:35,893 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 12264 states to 12264 states and 17662 transitions.
[2020-05-30 20:12:35,893 INFO  L751         BuchiCegarLoop]: Abstraction has 12264 states and 17662 transitions.
[2020-05-30 20:12:35,894 INFO  L631         BuchiCegarLoop]: Abstraction has 12264 states and 17662 transitions.
[2020-05-30 20:12:35,894 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-05-30 20:12:35,894 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12264 states and 17662 transitions.
[2020-05-30 20:12:35,905 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 20:12:35,905 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:12:35,905 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:12:35,907 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:12:35,907 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1137288944;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND TRUE   DType[to] == EPXCrowdsale
[L3111]        CALL        call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L2307]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2308]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2309]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2310]                    gas := gas - 4;
[L2311]        CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L2311]        RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2312]        COND FALSE  !(revert)
[L3111]        RET         call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L3112]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:12:35,912 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:12:35,912 INFO  L82        PathProgramCache]: Analyzing trace with hash 2060019036, now seen corresponding path program 1 times
[2020-05-30 20:12:35,912 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:12:35,957 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:12:36,010 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:12:36,175 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:12:36,175 INFO  L82        PathProgramCache]: Analyzing trace with hash -1233336333, now seen corresponding path program 1 times
[2020-05-30 20:12:36,175 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:12:36,189 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:12:36,230 INFO  L134       CoverageAnalysis]: Checked inductivity of 46 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 46 trivial. 0 not checked.
[2020-05-30 20:12:36,230 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:12:36,230 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-05-30 20:12:36,230 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-05-30 20:12:36,231 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-05-30 20:12:36,231 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=10, Invalid=20, Unknown=0, NotChecked=0, Total=30
[2020-05-30 20:12:36,231 INFO  L87              Difference]: Start difference. First operand 12264 states and 17662 transitions. cyclomatic complexity: 5404 Second operand 6 states.
[2020-05-30 20:12:38,711 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:12:38,711 INFO  L93              Difference]: Finished difference Result 12488 states and 17950 transitions.
[2020-05-30 20:12:38,711 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-05-30 20:12:38,712 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12488 states and 17950 transitions.
[2020-05-30 20:12:38,755 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 20:12:38,797 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12488 states to 12488 states and 17950 transitions.
[2020-05-30 20:12:38,797 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 45
[2020-05-30 20:12:38,797 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 45
[2020-05-30 20:12:38,798 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12488 states and 17950 transitions.
[2020-05-30 20:12:38,807 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:12:38,807 INFO  L728         BuchiCegarLoop]: Abstraction has 12488 states and 17950 transitions.
[2020-05-30 20:12:38,817 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12488 states and 17950 transitions.
[2020-05-30 20:12:38,883 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12488 to 12348.
[2020-05-30 20:12:38,883 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 12348 states.
[2020-05-30 20:12:38,903 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 12348 states to 12348 states and 17754 transitions.
[2020-05-30 20:12:38,904 INFO  L751         BuchiCegarLoop]: Abstraction has 12348 states and 17754 transitions.
[2020-05-30 20:12:38,904 INFO  L631         BuchiCegarLoop]: Abstraction has 12348 states and 17754 transitions.
[2020-05-30 20:12:38,904 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-05-30 20:12:38,904 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12348 states and 17754 transitions.
[2020-05-30 20:12:38,918 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 20:12:38,918 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:12:38,918 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:12:38,920 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:12:38,920 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1137288944;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND TRUE   DType[to] == EPXCrowdsale
[L3111]        CALL        call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L2307]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2308]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2309]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2310]                    gas := gas - 4;
[L2311]        CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L2311]        RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2312]        COND FALSE  !(revert)
[L3111]        RET         call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L3112]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:12:38,926 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:12:38,926 INFO  L82        PathProgramCache]: Analyzing trace with hash 2060019036, now seen corresponding path program 2 times
[2020-05-30 20:12:38,926 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:12:38,956 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:12:38,986 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:12:39,056 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:12:39,056 INFO  L82        PathProgramCache]: Analyzing trace with hash 638769620, now seen corresponding path program 1 times
[2020-05-30 20:12:39,057 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:12:39,066 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:12:39,105 INFO  L134       CoverageAnalysis]: Checked inductivity of 46 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 46 trivial. 0 not checked.
[2020-05-30 20:12:39,105 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:12:39,105 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-05-30 20:12:39,105 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-05-30 20:12:39,105 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-05-30 20:12:39,105 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=22, Invalid=50, Unknown=0, NotChecked=0, Total=72
[2020-05-30 20:12:39,105 INFO  L87              Difference]: Start difference. First operand 12348 states and 17754 transitions. cyclomatic complexity: 5412 Second operand 9 states.
[2020-05-30 20:12:41,631 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:12:41,631 INFO  L93              Difference]: Finished difference Result 13969 states and 20296 transitions.
[2020-05-30 20:12:41,631 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 20:12:41,631 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 13969 states and 20296 transitions.
[2020-05-30 20:12:41,672 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 28
[2020-05-30 20:12:41,717 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 13969 states to 13813 states and 20072 transitions.
[2020-05-30 20:12:41,718 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 52
[2020-05-30 20:12:41,718 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 52
[2020-05-30 20:12:41,718 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 13813 states and 20072 transitions.
[2020-05-30 20:12:41,729 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:12:41,729 INFO  L728         BuchiCegarLoop]: Abstraction has 13813 states and 20072 transitions.
[2020-05-30 20:12:41,737 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 13813 states and 20072 transitions.
[2020-05-30 20:12:41,812 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 13813 to 12348.
[2020-05-30 20:12:41,812 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 12348 states.
[2020-05-30 20:12:41,832 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 12348 states to 12348 states and 17744 transitions.
[2020-05-30 20:12:41,832 INFO  L751         BuchiCegarLoop]: Abstraction has 12348 states and 17744 transitions.
[2020-05-30 20:12:41,832 INFO  L631         BuchiCegarLoop]: Abstraction has 12348 states and 17744 transitions.
[2020-05-30 20:12:41,832 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-05-30 20:12:41,832 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12348 states and 17744 transitions.
[2020-05-30 20:12:41,846 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 20:12:41,847 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:12:41,847 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:12:41,848 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:12:41,848 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1137288944;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:12:41,852 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:12:41,853 INFO  L82        PathProgramCache]: Analyzing trace with hash 2060019036, now seen corresponding path program 3 times
[2020-05-30 20:12:41,853 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:12:41,882 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:12:41,911 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:12:41,975 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:12:41,975 INFO  L82        PathProgramCache]: Analyzing trace with hash -1524506382, now seen corresponding path program 1 times
[2020-05-30 20:12:41,976 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:12:41,981 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:12:41,988 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:12:41,997 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:12:41,997 INFO  L82        PathProgramCache]: Analyzing trace with hash -1777287625, now seen corresponding path program 1 times
[2020-05-30 20:12:41,998 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:12:42,025 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:12:42,510 INFO  L134       CoverageAnalysis]: Checked inductivity of 188 backedges. 59 proven. 54 refuted. 0 times theorem prover too weak. 75 trivial. 0 not checked.
[2020-05-30 20:12:42,511 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:12:42,511 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [35] total 35
[2020-05-30 20:12:42,511 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 36 interpolants.
[2020-05-30 20:12:42,511 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=98, Invalid=1162, Unknown=0, NotChecked=0, Total=1260
[2020-05-30 20:12:42,512 INFO  L87              Difference]: Start difference. First operand 12348 states and 17744 transitions. cyclomatic complexity: 5402 Second operand 36 states.
[2020-05-30 20:13:03,939 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:13:03,939 INFO  L93              Difference]: Finished difference Result 17057 states and 25648 transitions.
[2020-05-30 20:13:03,939 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 49 states. 
[2020-05-30 20:13:03,939 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 17057 states and 25648 transitions.
[2020-05-30 20:13:03,992 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 82
[2020-05-30 20:13:04,059 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 17057 states to 17057 states and 25648 transitions.
[2020-05-30 20:13:04,059 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 142
[2020-05-30 20:13:04,059 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 142
[2020-05-30 20:13:04,059 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 17057 states and 25648 transitions.
[2020-05-30 20:13:04,077 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:13:04,077 INFO  L728         BuchiCegarLoop]: Abstraction has 17057 states and 25648 transitions.
[2020-05-30 20:13:04,085 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 17057 states and 25648 transitions.
[2020-05-30 20:13:04,188 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 17057 to 16755.
[2020-05-30 20:13:04,188 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 16755 states.
[2020-05-30 20:13:04,222 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 16755 states to 16755 states and 24922 transitions.
[2020-05-30 20:13:04,222 INFO  L751         BuchiCegarLoop]: Abstraction has 16755 states and 24922 transitions.
[2020-05-30 20:13:04,222 INFO  L631         BuchiCegarLoop]: Abstraction has 16755 states and 24922 transitions.
[2020-05-30 20:13:04,222 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-05-30 20:13:04,222 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 16755 states and 24922 transitions.
[2020-05-30 20:13:04,240 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 60
[2020-05-30 20:13:04,240 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:13:04,240 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:13:04,243 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:13:04,243 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1137288944;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1137288944;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND TRUE   DType[to] == EPXCrowdsale
[L3111]        CALL        call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L2307]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2308]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2309]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2310]                    gas := gas - 4;
[L2311]        CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L2311]        RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2312]        COND FALSE  !(revert)
[L3111]        RET         call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L3112]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:13:04,251 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:13:04,251 INFO  L82        PathProgramCache]: Analyzing trace with hash -386484151, now seen corresponding path program 1 times
[2020-05-30 20:13:04,251 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:13:04,272 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:13:04,415 INFO  L134       CoverageAnalysis]: Checked inductivity of 315 backedges. 3 proven. 118 refuted. 0 times theorem prover too weak. 194 trivial. 0 not checked.
[2020-05-30 20:13:04,415 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:13:04,415 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-30 20:13:04,415 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:13:04,416 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 20:13:04,416 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-05-30 20:13:04,416 INFO  L87              Difference]: Start difference. First operand 16755 states and 24922 transitions. cyclomatic complexity: 8176 Second operand 11 states.
[2020-05-30 20:13:08,995 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:13:08,995 INFO  L93              Difference]: Finished difference Result 17794 states and 26557 transitions.
[2020-05-30 20:13:08,995 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-05-30 20:13:08,995 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 17794 states and 26557 transitions.
[2020-05-30 20:13:09,039 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 60
[2020-05-30 20:13:09,106 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 17794 states to 17794 states and 26557 transitions.
[2020-05-30 20:13:09,106 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 156
[2020-05-30 20:13:09,106 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 156
[2020-05-30 20:13:09,106 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 17794 states and 26557 transitions.
[2020-05-30 20:13:09,124 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:13:09,124 INFO  L728         BuchiCegarLoop]: Abstraction has 17794 states and 26557 transitions.
[2020-05-30 20:13:09,133 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 17794 states and 26557 transitions.
[2020-05-30 20:13:09,242 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 17794 to 16888.
[2020-05-30 20:13:09,243 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 16888 states.
[2020-05-30 20:13:09,278 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 16888 states to 16888 states and 25130 transitions.
[2020-05-30 20:13:09,279 INFO  L751         BuchiCegarLoop]: Abstraction has 16888 states and 25130 transitions.
[2020-05-30 20:13:09,279 INFO  L631         BuchiCegarLoop]: Abstraction has 16888 states and 25130 transitions.
[2020-05-30 20:13:09,279 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-05-30 20:13:09,279 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 16888 states and 25130 transitions.
[2020-05-30 20:13:09,297 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 60
[2020-05-30 20:13:09,297 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:13:09,297 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:13:09,300 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:13:09,300 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1137288944;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1137288944;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:13:09,307 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:13:09,307 INFO  L82        PathProgramCache]: Analyzing trace with hash 1049320126, now seen corresponding path program 1 times
[2020-05-30 20:13:09,307 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:13:09,330 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:13:09,463 INFO  L134       CoverageAnalysis]: Checked inductivity of 307 backedges. 36 proven. 106 refuted. 0 times theorem prover too weak. 165 trivial. 0 not checked.
[2020-05-30 20:13:09,463 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:13:09,463 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-30 20:13:09,464 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:13:09,464 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 20:13:09,464 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-05-30 20:13:09,464 INFO  L87              Difference]: Start difference. First operand 16888 states and 25130 transitions. cyclomatic complexity: 8251 Second operand 11 states.
[2020-05-30 20:13:15,321 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:13:15,321 INFO  L93              Difference]: Finished difference Result 22459 states and 33933 transitions.
[2020-05-30 20:13:15,321 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 20:13:15,322 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 22459 states and 33933 transitions.
[2020-05-30 20:13:15,394 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 96
[2020-05-30 20:13:15,496 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 22459 states to 22459 states and 33933 transitions.
[2020-05-30 20:13:15,496 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 235
[2020-05-30 20:13:15,496 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 235
[2020-05-30 20:13:15,496 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 22459 states and 33933 transitions.
[2020-05-30 20:13:15,521 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:13:15,521 INFO  L728         BuchiCegarLoop]: Abstraction has 22459 states and 33933 transitions.
[2020-05-30 20:13:15,532 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 22459 states and 33933 transitions.
[2020-05-30 20:13:15,681 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 22459 to 21841.
[2020-05-30 20:13:15,681 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21841 states.
[2020-05-30 20:13:15,735 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21841 states to 21841 states and 32969 transitions.
[2020-05-30 20:13:15,735 INFO  L751         BuchiCegarLoop]: Abstraction has 21841 states and 32969 transitions.
[2020-05-30 20:13:15,735 INFO  L631         BuchiCegarLoop]: Abstraction has 21841 states and 32969 transitions.
[2020-05-30 20:13:15,735 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-05-30 20:13:15,735 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21841 states and 32969 transitions.
[2020-05-30 20:13:15,760 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 96
[2020-05-30 20:13:15,760 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:13:15,760 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:13:15,762 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:13:15,763 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -437875663;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1137288944;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:13:15,768 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:13:15,768 INFO  L82        PathProgramCache]: Analyzing trace with hash 945195076, now seen corresponding path program 1 times
[2020-05-30 20:13:15,769 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:13:15,796 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:13:15,989 INFO  L134       CoverageAnalysis]: Checked inductivity of 756 backedges. 99 proven. 164 refuted. 0 times theorem prover too weak. 493 trivial. 0 not checked.
[2020-05-30 20:13:15,989 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:13:15,989 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-30 20:13:15,990 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:13:15,990 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 20:13:15,990 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-05-30 20:13:15,990 INFO  L87              Difference]: Start difference. First operand 21841 states and 32969 transitions. cyclomatic complexity: 11137 Second operand 11 states.
[2020-05-30 20:13:22,369 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:13:22,369 INFO  L93              Difference]: Finished difference Result 27703 states and 42652 transitions.
[2020-05-30 20:13:22,369 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 20:13:22,370 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 27703 states and 42652 transitions.
[2020-05-30 20:13:22,471 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 136
[2020-05-30 20:13:22,608 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 27703 states to 27703 states and 42652 transitions.
[2020-05-30 20:13:22,609 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 337
[2020-05-30 20:13:22,609 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 337
[2020-05-30 20:13:22,609 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 27703 states and 42652 transitions.
[2020-05-30 20:13:22,643 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:13:22,643 INFO  L728         BuchiCegarLoop]: Abstraction has 27703 states and 42652 transitions.
[2020-05-30 20:13:22,657 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 27703 states and 42652 transitions.
[2020-05-30 20:13:22,845 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 27703 to 26617.
[2020-05-30 20:13:22,846 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 26617 states.
[2020-05-30 20:13:22,915 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 26617 states to 26617 states and 41018 transitions.
[2020-05-30 20:13:22,915 INFO  L751         BuchiCegarLoop]: Abstraction has 26617 states and 41018 transitions.
[2020-05-30 20:13:22,915 INFO  L631         BuchiCegarLoop]: Abstraction has 26617 states and 41018 transitions.
[2020-05-30 20:13:22,915 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-05-30 20:13:22,915 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 26617 states and 41018 transitions.
[2020-05-30 20:13:22,950 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 136
[2020-05-30 20:13:22,950 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:13:22,950 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:13:22,954 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:13:22,954 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1137288944;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND TRUE   DType[to] == EPXCrowdsale
[L3111]        CALL        call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L2307]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2308]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2309]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2310]                    gas := gas - 4;
[L2311]        CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L2311]        RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2312]        COND FALSE  !(revert)
[L3111]        RET         call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L3112]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1137288944;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:13:22,962 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:13:22,963 INFO  L82        PathProgramCache]: Analyzing trace with hash 815784130, now seen corresponding path program 1 times
[2020-05-30 20:13:22,963 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:13:22,993 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:13:23,159 INFO  L134       CoverageAnalysis]: Checked inductivity of 617 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 592 trivial. 0 not checked.
[2020-05-30 20:13:23,159 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:13:23,159 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-05-30 20:13:23,160 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:13:23,160 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-05-30 20:13:23,160 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=10, Invalid=20, Unknown=0, NotChecked=0, Total=30
[2020-05-30 20:13:23,160 INFO  L87              Difference]: Start difference. First operand 26617 states and 41018 transitions. cyclomatic complexity: 14410 Second operand 6 states.
[2020-05-30 20:13:23,808 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:13:23,808 INFO  L93              Difference]: Finished difference Result 27237 states and 41924 transitions.
[2020-05-30 20:13:23,808 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-05-30 20:13:23,808 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 27237 states and 41924 transitions.
[2020-05-30 20:13:23,890 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 136
[2020-05-30 20:13:24,023 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 27237 states to 27237 states and 41924 transitions.
[2020-05-30 20:13:24,023 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 331
[2020-05-30 20:13:24,024 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 331
[2020-05-30 20:13:24,024 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 27237 states and 41924 transitions.
[2020-05-30 20:13:24,057 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:13:24,057 INFO  L728         BuchiCegarLoop]: Abstraction has 27237 states and 41924 transitions.
[2020-05-30 20:13:24,069 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 27237 states and 41924 transitions.
[2020-05-30 20:13:24,255 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 27237 to 27030.
[2020-05-30 20:13:24,255 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 27030 states.
[2020-05-30 20:13:24,325 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 27030 states to 27030 states and 41486 transitions.
[2020-05-30 20:13:24,325 INFO  L751         BuchiCegarLoop]: Abstraction has 27030 states and 41486 transitions.
[2020-05-30 20:13:24,325 INFO  L631         BuchiCegarLoop]: Abstraction has 27030 states and 41486 transitions.
[2020-05-30 20:13:24,325 INFO  L445         BuchiCegarLoop]: ======== Iteration 25============
[2020-05-30 20:13:24,325 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 27030 states and 41486 transitions.
[2020-05-30 20:13:24,358 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 136
[2020-05-30 20:13:24,359 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:13:24,359 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:13:24,362 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:13:24,362 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -1702767056;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0)
[L2913]                    gas := gas - 876;
[L2914]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2915]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2916]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2917]                    assume now >= 0;
[L2918]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2919-L2921]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0 && now <= fundingEndBlock_EPXCrowdsale[this]
[L2923]                    gas := gas - 20317;
[L2924]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2925]                    gas := gas - 20267;
[L2926]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2927]                    gas := gas - 409;
[L2928]                    CurrentStatus_EPXCrowdsale[this] := -1388231396;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0)
[L2913]                    gas := gas - 876;
[L2914]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2915]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2916]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2917]                    assume now >= 0;
[L2918]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2919-L2921]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0 && now <= fundingEndBlock_EPXCrowdsale[this]
[L2923]                    gas := gas - 20317;
[L2924]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2925]                    gas := gas - 20267;
[L2926]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2927]                    gas := gas - 409;
[L2928]                    CurrentStatus_EPXCrowdsale[this] := -1388231396;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:13:24,369 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:13:24,369 INFO  L82        PathProgramCache]: Analyzing trace with hash 506404856, now seen corresponding path program 1 times
[2020-05-30 20:13:24,369 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:13:24,400 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:13:24,569 INFO  L134       CoverageAnalysis]: Checked inductivity of 362 backedges. 28 proven. 0 refuted. 0 times theorem prover too weak. 334 trivial. 0 not checked.
[2020-05-30 20:13:24,569 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:13:24,569 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-05-30 20:13:24,570 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:13:24,570 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-30 20:13:24,570 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=20, Invalid=70, Unknown=0, NotChecked=0, Total=90
[2020-05-30 20:13:24,570 INFO  L87              Difference]: Start difference. First operand 27030 states and 41486 transitions. cyclomatic complexity: 14465 Second operand 10 states.
[2020-05-30 20:13:29,013 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:13:29,013 INFO  L93              Difference]: Finished difference Result 22553 states and 31174 transitions.
[2020-05-30 20:13:29,013 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-05-30 20:13:29,013 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 22553 states and 31174 transitions.
[2020-05-30 20:13:29,085 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 84
[2020-05-30 20:13:29,179 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 22553 states to 22474 states and 31021 transitions.
[2020-05-30 20:13:29,179 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 103
[2020-05-30 20:13:29,179 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 103
[2020-05-30 20:13:29,179 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 22474 states and 31021 transitions.
[2020-05-30 20:13:29,202 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:13:29,202 INFO  L728         BuchiCegarLoop]: Abstraction has 22474 states and 31021 transitions.
[2020-05-30 20:13:29,213 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 22474 states and 31021 transitions.
[2020-05-30 20:13:29,358 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 22474 to 21825.
[2020-05-30 20:13:29,358 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21825 states.
[2020-05-30 20:13:29,405 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21825 states to 21825 states and 30001 transitions.
[2020-05-30 20:13:29,405 INFO  L751         BuchiCegarLoop]: Abstraction has 21825 states and 30001 transitions.
[2020-05-30 20:13:29,405 INFO  L631         BuchiCegarLoop]: Abstraction has 21825 states and 30001 transitions.
[2020-05-30 20:13:29,405 INFO  L445         BuchiCegarLoop]: ======== Iteration 26============
[2020-05-30 20:13:29,405 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21825 states and 30001 transitions.
[2020-05-30 20:13:29,438 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 84
[2020-05-30 20:13:29,438 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:13:29,438 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:13:29,443 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:13:29,443 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -1702767056;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0)
[L2913]                    gas := gas - 876;
[L2914]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2915]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2916]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2917]                    assume now >= 0;
[L2918]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2919-L2921]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0 && now <= fundingEndBlock_EPXCrowdsale[this]
[L2923]                    gas := gas - 20317;
[L2924]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2925]                    gas := gas - 20267;
[L2926]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2927]                    gas := gas - 409;
[L2928]                    CurrentStatus_EPXCrowdsale[this] := -1388231396;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0)
[L2913]                    gas := gas - 876;
[L2914]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2915]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2916]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2917]                    assume now >= 0;
[L2918]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2919-L2921]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0 && now <= fundingEndBlock_EPXCrowdsale[this]
[L2923]                    gas := gas - 20317;
[L2924]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2925]                    gas := gas - 20267;
[L2926]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2927]                    gas := gas - 409;
[L2928]                    CurrentStatus_EPXCrowdsale[this] := -1388231396;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:13:29,451 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:13:29,451 INFO  L82        PathProgramCache]: Analyzing trace with hash -918111009, now seen corresponding path program 1 times
[2020-05-30 20:13:29,452 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:13:29,516 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:13:29,746 INFO  L134       CoverageAnalysis]: Checked inductivity of 529 backedges. 10 proven. 258 refuted. 0 times theorem prover too weak. 261 trivial. 0 not checked.
[2020-05-30 20:13:29,746 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:13:29,747 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 20:13:29,747 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:13:29,747 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 20:13:29,747 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=107, Unknown=0, NotChecked=0, Total=132
[2020-05-30 20:13:29,748 INFO  L87              Difference]: Start difference. First operand 21825 states and 30001 transitions. cyclomatic complexity: 8189 Second operand 12 states.
[2020-05-30 20:13:32,611 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:13:32,612 INFO  L93              Difference]: Finished difference Result 22405 states and 30865 transitions.
[2020-05-30 20:13:32,612 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-05-30 20:13:32,612 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 22405 states and 30865 transitions.
[2020-05-30 20:13:32,678 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 84
[2020-05-30 20:13:32,770 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 22405 states to 22383 states and 30823 transitions.
[2020-05-30 20:13:32,770 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 119
[2020-05-30 20:13:32,770 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 119
[2020-05-30 20:13:32,770 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 22383 states and 30823 transitions.
[2020-05-30 20:13:32,792 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:13:32,792 INFO  L728         BuchiCegarLoop]: Abstraction has 22383 states and 30823 transitions.
[2020-05-30 20:13:32,803 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 22383 states and 30823 transitions.
[2020-05-30 20:13:32,936 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 22383 to 21848.
[2020-05-30 20:13:32,936 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21848 states.
[2020-05-30 20:13:32,983 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21848 states to 21848 states and 30036 transitions.
[2020-05-30 20:13:32,983 INFO  L751         BuchiCegarLoop]: Abstraction has 21848 states and 30036 transitions.
[2020-05-30 20:13:32,983 INFO  L631         BuchiCegarLoop]: Abstraction has 21848 states and 30036 transitions.
[2020-05-30 20:13:32,983 INFO  L445         BuchiCegarLoop]: ======== Iteration 27============
[2020-05-30 20:13:32,983 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21848 states and 30036 transitions.
[2020-05-30 20:13:33,005 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 84
[2020-05-30 20:13:33,005 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:13:33,005 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:13:33,008 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:13:33,008 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -437875663;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1137288944;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1137288944;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:13:33,014 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:13:33,014 INFO  L82        PathProgramCache]: Analyzing trace with hash 206420421, now seen corresponding path program 1 times
[2020-05-30 20:13:33,015 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:13:33,055 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:13:33,103 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:13:33,190 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:13:33,190 INFO  L82        PathProgramCache]: Analyzing trace with hash 34345638, now seen corresponding path program 1 times
[2020-05-30 20:13:33,191 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:13:33,215 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:13:33,411 INFO  L134       CoverageAnalysis]: Checked inductivity of 587 backedges. 44 proven. 73 refuted. 0 times theorem prover too weak. 470 trivial. 0 not checked.
[2020-05-30 20:13:33,411 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:13:33,411 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-05-30 20:13:33,412 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-05-30 20:13:33,412 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-30 20:13:33,412 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-30 20:13:33,412 INFO  L87              Difference]: Start difference. First operand 21848 states and 30036 transitions. cyclomatic complexity: 8203 Second operand 8 states.
[2020-05-30 20:13:38,391 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:13:38,392 INFO  L93              Difference]: Finished difference Result 59089 states and 80123 transitions.
[2020-05-30 20:13:38,392 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-30 20:13:38,392 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 59089 states and 80123 transitions.
[2020-05-30 20:13:38,587 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 192
[2020-05-30 20:13:38,864 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 59089 states to 58391 states and 79302 transitions.
[2020-05-30 20:13:38,864 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 217
[2020-05-30 20:13:38,864 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 217
[2020-05-30 20:13:38,864 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 58391 states and 79302 transitions.
[2020-05-30 20:13:38,922 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:13:38,922 INFO  L728         BuchiCegarLoop]: Abstraction has 58391 states and 79302 transitions.
[2020-05-30 20:13:38,950 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 58391 states and 79302 transitions.
[2020-05-30 20:13:39,380 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 58391 to 58008.
[2020-05-30 20:13:39,381 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 58008 states.
[2020-05-30 20:13:39,513 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 58008 states to 58008 states and 78687 transitions.
[2020-05-30 20:13:39,513 INFO  L751         BuchiCegarLoop]: Abstraction has 58008 states and 78687 transitions.
[2020-05-30 20:13:39,513 INFO  L631         BuchiCegarLoop]: Abstraction has 58008 states and 78687 transitions.
[2020-05-30 20:13:39,513 INFO  L445         BuchiCegarLoop]: ======== Iteration 28============
[2020-05-30 20:13:39,513 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 58008 states and 78687 transitions.
[2020-05-30 20:13:39,582 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 192
[2020-05-30 20:13:39,582 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:13:39,582 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:13:39,586 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:13:39,586 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0)
[L2913]                    gas := gas - 876;
[L2914]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2915]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2916]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2917]                    assume now >= 0;
[L2918]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2919-L2921]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0 && now <= fundingEndBlock_EPXCrowdsale[this]
[L2923]                    gas := gas - 20317;
[L2924]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2925]                    gas := gas - 20267;
[L2926]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2927]                    gas := gas - 409;
[L2928]                    CurrentStatus_EPXCrowdsale[this] := -1388231396;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0)
[L2913]                    gas := gas - 876;
[L2914]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2915]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2916]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2917]                    assume now >= 0;
[L2918]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2919-L2921]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0 && now <= fundingEndBlock_EPXCrowdsale[this]
[L2923]                    gas := gas - 20317;
[L2924]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2925]                    gas := gas - 20267;
[L2926]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2927]                    gas := gas - 409;
[L2928]                    CurrentStatus_EPXCrowdsale[this] := -1388231396;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND TRUE   DType[to] == EPXCrowdsale
[L3111]        CALL        call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L2307]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2308]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2309]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2310]                    gas := gas - 4;
[L2311]        CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L2311]        RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2312]        COND FALSE  !(revert)
[L3111]        RET         call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L3112]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:13:39,595 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:13:39,595 INFO  L82        PathProgramCache]: Analyzing trace with hash 913177319, now seen corresponding path program 1 times
[2020-05-30 20:13:39,596 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:13:39,629 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:13:39,814 INFO  L134       CoverageAnalysis]: Checked inductivity of 299 backedges. 67 proven. 43 refuted. 0 times theorem prover too weak. 189 trivial. 0 not checked.
[2020-05-30 20:13:39,814 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:13:39,815 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-30 20:13:39,815 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:13:39,815 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 20:13:39,815 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=22, Invalid=110, Unknown=0, NotChecked=0, Total=132
[2020-05-30 20:13:39,815 INFO  L87              Difference]: Start difference. First operand 58008 states and 78687 transitions. cyclomatic complexity: 20712 Second operand 12 states.
[2020-05-30 20:13:46,208 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:13:46,208 INFO  L93              Difference]: Finished difference Result 71080 states and 96364 transitions.
[2020-05-30 20:13:46,208 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-05-30 20:13:46,208 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 71080 states and 96364 transitions.
[2020-05-30 20:13:46,457 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 270
[2020-05-30 20:13:46,826 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 71080 states to 70729 states and 95968 transitions.
[2020-05-30 20:13:46,826 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 229
[2020-05-30 20:13:46,827 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 229
[2020-05-30 20:13:46,827 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 70729 states and 95968 transitions.
[2020-05-30 20:13:46,904 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:13:46,904 INFO  L728         BuchiCegarLoop]: Abstraction has 70729 states and 95968 transitions.
[2020-05-30 20:13:46,940 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 70729 states and 95968 transitions.
[2020-05-30 20:13:47,470 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 70729 to 69400.
[2020-05-30 20:13:47,470 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 69400 states.
[2020-05-30 20:13:47,643 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 69400 states to 69400 states and 94313 transitions.
[2020-05-30 20:13:47,643 INFO  L751         BuchiCegarLoop]: Abstraction has 69400 states and 94313 transitions.
[2020-05-30 20:13:47,643 INFO  L631         BuchiCegarLoop]: Abstraction has 69400 states and 94313 transitions.
[2020-05-30 20:13:47,643 INFO  L445         BuchiCegarLoop]: ======== Iteration 29============
[2020-05-30 20:13:47,643 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 69400 states and 94313 transitions.
[2020-05-30 20:13:47,730 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 270
[2020-05-30 20:13:47,730 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:13:47,730 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:13:47,734 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:13:47,735 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -1702767056;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1137288944;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND TRUE   DType[to] == EPXCrowdsale
[L3111]        CALL        call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L2307]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2308]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2309]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2310]                    gas := gas - 4;
[L2311]        CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L2311]        RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2312]        COND FALSE  !(revert)
[L3111]        RET         call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L3112]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1137288944;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND TRUE   DType[to] == EPXCrowdsale
[L3111]        CALL        call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L2307]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2308]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2309]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2310]                    gas := gas - 4;
[L2311]        CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L2311]        RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2312]        COND FALSE  !(revert)
[L3111]        RET         call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L3112]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:13:47,744 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:13:47,744 INFO  L82        PathProgramCache]: Analyzing trace with hash 1206050617, now seen corresponding path program 1 times
[2020-05-30 20:13:47,745 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:13:47,783 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:13:48,907 INFO  L134       CoverageAnalysis]: Checked inductivity of 503 backedges. 63 proven. 27 refuted. 0 times theorem prover too weak. 413 trivial. 0 not checked.
[2020-05-30 20:13:48,908 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:13:48,908 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-05-30 20:13:48,908 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:13:48,908 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-05-30 20:13:48,908 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=155, Unknown=0, NotChecked=0, Total=182
[2020-05-30 20:13:48,909 INFO  L87              Difference]: Start difference. First operand 69400 states and 94313 transitions. cyclomatic complexity: 24946 Second operand 14 states.
[2020-05-30 20:13:55,189 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:13:55,190 INFO  L93              Difference]: Finished difference Result 86489 states and 117024 transitions.
[2020-05-30 20:13:55,190 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-30 20:13:55,190 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 86489 states and 117024 transitions.
[2020-05-30 20:13:55,515 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 380
[2020-05-30 20:13:55,985 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 86489 states to 86147 states and 116637 transitions.
[2020-05-30 20:13:55,985 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 235
[2020-05-30 20:13:55,986 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 235
[2020-05-30 20:13:55,986 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 86147 states and 116637 transitions.
[2020-05-30 20:13:56,078 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:13:56,078 INFO  L728         BuchiCegarLoop]: Abstraction has 86147 states and 116637 transitions.
[2020-05-30 20:13:56,117 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 86147 states and 116637 transitions.
[2020-05-30 20:13:56,784 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 86147 to 85047.
[2020-05-30 20:13:56,784 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 85047 states.
[2020-05-30 20:13:56,999 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 85047 states to 85047 states and 115293 transitions.
[2020-05-30 20:13:56,999 INFO  L751         BuchiCegarLoop]: Abstraction has 85047 states and 115293 transitions.
[2020-05-30 20:13:56,999 INFO  L631         BuchiCegarLoop]: Abstraction has 85047 states and 115293 transitions.
[2020-05-30 20:13:57,000 INFO  L445         BuchiCegarLoop]: ======== Iteration 30============
[2020-05-30 20:13:57,000 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 85047 states and 115293 transitions.
[2020-05-30 20:13:57,104 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 380
[2020-05-30 20:13:57,104 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:13:57,104 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:13:57,107 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:13:57,108 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -437875663;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1137288944;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND TRUE   DType[to] == safeMath
[L3123]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1137288944;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND TRUE   DType[to] == safeMath
[L3123]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:13:57,132 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:13:57,132 INFO  L82        PathProgramCache]: Analyzing trace with hash -1716068738, now seen corresponding path program 1 times
[2020-05-30 20:13:57,133 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:13:57,172 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:13:57,676 INFO  L134       CoverageAnalysis]: Checked inductivity of 350 backedges. 24 proven. 34 refuted. 0 times theorem prover too weak. 292 trivial. 0 not checked.
[2020-05-30 20:13:57,676 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:13:57,676 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [27] total 27
[2020-05-30 20:13:57,677 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:13:57,677 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 28 interpolants.
[2020-05-30 20:13:57,678 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=80, Invalid=676, Unknown=0, NotChecked=0, Total=756
[2020-05-30 20:13:57,678 INFO  L87              Difference]: Start difference. First operand 85047 states and 115293 transitions. cyclomatic complexity: 30282 Second operand 28 states.
[2020-05-30 20:14:23,595 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:14:23,595 INFO  L93              Difference]: Finished difference Result 116954 states and 158719 transitions.
[2020-05-30 20:14:23,595 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 63 states. 
[2020-05-30 20:14:23,595 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 116954 states and 158719 transitions.
[2020-05-30 20:14:24,050 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 380
[2020-05-30 20:14:24,969 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 116954 states to 116014 states and 157496 transitions.
[2020-05-30 20:14:24,970 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 252
[2020-05-30 20:14:24,970 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 252
[2020-05-30 20:14:24,970 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 116014 states and 157496 transitions.
[2020-05-30 20:14:25,094 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:14:25,094 INFO  L728         BuchiCegarLoop]: Abstraction has 116014 states and 157496 transitions.
[2020-05-30 20:14:25,140 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 116014 states and 157496 transitions.
[2020-05-30 20:14:26,025 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 116014 to 108971.
[2020-05-30 20:14:26,026 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 108971 states.
[2020-05-30 20:14:26,329 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 108971 states to 108971 states and 148218 transitions.
[2020-05-30 20:14:26,329 INFO  L751         BuchiCegarLoop]: Abstraction has 108971 states and 148218 transitions.
[2020-05-30 20:14:26,329 INFO  L631         BuchiCegarLoop]: Abstraction has 108971 states and 148218 transitions.
[2020-05-30 20:14:26,329 INFO  L445         BuchiCegarLoop]: ======== Iteration 31============
[2020-05-30 20:14:26,329 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 108971 states and 148218 transitions.
[2020-05-30 20:14:26,482 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 380
[2020-05-30 20:14:26,482 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:14:26,482 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:14:26,487 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:14:26,487 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -437875663;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1137288944;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND TRUE   DType[to] == safeMath
[L3123]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND TRUE   DType[to] == safeMath
[L3123]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND TRUE   DType[to] == safeMath
[L3123]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1137288944;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:14:26,507 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:14:26,507 INFO  L82        PathProgramCache]: Analyzing trace with hash -235792578, now seen corresponding path program 1 times
[2020-05-30 20:14:26,508 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:14:26,545 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:14:26,749 INFO  L134       CoverageAnalysis]: Checked inductivity of 447 backedges. 6 proven. 20 refuted. 0 times theorem prover too weak. 421 trivial. 0 not checked.
[2020-05-30 20:14:26,749 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:14:26,749 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-05-30 20:14:26,749 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:14:26,749 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-30 20:14:26,750 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-30 20:14:26,750 INFO  L87              Difference]: Start difference. First operand 108971 states and 148218 transitions. cyclomatic complexity: 39297 Second operand 8 states.
[2020-05-30 20:14:33,871 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:14:33,871 INFO  L93              Difference]: Finished difference Result 140897 states and 191135 transitions.
[2020-05-30 20:14:33,871 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-30 20:14:33,872 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 140897 states and 191135 transitions.
[2020-05-30 20:14:35,420 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 540
[2020-05-30 20:14:36,130 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 140897 states to 140861 states and 191090 transitions.
[2020-05-30 20:14:36,130 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 329
[2020-05-30 20:14:36,131 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 329
[2020-05-30 20:14:36,131 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 140861 states and 191090 transitions.
[2020-05-30 20:14:36,270 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:14:36,270 INFO  L728         BuchiCegarLoop]: Abstraction has 140861 states and 191090 transitions.
[2020-05-30 20:14:36,324 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 140861 states and 191090 transitions.
[2020-05-30 20:14:37,425 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 140861 to 140673.
[2020-05-30 20:14:37,425 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 140673 states.
[2020-05-30 20:14:37,809 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 140673 states to 140673 states and 190798 transitions.
[2020-05-30 20:14:37,810 INFO  L751         BuchiCegarLoop]: Abstraction has 140673 states and 190798 transitions.
[2020-05-30 20:14:37,810 INFO  L631         BuchiCegarLoop]: Abstraction has 140673 states and 190798 transitions.
[2020-05-30 20:14:37,810 INFO  L445         BuchiCegarLoop]: ======== Iteration 32============
[2020-05-30 20:14:37,810 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 140673 states and 190798 transitions.
[2020-05-30 20:14:37,992 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 540
[2020-05-30 20:14:37,992 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:14:37,992 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:14:37,996 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:14:37,996 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1137288944;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND TRUE   DType[to] == owned
[L3127]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND TRUE   DType[to] == owned
[L3127]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1137288944;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:14:38,020 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:14:38,020 INFO  L82        PathProgramCache]: Analyzing trace with hash -60320785, now seen corresponding path program 1 times
[2020-05-30 20:14:38,021 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:14:38,059 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:14:38,097 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:14:38,168 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:14:38,169 INFO  L82        PathProgramCache]: Analyzing trace with hash 566188504, now seen corresponding path program 1 times
[2020-05-30 20:14:38,169 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:14:38,197 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:14:38,379 INFO  L134       CoverageAnalysis]: Checked inductivity of 876 backedges. 81 proven. 44 refuted. 0 times theorem prover too weak. 751 trivial. 0 not checked.
[2020-05-30 20:14:38,379 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:14:38,379 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-05-30 20:14:38,380 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-05-30 20:14:38,380 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-30 20:14:38,380 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-30 20:14:38,380 INFO  L87              Difference]: Start difference. First operand 140673 states and 190798 transitions. cyclomatic complexity: 50180 Second operand 8 states.
[2020-05-30 20:14:41,413 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:14:41,413 INFO  L93              Difference]: Finished difference Result 163611 states and 219940 transitions.
[2020-05-30 20:14:41,413 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-30 20:14:41,413 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 163611 states and 219940 transitions.
[2020-05-30 20:14:42,022 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 608
[2020-05-30 20:14:42,946 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 163611 states to 163587 states and 219910 transitions.
[2020-05-30 20:14:42,947 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 344
[2020-05-30 20:14:42,947 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 344
[2020-05-30 20:14:42,948 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 163587 states and 219910 transitions.
[2020-05-30 20:14:43,123 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:14:43,123 INFO  L728         BuchiCegarLoop]: Abstraction has 163587 states and 219910 transitions.
[2020-05-30 20:14:43,200 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 163587 states and 219910 transitions.
[2020-05-30 20:14:44,519 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 163587 to 162683.
[2020-05-30 20:14:44,520 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 162683 states.
[2020-05-30 20:14:44,955 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 162683 states to 162683 states and 218750 transitions.
[2020-05-30 20:14:44,955 INFO  L751         BuchiCegarLoop]: Abstraction has 162683 states and 218750 transitions.
[2020-05-30 20:14:44,955 INFO  L631         BuchiCegarLoop]: Abstraction has 162683 states and 218750 transitions.
[2020-05-30 20:14:44,955 INFO  L445         BuchiCegarLoop]: ======== Iteration 33============
[2020-05-30 20:14:44,955 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 162683 states and 218750 transitions.
[2020-05-30 20:14:45,165 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 608
[2020-05-30 20:14:45,166 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:14:45,166 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:14:45,168 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:14:45,168 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -437875663;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1137288944;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:14:45,172 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:14:45,173 INFO  L82        PathProgramCache]: Analyzing trace with hash -1003791800, now seen corresponding path program 1 times
[2020-05-30 20:14:45,173 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:14:45,215 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:14:45,260 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:14:45,352 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:14:45,352 INFO  L82        PathProgramCache]: Analyzing trace with hash 1029903575, now seen corresponding path program 1 times
[2020-05-30 20:14:45,353 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:14:45,359 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:14:45,366 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:14:45,373 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:14:45,373 INFO  L82        PathProgramCache]: Analyzing trace with hash -175269328, now seen corresponding path program 1 times
[2020-05-30 20:14:45,374 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:14:45,420 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:14:46,395 INFO  L134       CoverageAnalysis]: Checked inductivity of 479 backedges. 28 proven. 87 refuted. 0 times theorem prover too weak. 364 trivial. 0 not checked.
[2020-05-30 20:14:46,395 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:14:46,395 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [42] total 42
[2020-05-30 20:14:46,395 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 43 interpolants.
[2020-05-30 20:14:46,396 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=141, Invalid=1665, Unknown=0, NotChecked=0, Total=1806
[2020-05-30 20:14:46,396 INFO  L87              Difference]: Start difference. First operand 162683 states and 218750 transitions. cyclomatic complexity: 56126 Second operand 43 states.
[2020-05-30 20:15:23,095 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:15:23,095 INFO  L93              Difference]: Finished difference Result 168685 states and 227353 transitions.
[2020-05-30 20:15:23,095 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 75 states. 
[2020-05-30 20:15:23,095 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 168685 states and 227353 transitions.
[2020-05-30 20:15:23,765 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 608
[2020-05-30 20:15:24,806 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 168685 states to 168685 states and 227353 transitions.
[2020-05-30 20:15:24,806 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 344
[2020-05-30 20:15:24,807 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 344
[2020-05-30 20:15:24,807 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 168685 states and 227353 transitions.
[2020-05-30 20:15:24,991 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:15:24,991 INFO  L728         BuchiCegarLoop]: Abstraction has 168685 states and 227353 transitions.
[2020-05-30 20:15:25,067 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 168685 states and 227353 transitions.
[2020-05-30 20:15:26,608 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 168685 to 162906.
[2020-05-30 20:15:26,608 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 162906 states.
[2020-05-30 20:15:27,043 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 162906 states to 162906 states and 219248 transitions.
[2020-05-30 20:15:27,043 INFO  L751         BuchiCegarLoop]: Abstraction has 162906 states and 219248 transitions.
[2020-05-30 20:15:27,043 INFO  L631         BuchiCegarLoop]: Abstraction has 162906 states and 219248 transitions.
[2020-05-30 20:15:27,043 INFO  L445         BuchiCegarLoop]: ======== Iteration 34============
[2020-05-30 20:15:27,043 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 162906 states and 219248 transitions.
[2020-05-30 20:15:27,253 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 608
[2020-05-30 20:15:27,253 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:15:27,253 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:15:27,258 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:15:27,258 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -1702767056;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1137288944;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND TRUE   DType[to] == EPXCrowdsale
[L3111]        CALL        call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L2307]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2308]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2309]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2310]                    gas := gas - 4;
[L2311]        CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L2311]        RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2312]        COND FALSE  !(revert)
[L3111]        RET         call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L3112]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1137288944;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND TRUE   DType[to] == EPXCrowdsale
[L3111]        CALL        call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L2307]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2308]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2309]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2310]                    gas := gas - 4;
[L2311]        CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L2311]        RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2312]        COND FALSE  !(revert)
[L3111]        RET         call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L3112]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:15:27,281 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:15:27,281 INFO  L82        PathProgramCache]: Analyzing trace with hash -472323197, now seen corresponding path program 1 times
[2020-05-30 20:15:27,281 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:15:27,319 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:15:27,693 INFO  L134       CoverageAnalysis]: Checked inductivity of 593 backedges. 94 proven. 158 refuted. 0 times theorem prover too weak. 341 trivial. 0 not checked.
[2020-05-30 20:15:27,693 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:15:27,693 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-30 20:15:27,694 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:15:27,694 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 20:15:27,694 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-05-30 20:15:27,694 INFO  L87              Difference]: Start difference. First operand 162906 states and 219248 transitions. cyclomatic complexity: 56410 Second operand 11 states.
[2020-05-30 20:15:31,774 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:15:31,774 INFO  L93              Difference]: Finished difference Result 113790 states and 152279 transitions.
[2020-05-30 20:15:31,775 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-05-30 20:15:31,775 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 113790 states and 152279 transitions.
[2020-05-30 20:15:32,163 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 132
[2020-05-30 20:15:32,733 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 113790 states to 113396 states and 151757 transitions.
[2020-05-30 20:15:32,733 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 224
[2020-05-30 20:15:32,733 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 224
[2020-05-30 20:15:32,734 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 113396 states and 151757 transitions.
[2020-05-30 20:15:32,847 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:15:32,847 INFO  L728         BuchiCegarLoop]: Abstraction has 113396 states and 151757 transitions.
[2020-05-30 20:15:32,903 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 113396 states and 151757 transitions.
[2020-05-30 20:15:33,799 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 113396 to 112763.
[2020-05-30 20:15:33,800 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 112763 states.
[2020-05-30 20:15:34,407 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 112763 states to 112763 states and 151044 transitions.
[2020-05-30 20:15:34,407 INFO  L751         BuchiCegarLoop]: Abstraction has 112763 states and 151044 transitions.
[2020-05-30 20:15:34,407 INFO  L631         BuchiCegarLoop]: Abstraction has 112763 states and 151044 transitions.
[2020-05-30 20:15:34,407 INFO  L445         BuchiCegarLoop]: ======== Iteration 35============
[2020-05-30 20:15:34,407 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 112763 states and 151044 transitions.
[2020-05-30 20:15:34,542 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 132
[2020-05-30 20:15:34,542 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:15:34,543 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:15:34,545 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:15:34,545 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -437875663;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1137288944;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:15:34,556 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:15:34,556 INFO  L82        PathProgramCache]: Analyzing trace with hash -492459940, now seen corresponding path program 1 times
[2020-05-30 20:15:34,557 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:15:34,596 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:15:34,815 INFO  L134       CoverageAnalysis]: Checked inductivity of 458 backedges. 63 proven. 40 refuted. 0 times theorem prover too weak. 355 trivial. 0 not checked.
[2020-05-30 20:15:34,815 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:15:34,815 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-30 20:15:34,816 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:15:34,816 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 20:15:34,816 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=22, Invalid=110, Unknown=0, NotChecked=0, Total=132
[2020-05-30 20:15:34,816 INFO  L87              Difference]: Start difference. First operand 112763 states and 151044 transitions. cyclomatic complexity: 38436 Second operand 12 states.
[2020-05-30 20:15:39,101 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:15:39,101 INFO  L93              Difference]: Finished difference Result 124902 states and 164986 transitions.
[2020-05-30 20:15:39,101 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-05-30 20:15:39,101 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 124902 states and 164986 transitions.
[2020-05-30 20:15:39,493 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 132
[2020-05-30 20:15:39,977 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 124902 states to 100725 states and 135014 transitions.
[2020-05-30 20:15:39,977 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 224
[2020-05-30 20:15:39,978 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 224
[2020-05-30 20:15:39,978 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 100725 states and 135014 transitions.
[2020-05-30 20:15:40,069 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:15:40,069 INFO  L728         BuchiCegarLoop]: Abstraction has 100725 states and 135014 transitions.
[2020-05-30 20:15:40,111 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 100725 states and 135014 transitions.
[2020-05-30 20:15:40,878 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 100725 to 100351.
[2020-05-30 20:15:40,878 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 100351 states.
[2020-05-30 20:15:41,103 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 100351 states to 100351 states and 134575 transitions.
[2020-05-30 20:15:41,104 INFO  L751         BuchiCegarLoop]: Abstraction has 100351 states and 134575 transitions.
[2020-05-30 20:15:41,104 INFO  L631         BuchiCegarLoop]: Abstraction has 100351 states and 134575 transitions.
[2020-05-30 20:15:41,104 INFO  L445         BuchiCegarLoop]: ======== Iteration 36============
[2020-05-30 20:15:41,104 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 100351 states and 134575 transitions.
[2020-05-30 20:15:41,232 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 132
[2020-05-30 20:15:41,232 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:15:41,232 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:15:41,234 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:15:41,235 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1137288944;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:15:41,240 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:15:41,240 INFO  L82        PathProgramCache]: Analyzing trace with hash 1315472572, now seen corresponding path program 2 times
[2020-05-30 20:15:41,241 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:15:41,292 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:15:41,351 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:15:41,436 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:15:41,437 INFO  L82        PathProgramCache]: Analyzing trace with hash 1029903575, now seen corresponding path program 2 times
[2020-05-30 20:15:41,437 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:15:41,443 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:15:41,449 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:15:41,456 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:15:41,457 INFO  L82        PathProgramCache]: Analyzing trace with hash 987232060, now seen corresponding path program 1 times
[2020-05-30 20:15:41,457 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:15:41,505 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:15:42,705 INFO  L134       CoverageAnalysis]: Checked inductivity of 559 backedges. 57 proven. 194 refuted. 0 times theorem prover too weak. 308 trivial. 0 not checked.
[2020-05-30 20:15:42,705 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:15:42,705 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [47] total 47
[2020-05-30 20:15:42,706 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 48 interpolants.
[2020-05-30 20:15:42,706 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=163, Invalid=2093, Unknown=0, NotChecked=0, Total=2256
[2020-05-30 20:15:42,706 INFO  L87              Difference]: Start difference. First operand 100351 states and 134575 transitions. cyclomatic complexity: 34346 Second operand 48 states.
[2020-05-30 20:16:23,481 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:16:23,481 INFO  L93              Difference]: Finished difference Result 131274 states and 169810 transitions.
[2020-05-30 20:16:23,481 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 95 states. 
[2020-05-30 20:16:23,482 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 131274 states and 169810 transitions.
[2020-05-30 20:16:23,993 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 132
[2020-05-30 20:16:24,474 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 131274 states to 129501 states and 167938 transitions.
[2020-05-30 20:16:24,475 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 224
[2020-05-30 20:16:24,475 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 224
[2020-05-30 20:16:24,475 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 129501 states and 167938 transitions.
[2020-05-30 20:16:24,586 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:16:24,586 INFO  L728         BuchiCegarLoop]: Abstraction has 129501 states and 167938 transitions.
[2020-05-30 20:16:24,637 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 129501 states and 167938 transitions.
[2020-05-30 20:16:25,584 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 129501 to 123877.
[2020-05-30 20:16:25,584 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 123877 states.
[2020-05-30 20:16:25,847 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 123877 states to 123877 states and 160978 transitions.
[2020-05-30 20:16:25,847 INFO  L751         BuchiCegarLoop]: Abstraction has 123877 states and 160978 transitions.
[2020-05-30 20:16:25,847 INFO  L631         BuchiCegarLoop]: Abstraction has 123877 states and 160978 transitions.
[2020-05-30 20:16:25,847 INFO  L445         BuchiCegarLoop]: ======== Iteration 37============
[2020-05-30 20:16:25,847 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 123877 states and 160978 transitions.
[2020-05-30 20:16:26,001 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 132
[2020-05-30 20:16:26,002 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:16:26,002 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:16:26,004 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:16:26,005 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1137288944;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND FALSE  !(Balance[from] >= amount)
[L3644]                    success := false;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND FALSE  !(Balance[from] >= amount)
[L3644]                    success := false;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:16:26,026 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:16:26,027 INFO  L82        PathProgramCache]: Analyzing trace with hash 1182232219, now seen corresponding path program 1 times
[2020-05-30 20:16:26,027 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:16:26,066 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:16:26,387 INFO  L134       CoverageAnalysis]: Checked inductivity of 395 backedges. 25 proven. 5 refuted. 0 times theorem prover too weak. 365 trivial. 0 not checked.
[2020-05-30 20:16:26,387 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:16:26,387 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [4] total 4
[2020-05-30 20:16:26,387 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:16:26,387 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 20:16:26,388 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-30 20:16:26,388 INFO  L87              Difference]: Start difference. First operand 123877 states and 160978 transitions. cyclomatic complexity: 37241 Second operand 4 states.
[2020-05-30 20:16:26,775 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:16:26,775 INFO  L93              Difference]: Finished difference Result 119221 states and 152360 transitions.
[2020-05-30 20:16:26,775 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-30 20:16:26,775 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 119221 states and 152360 transitions.
[2020-05-30 20:16:27,145 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 132
[2020-05-30 20:16:27,673 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 119221 states to 117841 states and 150600 transitions.
[2020-05-30 20:16:27,673 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 207
[2020-05-30 20:16:27,673 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 207
[2020-05-30 20:16:27,674 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 117841 states and 150600 transitions.
[2020-05-30 20:16:27,774 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:16:27,774 INFO  L728         BuchiCegarLoop]: Abstraction has 117841 states and 150600 transitions.
[2020-05-30 20:16:27,829 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 117841 states and 150600 transitions.
[2020-05-30 20:16:28,641 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 117841 to 117799.
[2020-05-30 20:16:28,641 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 117799 states.
[2020-05-30 20:16:28,886 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 117799 states to 117799 states and 150546 transitions.
[2020-05-30 20:16:28,886 INFO  L751         BuchiCegarLoop]: Abstraction has 117799 states and 150546 transitions.
[2020-05-30 20:16:28,886 INFO  L631         BuchiCegarLoop]: Abstraction has 117799 states and 150546 transitions.
[2020-05-30 20:16:28,886 INFO  L445         BuchiCegarLoop]: ======== Iteration 38============
[2020-05-30 20:16:28,886 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 117799 states and 150546 transitions.
[2020-05-30 20:16:29,037 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 132
[2020-05-30 20:16:29,037 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:16:29,037 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:16:29,040 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:16:29,040 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -1702767056;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1137288944;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:16:29,046 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:16:29,046 INFO  L82        PathProgramCache]: Analyzing trace with hash 1299890247, now seen corresponding path program 1 times
[2020-05-30 20:16:29,047 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:16:29,087 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:16:29,415 INFO  L134       CoverageAnalysis]: Checked inductivity of 529 backedges. 89 proven. 26 refuted. 0 times theorem prover too weak. 414 trivial. 0 not checked.
[2020-05-30 20:16:29,415 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:16:29,416 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-30 20:16:29,416 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:16:29,416 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 20:16:29,416 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=35, Invalid=75, Unknown=0, NotChecked=0, Total=110
[2020-05-30 20:16:29,416 INFO  L87              Difference]: Start difference. First operand 117799 states and 150546 transitions. cyclomatic complexity: 32876 Second operand 11 states.
[2020-05-30 20:16:31,664 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:16:31,664 INFO  L93              Difference]: Finished difference Result 135006 states and 178558 transitions.
[2020-05-30 20:16:31,664 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-05-30 20:16:31,664 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 135006 states and 178558 transitions.
[2020-05-30 20:16:32,146 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 228
[2020-05-30 20:16:32,856 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 135006 states to 133923 states and 177037 transitions.
[2020-05-30 20:16:32,856 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 207
[2020-05-30 20:16:32,857 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 207
[2020-05-30 20:16:32,857 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 133923 states and 177037 transitions.
[2020-05-30 20:16:32,996 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:16:32,996 INFO  L728         BuchiCegarLoop]: Abstraction has 133923 states and 177037 transitions.
[2020-05-30 20:16:33,060 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 133923 states and 177037 transitions.
[2020-05-30 20:16:34,126 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 133923 to 117799.
[2020-05-30 20:16:34,127 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 117799 states.
[2020-05-30 20:16:34,368 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 117799 states to 117799 states and 150468 transitions.
[2020-05-30 20:16:34,368 INFO  L751         BuchiCegarLoop]: Abstraction has 117799 states and 150468 transitions.
[2020-05-30 20:16:34,368 INFO  L631         BuchiCegarLoop]: Abstraction has 117799 states and 150468 transitions.
[2020-05-30 20:16:34,368 INFO  L445         BuchiCegarLoop]: ======== Iteration 39============
[2020-05-30 20:16:34,368 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 117799 states and 150468 transitions.
[2020-05-30 20:16:34,514 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 132
[2020-05-30 20:16:34,514 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:16:34,514 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:16:34,517 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:16:34,517 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -437875663;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1137288944;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:16:34,527 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:16:34,527 INFO  L82        PathProgramCache]: Analyzing trace with hash 1139283775, now seen corresponding path program 1 times
[2020-05-30 20:16:34,528 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:16:34,569 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:16:34,993 INFO  L134       CoverageAnalysis]: Checked inductivity of 433 backedges. 177 proven. 75 refuted. 0 times theorem prover too weak. 181 trivial. 0 not checked.
[2020-05-30 20:16:34,993 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:16:34,993 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [17] total 17
[2020-05-30 20:16:34,994 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:16:34,994 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-05-30 20:16:34,994 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=39, Invalid=267, Unknown=0, NotChecked=0, Total=306
[2020-05-30 20:16:34,994 INFO  L87              Difference]: Start difference. First operand 117799 states and 150468 transitions. cyclomatic complexity: 32798 Second operand 18 states.
[2020-05-30 20:16:43,028 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:16:43,028 INFO  L93              Difference]: Finished difference Result 157068 states and 199500 transitions.
[2020-05-30 20:16:43,028 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 20 states. 
[2020-05-30 20:16:43,029 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 157068 states and 199500 transitions.
[2020-05-30 20:16:43,498 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 244
[2020-05-30 20:16:44,214 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 157068 states to 157068 states and 199500 transitions.
[2020-05-30 20:16:44,214 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 255
[2020-05-30 20:16:44,215 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 255
[2020-05-30 20:16:44,215 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 157068 states and 199500 transitions.
[2020-05-30 20:16:44,353 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:16:44,353 INFO  L728         BuchiCegarLoop]: Abstraction has 157068 states and 199500 transitions.
[2020-05-30 20:16:44,418 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 157068 states and 199500 transitions.
[2020-05-30 20:16:45,496 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 157068 to 154394.
[2020-05-30 20:16:45,496 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 154394 states.
[2020-05-30 20:16:45,821 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 154394 states to 154394 states and 196458 transitions.
[2020-05-30 20:16:45,821 INFO  L751         BuchiCegarLoop]: Abstraction has 154394 states and 196458 transitions.
[2020-05-30 20:16:45,821 INFO  L631         BuchiCegarLoop]: Abstraction has 154394 states and 196458 transitions.
[2020-05-30 20:16:45,822 INFO  L445         BuchiCegarLoop]: ======== Iteration 40============
[2020-05-30 20:16:45,822 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 154394 states and 196458 transitions.
[2020-05-30 20:16:46,011 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 244
[2020-05-30 20:16:46,011 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:16:46,011 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:16:46,013 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:16:46,013 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -1702767056;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0)
[L2913]                    gas := gas - 876;
[L2914]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2915]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2916]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2917]                    assume now >= 0;
[L2918]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2919-L2921]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0 && now <= fundingEndBlock_EPXCrowdsale[this]
[L2923]                    gas := gas - 20317;
[L2924]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2925]                    gas := gas - 20267;
[L2926]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2927]                    gas := gas - 409;
[L2928]                    CurrentStatus_EPXCrowdsale[this] := -1388231396;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:16:46,018 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:16:46,019 INFO  L82        PathProgramCache]: Analyzing trace with hash -543445121, now seen corresponding path program 1 times
[2020-05-30 20:16:46,019 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:16:46,059 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:16:46,582 INFO  L134       CoverageAnalysis]: Checked inductivity of 529 backedges. 260 proven. 79 refuted. 0 times theorem prover too weak. 190 trivial. 0 not checked.
[2020-05-30 20:16:46,582 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:16:46,583 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [17] total 17
[2020-05-30 20:16:46,583 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:16:46,583 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-05-30 20:16:46,583 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=36, Invalid=236, Unknown=0, NotChecked=0, Total=272
[2020-05-30 20:16:46,583 INFO  L87              Difference]: Start difference. First operand 154394 states and 196458 transitions. cyclomatic complexity: 42201 Second operand 17 states.
[2020-05-30 20:16:54,930 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:16:54,930 INFO  L93              Difference]: Finished difference Result 175971 states and 224539 transitions.
[2020-05-30 20:16:54,930 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 20 states. 
[2020-05-30 20:16:54,930 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 175971 states and 224539 transitions.
[2020-05-30 20:16:55,508 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 324
[2020-05-30 20:16:56,375 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 175971 states to 175971 states and 224539 transitions.
[2020-05-30 20:16:56,376 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 267
[2020-05-30 20:16:56,376 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 267
[2020-05-30 20:16:56,376 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 175971 states and 224539 transitions.
[2020-05-30 20:16:56,544 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:16:56,544 INFO  L728         BuchiCegarLoop]: Abstraction has 175971 states and 224539 transitions.
[2020-05-30 20:16:56,629 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 175971 states and 224539 transitions.
[2020-05-30 20:16:57,975 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 175971 to 175431.
[2020-05-30 20:16:57,975 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 175431 states.
[2020-05-30 20:16:58,364 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 175431 states to 175431 states and 223584 transitions.
[2020-05-30 20:16:58,364 INFO  L751         BuchiCegarLoop]: Abstraction has 175431 states and 223584 transitions.
[2020-05-30 20:16:58,364 INFO  L631         BuchiCegarLoop]: Abstraction has 175431 states and 223584 transitions.
[2020-05-30 20:16:58,364 INFO  L445         BuchiCegarLoop]: ======== Iteration 41============
[2020-05-30 20:16:58,364 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 175431 states and 223584 transitions.
[2020-05-30 20:16:58,580 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 324
[2020-05-30 20:16:58,580 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:16:58,580 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:16:58,582 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:16:58,583 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1137288944;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:16:58,594 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:16:58,594 INFO  L82        PathProgramCache]: Analyzing trace with hash -1250943919, now seen corresponding path program 1 times
[2020-05-30 20:16:58,595 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:16:58,638 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:16:58,916 INFO  L134       CoverageAnalysis]: Checked inductivity of 284 backedges. 73 proven. 20 refuted. 0 times theorem prover too weak. 191 trivial. 0 not checked.
[2020-05-30 20:16:58,916 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:16:58,916 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-30 20:16:58,916 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:16:58,917 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 20:16:58,917 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=24, Invalid=108, Unknown=0, NotChecked=0, Total=132
[2020-05-30 20:16:58,917 INFO  L87              Difference]: Start difference. First operand 175431 states and 223584 transitions. cyclomatic complexity: 48266 Second operand 12 states.
[2020-05-30 20:17:02,500 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:17:02,500 INFO  L93              Difference]: Finished difference Result 204586 states and 260323 transitions.
[2020-05-30 20:17:02,501 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-05-30 20:17:02,501 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 204586 states and 260323 transitions.
[2020-05-30 20:17:03,190 INFO  L131   ngComponentsAnalysis]: Automaton has 13 accepting balls. 386
[2020-05-30 20:17:04,243 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 204586 states to 204514 states and 259955 transitions.
[2020-05-30 20:17:04,243 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 318
[2020-05-30 20:17:04,244 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 318
[2020-05-30 20:17:04,244 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 204514 states and 259955 transitions.
[2020-05-30 20:17:04,437 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:17:04,437 INFO  L728         BuchiCegarLoop]: Abstraction has 204514 states and 259955 transitions.
[2020-05-30 20:17:04,534 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 204514 states and 259955 transitions.
[2020-05-30 20:17:05,872 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 204514 to 194564.
[2020-05-30 20:17:05,872 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 194564 states.
[2020-05-30 20:17:06,666 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 194564 states to 194564 states and 248495 transitions.
[2020-05-30 20:17:06,666 INFO  L751         BuchiCegarLoop]: Abstraction has 194564 states and 248495 transitions.
[2020-05-30 20:17:06,666 INFO  L631         BuchiCegarLoop]: Abstraction has 194564 states and 248495 transitions.
[2020-05-30 20:17:06,666 INFO  L445         BuchiCegarLoop]: ======== Iteration 42============
[2020-05-30 20:17:06,666 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 194564 states and 248495 transitions.
[2020-05-30 20:17:06,872 INFO  L131   ngComponentsAnalysis]: Automaton has 13 accepting balls. 368
[2020-05-30 20:17:06,872 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:17:06,872 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:17:06,874 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:17:06,874 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -437875663;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0)
[L2913]                    gas := gas - 876;
[L2914]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2915]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2916]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2917]                    assume now >= 0;
[L2918]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2919-L2921]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0 && now <= fundingEndBlock_EPXCrowdsale[this]
[L2923]                    gas := gas - 20317;
[L2924]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2925]                    gas := gas - 20267;
[L2926]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2927]                    gas := gas - 409;
[L2928]                    CurrentStatus_EPXCrowdsale[this] := -1388231396;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND FALSE  !(choice == 1)
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:17:06,882 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:17:06,882 INFO  L82        PathProgramCache]: Analyzing trace with hash 1695206935, now seen corresponding path program 1 times
[2020-05-30 20:17:06,882 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:17:06,934 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:17:07,782 INFO  L134       CoverageAnalysis]: Checked inductivity of 434 backedges. 24 proven. 51 refuted. 0 times theorem prover too weak. 359 trivial. 0 not checked.
[2020-05-30 20:17:07,782 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:17:07,782 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [32] total 32
[2020-05-30 20:17:07,783 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:17:07,783 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 33 interpolants.
[2020-05-30 20:17:07,783 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=101, Invalid=955, Unknown=0, NotChecked=0, Total=1056
[2020-05-30 20:17:07,783 INFO  L87              Difference]: Start difference. First operand 194564 states and 248495 transitions. cyclomatic complexity: 54092 Second operand 33 states.
[2020-05-30 20:17:09,215 WARN  L188               SmtUtils]: Spent 824.00 ms on a formula simplification. DAG size of input: 32 DAG size of output: 29
[2020-05-30 20:17:36,616 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:17:36,616 INFO  L93              Difference]: Finished difference Result 202610 states and 258829 transitions.
[2020-05-30 20:17:36,616 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 63 states. 
[2020-05-30 20:17:36,616 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 202610 states and 258829 transitions.
[2020-05-30 20:17:37,331 INFO  L131   ngComponentsAnalysis]: Automaton has 13 accepting balls. 368
[2020-05-30 20:17:38,479 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 202610 states to 202610 states and 258829 transitions.
[2020-05-30 20:17:38,479 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 324
[2020-05-30 20:17:38,480 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 324
[2020-05-30 20:17:38,480 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 202610 states and 258829 transitions.
[2020-05-30 20:17:38,675 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:17:38,675 INFO  L728         BuchiCegarLoop]: Abstraction has 202610 states and 258829 transitions.
[2020-05-30 20:17:38,754 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 202610 states and 258829 transitions.
[2020-05-30 20:17:40,040 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 202610 to 195622.
[2020-05-30 20:17:40,040 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 195622 states.
[2020-05-30 20:17:40,499 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 195622 states to 195622 states and 250524 transitions.
[2020-05-30 20:17:40,499 INFO  L751         BuchiCegarLoop]: Abstraction has 195622 states and 250524 transitions.
[2020-05-30 20:17:40,499 INFO  L631         BuchiCegarLoop]: Abstraction has 195622 states and 250524 transitions.
[2020-05-30 20:17:40,499 INFO  L445         BuchiCegarLoop]: ======== Iteration 43============
[2020-05-30 20:17:40,499 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 195622 states and 250524 transitions.
[2020-05-30 20:17:40,737 INFO  L131   ngComponentsAnalysis]: Automaton has 13 accepting balls. 368
[2020-05-30 20:17:40,737 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:17:40,737 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:17:40,740 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:17:40,740 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -437875663;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0)
[L2913]                    gas := gas - 876;
[L2914]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2915]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2916]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2917]                    assume now >= 0;
[L2918]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2919-L2921]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0 && now <= fundingEndBlock_EPXCrowdsale[this]
[L2923]                    gas := gas - 20317;
[L2924]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2925]                    gas := gas - 20267;
[L2926]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2927]                    gas := gas - 409;
[L2928]                    CurrentStatus_EPXCrowdsale[this] := -1388231396;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:17:40,760 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:17:40,760 INFO  L82        PathProgramCache]: Analyzing trace with hash 1204350501, now seen corresponding path program 1 times
[2020-05-30 20:17:40,761 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:17:40,819 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:17:40,890 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:17:41,045 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:17:41,045 INFO  L82        PathProgramCache]: Analyzing trace with hash 1029903575, now seen corresponding path program 3 times
[2020-05-30 20:17:41,045 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:17:41,053 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:17:41,061 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:17:41,070 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:17:41,071 INFO  L82        PathProgramCache]: Analyzing trace with hash -64151501, now seen corresponding path program 1 times
[2020-05-30 20:17:41,071 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:17:41,150 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:17:43,046 INFO  L134       CoverageAnalysis]: Checked inductivity of 621 backedges. 116 proven. 267 refuted. 0 times theorem prover too weak. 238 trivial. 0 not checked.
[2020-05-30 20:17:43,047 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:17:43,047 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [61] total 61
[2020-05-30 20:17:43,047 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 62 interpolants.
[2020-05-30 20:17:43,048 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=203, Invalid=3579, Unknown=0, NotChecked=0, Total=3782
[2020-05-30 20:17:43,048 INFO  L87              Difference]: Start difference. First operand 195622 states and 250524 transitions. cyclomatic complexity: 55073 Second operand 62 states.
[2020-05-30 20:18:45,857 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:18:45,857 INFO  L93              Difference]: Finished difference Result 198744 states and 256509 transitions.
[2020-05-30 20:18:45,857 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 100 states. 
[2020-05-30 20:18:45,858 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 198744 states and 256509 transitions.
[2020-05-30 20:18:46,578 INFO  L131   ngComponentsAnalysis]: Automaton has 13 accepting balls. 368
[2020-05-30 20:18:47,691 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 198744 states to 198744 states and 256509 transitions.
[2020-05-30 20:18:47,691 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 330
[2020-05-30 20:18:47,692 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 330
[2020-05-30 20:18:47,692 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 198744 states and 256509 transitions.
[2020-05-30 20:18:47,890 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:18:47,890 INFO  L728         BuchiCegarLoop]: Abstraction has 198744 states and 256509 transitions.
[2020-05-30 20:18:47,979 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 198744 states and 256509 transitions.
[2020-05-30 20:18:49,384 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 198744 to 196386.
[2020-05-30 20:18:49,384 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 196386 states.
[2020-05-30 20:18:50,180 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 196386 states to 196386 states and 252753 transitions.
[2020-05-30 20:18:50,180 INFO  L751         BuchiCegarLoop]: Abstraction has 196386 states and 252753 transitions.
[2020-05-30 20:18:50,180 INFO  L631         BuchiCegarLoop]: Abstraction has 196386 states and 252753 transitions.
[2020-05-30 20:18:50,180 INFO  L445         BuchiCegarLoop]: ======== Iteration 44============
[2020-05-30 20:18:50,180 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 196386 states and 252753 transitions.
[2020-05-30 20:18:50,382 INFO  L131   ngComponentsAnalysis]: Automaton has 13 accepting balls. 368
[2020-05-30 20:18:50,382 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:18:50,382 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:18:50,385 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:18:50,385 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -437875663;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1137288944;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND TRUE   DType[to] == EPXCrowdsale
[L3111]        CALL        call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L2307]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2308]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2309]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2310]                    gas := gas - 4;
[L2311]        CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L2311]        RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2312]        COND FALSE  !(revert)
[L3111]        RET         call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L3112]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND TRUE   DType[to] == EPXCrowdsale
[L3111]        CALL        call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L2307]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2308]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2309]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2310]                    gas := gas - 4;
[L2311]        CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L2311]        RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2312]        COND FALSE  !(revert)
[L3111]        RET         call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L3112]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:18:50,394 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:18:50,394 INFO  L82        PathProgramCache]: Analyzing trace with hash -595961146, now seen corresponding path program 1 times
[2020-05-30 20:18:50,395 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:18:50,428 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:18:50,695 INFO  L134       CoverageAnalysis]: Checked inductivity of 400 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 396 trivial. 0 not checked.
[2020-05-30 20:18:50,695 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:18:50,695 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [32] imperfect sequences [] total 32
[2020-05-30 20:18:50,695 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:18:50,695 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-05-30 20:18:50,696 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=412, Invalid=580, Unknown=0, NotChecked=0, Total=992
[2020-05-30 20:18:50,696 INFO  L87              Difference]: Start difference. First operand 196386 states and 252753 transitions. cyclomatic complexity: 56610 Second operand 32 states.
[2020-05-30 20:18:56,422 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:18:56,422 INFO  L93              Difference]: Finished difference Result 193912 states and 262653 transitions.
[2020-05-30 20:18:56,422 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 59 states. 
[2020-05-30 20:18:56,423 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 193912 states and 262653 transitions.
[2020-05-30 20:18:58,509 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 388
[2020-05-30 20:18:59,597 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 193912 states to 190739 states and 259138 transitions.
[2020-05-30 20:18:59,598 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 252
[2020-05-30 20:18:59,598 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 252
[2020-05-30 20:18:59,598 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 190739 states and 259138 transitions.
[2020-05-30 20:18:59,822 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:18:59,823 INFO  L728         BuchiCegarLoop]: Abstraction has 190739 states and 259138 transitions.
[2020-05-30 20:18:59,903 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 190739 states and 259138 transitions.
[2020-05-30 20:19:01,303 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 190739 to 161849.
[2020-05-30 20:19:01,304 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 161849 states.
[2020-05-30 20:19:01,692 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 161849 states to 161849 states and 209280 transitions.
[2020-05-30 20:19:01,692 INFO  L751         BuchiCegarLoop]: Abstraction has 161849 states and 209280 transitions.
[2020-05-30 20:19:01,692 INFO  L631         BuchiCegarLoop]: Abstraction has 161849 states and 209280 transitions.
[2020-05-30 20:19:01,692 INFO  L445         BuchiCegarLoop]: ======== Iteration 45============
[2020-05-30 20:19:01,692 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 161849 states and 209280 transitions.
[2020-05-30 20:19:01,890 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 218
[2020-05-30 20:19:01,890 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:19:01,890 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:19:01,893 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:19:01,893 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0)
[L2913]                    gas := gas - 876;
[L2914]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2915]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2916]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2917]                    assume now >= 0;
[L2918]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2919-L2921]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0 && now <= fundingEndBlock_EPXCrowdsale[this]
[L2923]                    gas := gas - 20317;
[L2924]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2925]                    gas := gas - 20267;
[L2926]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2927]                    gas := gas - 409;
[L2928]                    CurrentStatus_EPXCrowdsale[this] := -1388231396;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND TRUE   DType[to] == safeMath
[L3123]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND TRUE   DType[to] == safeMath
[L3123]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND TRUE   DType[to] == safeMath
[L3123]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:19:01,908 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:19:01,908 INFO  L82        PathProgramCache]: Analyzing trace with hash 127036185, now seen corresponding path program 1 times
[2020-05-30 20:19:01,908 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:19:01,947 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:19:02,442 INFO  L134       CoverageAnalysis]: Checked inductivity of 412 backedges. 89 proven. 50 refuted. 0 times theorem prover too weak. 273 trivial. 0 not checked.
[2020-05-30 20:19:02,442 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:19:02,442 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [17] total 17
[2020-05-30 20:19:02,442 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:19:02,443 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-05-30 20:19:02,443 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=49, Invalid=257, Unknown=0, NotChecked=0, Total=306
[2020-05-30 20:19:02,443 INFO  L87              Difference]: Start difference. First operand 161849 states and 209280 transitions. cyclomatic complexity: 47656 Second operand 18 states.
[2020-05-30 20:19:06,932 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:19:06,932 INFO  L93              Difference]: Finished difference Result 193928 states and 248920 transitions.
[2020-05-30 20:19:06,933 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-05-30 20:19:06,933 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 193928 states and 248920 transitions.
[2020-05-30 20:19:07,772 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 350
[2020-05-30 20:19:08,598 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 193928 states to 189923 states and 243436 transitions.
[2020-05-30 20:19:08,598 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 252
[2020-05-30 20:19:08,599 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 252
[2020-05-30 20:19:08,599 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 189923 states and 243436 transitions.
[2020-05-30 20:19:08,779 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:19:08,779 INFO  L728         BuchiCegarLoop]: Abstraction has 189923 states and 243436 transitions.
[2020-05-30 20:19:08,859 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 189923 states and 243436 transitions.
[2020-05-30 20:19:10,052 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 189923 to 188885.
[2020-05-30 20:19:10,053 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 188885 states.
[2020-05-30 20:19:10,510 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 188885 states to 188885 states and 242154 transitions.
[2020-05-30 20:19:10,510 INFO  L751         BuchiCegarLoop]: Abstraction has 188885 states and 242154 transitions.
[2020-05-30 20:19:10,510 INFO  L631         BuchiCegarLoop]: Abstraction has 188885 states and 242154 transitions.
[2020-05-30 20:19:10,510 INFO  L445         BuchiCegarLoop]: ======== Iteration 46============
[2020-05-30 20:19:10,510 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 188885 states and 242154 transitions.
[2020-05-30 20:19:10,739 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 350
[2020-05-30 20:19:10,739 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:19:10,739 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:19:10,742 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:19:10,742 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -437875663;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0)
[L2913]                    gas := gas - 876;
[L2914]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2915]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2916]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2917]                    assume now >= 0;
[L2918]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2919-L2921]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0 && now <= fundingEndBlock_EPXCrowdsale[this]
[L2923]                    gas := gas - 20317;
[L2924]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2925]                    gas := gas - 20267;
[L2926]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2927]                    gas := gas - 409;
[L2928]                    CurrentStatus_EPXCrowdsale[this] := -1388231396;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND FALSE  !(choice == 1)
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:19:10,754 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:19:10,754 INFO  L82        PathProgramCache]: Analyzing trace with hash -1588085632, now seen corresponding path program 1 times
[2020-05-30 20:19:10,755 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:19:10,823 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:19:12,222 INFO  L134       CoverageAnalysis]: Checked inductivity of 589 backedges. 28 proven. 109 refuted. 0 times theorem prover too weak. 452 trivial. 0 not checked.
[2020-05-30 20:19:12,222 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:19:12,222 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [47] total 47
[2020-05-30 20:19:12,223 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:19:12,223 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 48 interpolants.
[2020-05-30 20:19:12,223 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=163, Invalid=2093, Unknown=0, NotChecked=0, Total=2256
[2020-05-30 20:19:12,223 INFO  L87              Difference]: Start difference. First operand 188885 states and 242154 transitions. cyclomatic complexity: 53485 Second operand 48 states.
[2020-05-30 20:19:54,859 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:19:54,860 INFO  L93              Difference]: Finished difference Result 191220 states and 246537 transitions.
[2020-05-30 20:19:54,860 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 75 states. 
[2020-05-30 20:19:54,860 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 191220 states and 246537 transitions.
[2020-05-30 20:19:55,626 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 350
[2020-05-30 20:19:56,560 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 191220 states to 191220 states and 246537 transitions.
[2020-05-30 20:19:56,560 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 252
[2020-05-30 20:19:56,560 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 252
[2020-05-30 20:19:56,560 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 191220 states and 246537 transitions.
[2020-05-30 20:19:56,742 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:19:56,742 INFO  L728         BuchiCegarLoop]: Abstraction has 191220 states and 246537 transitions.
[2020-05-30 20:19:56,818 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 191220 states and 246537 transitions.
[2020-05-30 20:19:58,060 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 191220 to 189470.
[2020-05-30 20:19:58,060 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 189470 states.
[2020-05-30 20:19:58,516 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 189470 states to 189470 states and 242799 transitions.
[2020-05-30 20:19:58,516 INFO  L751         BuchiCegarLoop]: Abstraction has 189470 states and 242799 transitions.
[2020-05-30 20:19:58,516 INFO  L631         BuchiCegarLoop]: Abstraction has 189470 states and 242799 transitions.
[2020-05-30 20:19:58,517 INFO  L445         BuchiCegarLoop]: ======== Iteration 47============
[2020-05-30 20:19:58,517 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 189470 states and 242799 transitions.
[2020-05-30 20:19:58,745 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 350
[2020-05-30 20:19:58,746 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:19:58,746 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:19:58,749 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:19:58,749 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -437875663;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0
[L2904]                    gas := gas - 20317;
[L2905]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2906]                    gas := gas - 20267;
[L2907]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2908]                    gas := gas - 409;
[L2909]                    CurrentStatus_EPXCrowdsale[this] := 1905681161;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:19:58,776 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:19:58,776 INFO  L82        PathProgramCache]: Analyzing trace with hash -568807839, now seen corresponding path program 1 times
[2020-05-30 20:19:58,777 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:19:58,820 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:20:00,080 INFO  L134       CoverageAnalysis]: Checked inductivity of 575 backedges. 141 proven. 141 refuted. 0 times theorem prover too weak. 293 trivial. 0 not checked.
[2020-05-30 20:20:00,080 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:20:00,080 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [15] total 15
[2020-05-30 20:20:00,081 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:20:00,081 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-05-30 20:20:00,081 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=33, Invalid=177, Unknown=0, NotChecked=0, Total=210
[2020-05-30 20:20:00,081 INFO  L87              Difference]: Start difference. First operand 189470 states and 242799 transitions. cyclomatic complexity: 53545 Second operand 15 states.
[2020-05-30 20:20:04,990 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:20:04,990 INFO  L93              Difference]: Finished difference Result 163102 states and 208203 transitions.
[2020-05-30 20:20:04,990 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-05-30 20:20:04,990 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 163102 states and 208203 transitions.
[2020-05-30 20:20:05,583 INFO  L131   ngComponentsAnalysis]: Automaton has 16 accepting balls. 216
[2020-05-30 20:20:06,224 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 163102 states to 122247 states and 148116 transitions.
[2020-05-30 20:20:06,224 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 146
[2020-05-30 20:20:06,224 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 146
[2020-05-30 20:20:06,224 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 122247 states and 148116 transitions.
[2020-05-30 20:20:06,343 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:20:06,344 INFO  L728         BuchiCegarLoop]: Abstraction has 122247 states and 148116 transitions.
[2020-05-30 20:20:06,403 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 122247 states and 148116 transitions.
[2020-05-30 20:20:07,141 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 122247 to 110507.
[2020-05-30 20:20:07,141 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 110507 states.
[2020-05-30 20:20:07,378 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 110507 states to 110507 states and 132358 transitions.
[2020-05-30 20:20:07,379 INFO  L751         BuchiCegarLoop]: Abstraction has 110507 states and 132358 transitions.
[2020-05-30 20:20:07,379 INFO  L631         BuchiCegarLoop]: Abstraction has 110507 states and 132358 transitions.
[2020-05-30 20:20:07,379 INFO  L445         BuchiCegarLoop]: ======== Iteration 48============
[2020-05-30 20:20:07,379 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 110507 states and 132358 transitions.
[2020-05-30 20:20:07,518 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 168
[2020-05-30 20:20:07,518 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:20:07,518 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:20:07,521 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:20:07,522 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -437875663;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0)
[L2913]                    gas := gas - 876;
[L2914]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2915]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2916]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2917]                    assume now >= 0;
[L2918]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2919-L2921]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0 && now <= fundingEndBlock_EPXCrowdsale[this]
[L2923]                    gas := gas - 20317;
[L2924]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2925]                    gas := gas - 20267;
[L2926]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2927]                    gas := gas - 409;
[L2928]                    CurrentStatus_EPXCrowdsale[this] := -1388231396;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:20:07,527 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:20:07,528 INFO  L82        PathProgramCache]: Analyzing trace with hash 710015814, now seen corresponding path program 2 times
[2020-05-30 20:20:07,528 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:20:07,604 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:20:07,692 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:20:07,848 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:20:07,849 INFO  L82        PathProgramCache]: Analyzing trace with hash 1029903575, now seen corresponding path program 4 times
[2020-05-30 20:20:07,849 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:20:07,855 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:20:07,862 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:20:07,869 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:20:07,869 INFO  L82        PathProgramCache]: Analyzing trace with hash 77836914, now seen corresponding path program 2 times
[2020-05-30 20:20:07,869 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:20:07,941 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:20:10,205 INFO  L134       CoverageAnalysis]: Checked inductivity of 913 backedges. 116 proven. 482 refuted. 0 times theorem prover too weak. 315 trivial. 0 not checked.
[2020-05-30 20:20:10,205 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:20:10,205 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [70] total 70
[2020-05-30 20:20:10,206 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 71 interpolants.
[2020-05-30 20:20:10,206 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=239, Invalid=4731, Unknown=0, NotChecked=0, Total=4970
[2020-05-30 20:20:10,207 INFO  L87              Difference]: Start difference. First operand 110507 states and 132358 transitions. cyclomatic complexity: 22045 Second operand 71 states.
[2020-05-30 20:21:25,389 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:21:25,389 INFO  L93              Difference]: Finished difference Result 144134 states and 171400 transitions.
[2020-05-30 20:21:25,389 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 111 states. 
[2020-05-30 20:21:25,390 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 144134 states and 171400 transitions.
[2020-05-30 20:21:25,798 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 168
[2020-05-30 20:21:26,412 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 144134 states to 143974 states and 170380 transitions.
[2020-05-30 20:21:26,412 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 136
[2020-05-30 20:21:26,413 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 136
[2020-05-30 20:21:26,413 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 143974 states and 170380 transitions.
[2020-05-30 20:21:26,530 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:21:26,530 INFO  L728         BuchiCegarLoop]: Abstraction has 143974 states and 170380 transitions.
[2020-05-30 20:21:26,593 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 143974 states and 170380 transitions.
[2020-05-30 20:21:27,424 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 143974 to 141536.
[2020-05-30 20:21:27,424 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 141536 states.
[2020-05-30 20:21:27,706 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 141536 states to 141536 states and 167648 transitions.
[2020-05-30 20:21:27,706 INFO  L751         BuchiCegarLoop]: Abstraction has 141536 states and 167648 transitions.
[2020-05-30 20:21:27,706 INFO  L631         BuchiCegarLoop]: Abstraction has 141536 states and 167648 transitions.
[2020-05-30 20:21:27,706 INFO  L445         BuchiCegarLoop]: ======== Iteration 49============
[2020-05-30 20:21:27,706 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 141536 states and 167648 transitions.
[2020-05-30 20:21:27,868 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 168
[2020-05-30 20:21:27,868 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:21:27,869 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:21:27,872 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:21:27,872 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -437875663;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0)
[L2913]                    gas := gas - 876;
[L2914]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2915]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2916]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2917]                    assume now >= 0;
[L2918]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2919-L2921]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0 && now <= fundingEndBlock_EPXCrowdsale[this]
[L2923]                    gas := gas - 20317;
[L2924]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2925]                    gas := gas - 20267;
[L2926]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2927]                    gas := gas - 409;
[L2928]                    CurrentStatus_EPXCrowdsale[this] := -1388231396;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:21:27,878 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:21:27,879 INFO  L82        PathProgramCache]: Analyzing trace with hash -1797613222, now seen corresponding path program 2 times
[2020-05-30 20:21:27,879 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:21:27,983 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:21:30,695 INFO  L134       CoverageAnalysis]: Checked inductivity of 1055 backedges. 141 proven. 378 refuted. 0 times theorem prover too weak. 536 trivial. 0 not checked.
[2020-05-30 20:21:30,695 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:21:30,695 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [66] total 66
[2020-05-30 20:21:30,695 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:21:30,696 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 67 interpolants.
[2020-05-30 20:21:30,696 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=237, Invalid=4185, Unknown=0, NotChecked=0, Total=4422
[2020-05-30 20:21:30,696 INFO  L87              Difference]: Start difference. First operand 141536 states and 167648 transitions. cyclomatic complexity: 26373 Second operand 67 states.
[2020-05-30 20:22:27,764 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:22:27,764 INFO  L93              Difference]: Finished difference Result 173094 states and 203904 transitions.
[2020-05-30 20:22:27,764 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 97 states. 
[2020-05-30 20:22:27,765 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 173094 states and 203904 transitions.
[2020-05-30 20:22:28,262 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 168
[2020-05-30 20:22:28,582 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 173094 states to 75391 states and 91784 transitions.
[2020-05-30 20:22:28,582 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 132
[2020-05-30 20:22:28,583 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 132
[2020-05-30 20:22:28,583 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 75391 states and 91784 transitions.
[2020-05-30 20:22:28,648 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:22:28,648 INFO  L728         BuchiCegarLoop]: Abstraction has 75391 states and 91784 transitions.
[2020-05-30 20:22:28,683 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 75391 states and 91784 transitions.
[2020-05-30 20:22:29,150 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 75391 to 73669.
[2020-05-30 20:22:29,150 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 73669 states.
[2020-05-30 20:22:29,285 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 73669 states to 73669 states and 89643 transitions.
[2020-05-30 20:22:29,285 INFO  L751         BuchiCegarLoop]: Abstraction has 73669 states and 89643 transitions.
[2020-05-30 20:22:29,285 INFO  L631         BuchiCegarLoop]: Abstraction has 73669 states and 89643 transitions.
[2020-05-30 20:22:29,285 INFO  L445         BuchiCegarLoop]: ======== Iteration 50============
[2020-05-30 20:22:29,286 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 73669 states and 89643 transitions.
[2020-05-30 20:22:29,366 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 166
[2020-05-30 20:22:29,366 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:22:29,366 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:22:29,370 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:22:29,370 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0)
[L2913]                    gas := gas - 876;
[L2914]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2915]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2916]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2917]                    assume now >= 0;
[L2918]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2919-L2921]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0 && now <= fundingEndBlock_EPXCrowdsale[this]
[L2923]                    gas := gas - 20317;
[L2924]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2925]                    gas := gas - 20267;
[L2926]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2927]                    gas := gas - 409;
[L2928]                    CurrentStatus_EPXCrowdsale[this] := -1388231396;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:22:29,376 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:22:29,376 INFO  L82        PathProgramCache]: Analyzing trace with hash -557537621, now seen corresponding path program 1 times
[2020-05-30 20:22:29,377 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:22:29,401 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:22:29,933 INFO  L134       CoverageAnalysis]: Checked inductivity of 868 backedges. 3 proven. 200 refuted. 0 times theorem prover too weak. 665 trivial. 0 not checked.
[2020-05-30 20:22:29,933 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:22:29,934 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-30 20:22:29,934 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:22:29,934 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 20:22:29,934 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=20, Invalid=90, Unknown=0, NotChecked=0, Total=110
[2020-05-30 20:22:29,935 INFO  L87              Difference]: Start difference. First operand 73669 states and 89643 transitions. cyclomatic complexity: 16068 Second operand 11 states.
[2020-05-30 20:22:31,173 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:22:31,173 INFO  L93              Difference]: Finished difference Result 4852 states and 6777 transitions.
[2020-05-30 20:22:31,174 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-05-30 20:22:31,174 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4852 states and 6777 transitions.
[2020-05-30 20:22:31,182 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-05-30 20:22:31,182 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4852 states to 0 states and 0 transitions.
[2020-05-30 20:22:31,182 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-05-30 20:22:31,182 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-05-30 20:22:31,182 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-05-30 20:22:31,182 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:22:31,182 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-30 20:22:31,182 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-30 20:22:31,182 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-30 20:22:31,183 INFO  L445         BuchiCegarLoop]: ======== Iteration 51============
[2020-05-30 20:22:31,183 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-05-30 20:22:31,183 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-05-30 20:22:31,183 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-05-30 20:22:31,186 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 30.05 08:22:31 BasicIcfg
[2020-05-30 20:22:31,186 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-05-30 20:22:31,186 INFO  L168              Benchmark]: Toolchain (without parser) took 646765.32 ms. Allocated memory was 514.9 MB in the beginning and 7.0 GB in the end (delta: 6.5 GB). Free memory was 456.1 MB in the beginning and 3.0 GB in the end (delta: -2.5 GB). Peak memory consumption was 4.0 GB. Max. memory is 15.3 GB.
[2020-05-30 20:22:31,187 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.11 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-05-30 20:22:31,187 INFO  L168              Benchmark]: Boogie Preprocessor took 78.21 ms. Allocated memory is still 514.9 MB. Free memory was 456.1 MB in the beginning and 448.0 MB in the end (delta: 8.1 MB). Peak memory consumption was 8.1 MB. Max. memory is 15.3 GB.
[2020-05-30 20:22:31,187 INFO  L168              Benchmark]: UtopiaSpecLang took 50.20 ms. Allocated memory is still 514.9 MB. Free memory was 448.0 MB in the beginning and 441.3 MB in the end (delta: 6.7 MB). Peak memory consumption was 6.7 MB. Max. memory is 15.3 GB.
[2020-05-30 20:22:31,187 INFO  L168              Benchmark]: Boogie Printer took 12.14 ms. Allocated memory is still 514.9 MB. Free memory was 441.3 MB in the beginning and 438.6 MB in the end (delta: 2.7 MB). Peak memory consumption was 2.7 MB. Max. memory is 15.3 GB.
[2020-05-30 20:22:31,188 INFO  L168              Benchmark]: RCFGBuilder took 600.61 ms. Allocated memory was 514.9 MB in the beginning and 554.7 MB in the end (delta: 39.8 MB). Free memory was 438.6 MB in the beginning and 498.7 MB in the end (delta: -60.1 MB). Peak memory consumption was 96.6 MB. Max. memory is 15.3 GB.
[2020-05-30 20:22:31,188 INFO  L168              Benchmark]: UtopiaLTL2Aut took 46.38 ms. Allocated memory is still 554.7 MB. Free memory was 498.7 MB in the beginning and 490.0 MB in the end (delta: 8.6 MB). Peak memory consumption was 8.6 MB. Max. memory is 15.3 GB.
[2020-05-30 20:22:31,188 INFO  L168              Benchmark]: BÃ¼chi Program Product took 7692.33 ms. Allocated memory was 554.7 MB in the beginning and 1.8 GB in the end (delta: 1.3 GB). Free memory was 490.0 MB in the beginning and 1.3 GB in the end (delta: -769.7 MB). Peak memory consumption was 1.3 GB. Max. memory is 15.3 GB.
[2020-05-30 20:22:31,188 INFO  L168              Benchmark]: BlockEncodingV2 took 357.88 ms. Allocated memory is still 1.8 GB. Free memory was 1.3 GB in the beginning and 1.0 GB in the end (delta: 232.9 MB). Peak memory consumption was 232.9 MB. Max. memory is 15.3 GB.
[2020-05-30 20:22:31,189 INFO  L168              Benchmark]: BuchiAutomizer took 637924.86 ms. Allocated memory was 1.8 GB in the beginning and 7.0 GB in the end (delta: 5.2 GB). Free memory was 1.0 GB in the beginning and 3.0 GB in the end (delta: -2.0 GB). Peak memory consumption was 3.2 GB. Max. memory is 15.3 GB.
[2020-05-30 20:22:31,192 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    10557 locations, 38305 edges
  - StatisticsResult: Encoded RCFG
    10372 locations, 37228 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.11 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 78.21 ms. Allocated memory is still 514.9 MB. Free memory was 456.1 MB in the beginning and 448.0 MB in the end (delta: 8.1 MB). Peak memory consumption was 8.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 50.20 ms. Allocated memory is still 514.9 MB. Free memory was 448.0 MB in the beginning and 441.3 MB in the end (delta: 6.7 MB). Peak memory consumption was 6.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 12.14 ms. Allocated memory is still 514.9 MB. Free memory was 441.3 MB in the beginning and 438.6 MB in the end (delta: 2.7 MB). Peak memory consumption was 2.7 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 600.61 ms. Allocated memory was 514.9 MB in the beginning and 554.7 MB in the end (delta: 39.8 MB). Free memory was 438.6 MB in the beginning and 498.7 MB in the end (delta: -60.1 MB). Peak memory consumption was 96.6 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 46.38 ms. Allocated memory is still 554.7 MB. Free memory was 498.7 MB in the beginning and 490.0 MB in the end (delta: 8.6 MB). Peak memory consumption was 8.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 7692.33 ms. Allocated memory was 554.7 MB in the beginning and 1.8 GB in the end (delta: 1.3 GB). Free memory was 490.0 MB in the beginning and 1.3 GB in the end (delta: -769.7 MB). Peak memory consumption was 1.3 GB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 357.88 ms. Allocated memory is still 1.8 GB. Free memory was 1.3 GB in the beginning and 1.0 GB in the end (delta: 232.9 MB). Peak memory consumption was 232.9 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 637924.86 ms. Allocated memory was 1.8 GB in the beginning and 7.0 GB in the end (delta: 5.2 GB). Free memory was 1.0 GB in the beginning and 3.0 GB in the end (delta: -2.0 GB). Peak memory consumption was 3.2 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    6 locations, 20 edges
  - StatisticsResult: Initial RCFG
    1845 locations, 2319 edges
  - StatisticsResult: BuchiProgram size
    10557 locations, 38305 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 50 terminating modules (50 trivial, 0 deterministic, 0 nondeterministic). 50 modules have a trivial ranking function, the largest among these consists of 71 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 637.8s and 51 iterations.  TraceHistogramMax:8. Analysis of lassos took 25.4s. Construction of modules took 423.8s. BÃ¼chi inclusion checks took 109.6s. Highest rank in rank-based complementation 0. Minimization of det autom 50. Minimization of nondet autom 0. Automata minimization 36.5s AutomataMinimizationTime, 49 MinimizatonAttempts, 119195 StatesRemovedByMinimization, 43 NontrivialMinimizations. Non-live state removal took 33.9s Buchi closure took 0.0s. Biggest automaton had 196386 states and ocurred in iteration 43.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 554275 SDtfs, 1223731 SDslu, 1618670 SDs, 0 SdLazy, 3684916 SolverSat, 138518 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 423.8s Time	LassoAnalysisResults: nont0 unkn0 SFLI4 SFLT0 conc5 concLT0 SILN0 SILU41 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ( ( []( (call_(success_CorralChoice_EPXCrowdsale2)orral(success_CorralChoice_EPXCrowdsale2)hoice_EPX(success_CorralChoice_EPXCrowdsale2)rowdsale1) ==> ( <>(success_beneficiaryMultiSigWithdraw_EPX(success_CorralChoice_EPXCrowdsale2)rowdsale0) ) ) ) && ( <>(success_CorralChoice_EPXCrowdsale2) ) )&& ! ( ( <>(success_CorralChoice_EPXCrowdsale0) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
