This is Ultimate 0.1.24-9993c5c-m
[2020-05-30 20:22:32,880 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-05-30 20:22:32,881 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-05-30 20:22:32,891 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-05-30 20:22:32,892 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-05-30 20:22:32,893 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-05-30 20:22:32,894 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-05-30 20:22:32,896 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-05-30 20:22:32,897 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-05-30 20:22:32,899 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-05-30 20:22:32,900 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-05-30 20:22:32,900 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-05-30 20:22:32,901 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-05-30 20:22:32,903 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-05-30 20:22:32,904 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-05-30 20:22:32,905 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-05-30 20:22:32,906 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-05-30 20:22:32,907 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-05-30 20:22:32,909 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-05-30 20:22:32,911 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-05-30 20:22:32,912 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-05-30 20:22:32,913 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-05-30 20:22:32,915 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-05-30 20:22:32,915 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-05-30 20:22:32,916 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-05-30 20:22:32,917 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-05-30 20:22:32,917 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-05-30 20:22:32,918 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-05-30 20:22:32,918 INFO  L174        SettingsManager]: Resetting UtopiaLiveness preferences to default values
[2020-05-30 20:22:32,919 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-05-30 20:22:32,919 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-05-30 20:22:32,920 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-05-30 20:22:32,921 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-05-30 20:22:32,922 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-05-30 20:22:32,924 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-05-30 20:22:32,925 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-05-30 20:22:32,925 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-05-30 20:22:32,926 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-05-30 20:22:32,926 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-05-30 20:22:32,926 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-05-30 20:22:32,927 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-05-30 20:22:32,928 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-05-30 20:22:32,929 INFO  L98         SettingsManager]: Beginning loading settings from /Users/jon/Documents/Research/masterUltimate/SmartPulse/settings.epf
[2020-05-30 20:22:32,938 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-05-30 20:22:32,938 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-05-30 20:22:32,940 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-05-30 20:22:32,940 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-05-30 20:22:32,940 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/Users/jon/Documents/Research/devUltimate/ltl2ba
[2020-05-30 20:22:32,940 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-05-30 20:22:32,940 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-05-30 20:22:32,940 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-05-30 20:22:32,940 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-05-30 20:22:32,940 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-05-30 20:22:32,940 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-05-30 20:22:32,941 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-05-30 20:22:32,941 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-05-30 20:22:32,941 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-05-30 20:22:32,941 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-05-30 20:22:32,941 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-05-30 20:22:32,941 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-05-30 20:22:32,941 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-05-30 20:22:32,941 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-05-30 20:22:32,941 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-05-30 20:22:32,941 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-05-30 20:22:32,941 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-05-30 20:22:32,942 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-05-30 20:22:32,942 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-05-30 20:22:32,942 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-05-30 20:22:32,942 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-05-30 20:22:32,960 INFO  L81    nceAwareModelManager]: Repository-Root is: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T
[2020-05-30 20:22:32,971 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-05-30 20:22:32,973 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-05-30 20:22:32,974 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-05-30 20:22:32,974 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-05-30 20:22:32,975 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/EPXCrowdsale/inf-callback/L1-EPXCrowdsale.bpl
[2020-05-30 20:22:32,975 INFO  L111           BoogieParser]: Parsing: '/Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/EPXCrowdsale/inf-callback/L1-EPXCrowdsale.bpl'
[2020-05-30 20:22:33,039 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-05-30 20:22:33,040 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-05-30 20:22:33,040 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-05-30 20:22:33,040 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-05-30 20:22:33,040 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-05-30 20:22:33,053 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "L1-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 08:22:33" (1/1) ...
[2020-05-30 20:22:33,054 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "L1-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 08:22:33" (1/1) ...
[2020-05-30 20:22:33,079 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "L1-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 08:22:33" (1/1) ...
[2020-05-30 20:22:33,079 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "L1-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 08:22:33" (1/1) ...
[2020-05-30 20:22:33,095 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "L1-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 08:22:33" (1/1) ...
[2020-05-30 20:22:33,104 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "L1-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 08:22:33" (1/1) ...
[2020-05-30 20:22:33,111 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "L1-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 08:22:33" (1/1) ...
[2020-05-30 20:22:33,117 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-05-30 20:22:33,118 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-05-30 20:22:33,118 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-05-30 20:22:33,120 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-05-30 20:22:33,123 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "L1-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 08:22:33" (1/1) ...
[2020-05-30 20:22:33,134 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: <>(finished(send(from, to, amt), to == user && amt == fsum(EPXCrowdsale.buy, 2, msg.sender == user)))
[2020-05-30 20:22:33,139 INFO  L979   opiaSpecLangObserver]: Successfully lexed: <>(finished(send(from, to, amt), to == user && amt == fsum(EPXCrowdsale.buy, 2, msg.sender == user)))
[2020-05-30 20:22:33,144 INFO  L981   opiaSpecLangObserver]: Successfully parsed: <>(finished(send(from, to, amt), to == user && amt == fsum(EPXCrowdsale.buy, 2, msg.sender == user)))
[2020-05-30 20:22:33,147 INFO  L599   opiaSpecLangObserver]: Parsed msg.sender==user to BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,buy_EPXCrowdsale>],IdentifierExpression[user,GLOBAL]]
[2020-05-30 20:22:33,149 INFO  L599   opiaSpecLangObserver]: Parsed ( to==user && amount==fsum_buy_EPXCrowdsale_2_0 ) to BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[to,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[user,GLOBAL]],BinaryExpression[COMPEQ,IdentifierExpression[amount,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[fsum_buy_EPXCrowdsale_2_0,GLOBAL]]]
[2020-05-30 20:22:33,149 INFO  L968   opiaSpecLangObserver]: Compiling: <>(finished(send(from, to, amt), to == user && amt == fsum(EPXCrowdsale.buy, 2, msg.sender == user)))
[2020-05-30 20:22:33,149 INFO  L970   opiaSpecLangObserver]: Compiled to ( <>AP(success_send__success0) )
[2020-05-30 20:22:33,149 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: <>(finished(EPXCrowdsale.refund, msg.sender == user))
[2020-05-30 20:22:33,150 INFO  L979   opiaSpecLangObserver]: Successfully lexed: <>(finished(EPXCrowdsale.refund, msg.sender == user))
[2020-05-30 20:22:33,150 INFO  L981   opiaSpecLangObserver]: Successfully parsed: <>(finished(EPXCrowdsale.refund, msg.sender == user))
[2020-05-30 20:22:33,151 INFO  L599   opiaSpecLangObserver]: Parsed msg.sender==user to BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,refund_EPXCrowdsale>],IdentifierExpression[user,GLOBAL]]
[2020-05-30 20:22:33,152 INFO  L968   opiaSpecLangObserver]: Compiling: <>(finished(EPXCrowdsale.refund, msg.sender == user))
[2020-05-30 20:22:33,152 INFO  L970   opiaSpecLangObserver]: Compiled to ( <>AP(success_refund_EPXCrowdsale0) )
Executed UtopiaSpecLang
[2020-05-30 20:22:33,159 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 08:22:33 PropertyContainer
[2020-05-30 20:22:33,159 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-05-30 20:22:33,160 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-05-30 20:22:33,160 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-05-30 20:22:33,160 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-05-30 20:22:33,160 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "L1-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 08:22:33" (1/2) ...
[2020-05-30 20:22:33,161 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-30 20:22:33,161 INFO  L120   oogiePrinterObserver]: Writing to file /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-30 20:22:33,172 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 08:22:33" (2/2) ...
[2020-05-30 20:22:33,172 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-05-30 20:22:33,172 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-05-30 20:22:33,172 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-05-30 20:22:33,172 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-05-30 20:22:33,173 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "L1-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 08:22:33" (1/2) ...
[2020-05-30 20:22:33,215 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-05-30 20:22:33,215 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned_NoBaseCtor__success
[2020-05-30 20:22:33,215 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned
[2020-05-30 20:22:33,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned
[2020-05-30 20:22:33,216 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMath_safeMath_NoBaseCtor__success
[2020-05-30 20:22:33,216 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMath_safeMath
[2020-05-30 20:22:33,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMath_safeMath
[2020-05-30 20:22:33,216 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul_safeMath__success
[2020-05-30 20:22:33,216 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv_safeMath__success
[2020-05-30 20:22:33,216 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub_safeMath__success
[2020-05-30 20:22:33,217 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd_safeMath__success
[2020-05-30 20:22:33,217 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAssert_safeMath__success
[2020-05-30 20:22:33,217 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-05-30 20:22:33,217 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-05-30 20:22:33,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-05-30 20:22:33,217 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf_StandardToken
[2020-05-30 20:22:33,217 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer_StandardToken
[2020-05-30 20:22:33,217 INFO  L130     BoogieDeclarations]: Found specification of procedure EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success
[2020-05-30 20:22:33,217 INFO  L130     BoogieDeclarations]: Found specification of procedure EPXCrowdsale_EPXCrowdsale
[2020-05-30 20:22:33,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure EPXCrowdsale_EPXCrowdsale
[2020-05-30 20:22:33,218 INFO  L130     BoogieDeclarations]: Found specification of procedure initialEPXSupply_EPXCrowdsale
[2020-05-30 20:22:33,218 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialEPXSupply_EPXCrowdsale
[2020-05-30 20:22:33,218 INFO  L130     BoogieDeclarations]: Found specification of procedure remainingEPXSupply_EPXCrowdsale
[2020-05-30 20:22:33,218 INFO  L138     BoogieDeclarations]: Found implementation of procedure remainingEPXSupply_EPXCrowdsale
[2020-05-30 20:22:33,218 INFO  L130     BoogieDeclarations]: Found specification of procedure SetupCrowdsale_EPXCrowdsale
[2020-05-30 20:22:33,218 INFO  L138     BoogieDeclarations]: Found implementation of procedure SetupCrowdsale_EPXCrowdsale
[2020-05-30 20:22:33,218 INFO  L130     BoogieDeclarations]: Found specification of procedure checkPrice_EPXCrowdsale__success
[2020-05-30 20:22:33,218 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_EPXCrowdsale__success
[2020-05-30 20:22:33,218 INFO  L130     BoogieDeclarations]: Found specification of procedure buy_EPXCrowdsale
[2020-05-30 20:22:33,218 INFO  L138     BoogieDeclarations]: Found implementation of procedure buy_EPXCrowdsale
[2020-05-30 20:22:33,218 INFO  L130     BoogieDeclarations]: Found specification of procedure beneficiaryMultiSigWithdraw_EPXCrowdsale
[2020-05-30 20:22:33,218 INFO  L138     BoogieDeclarations]: Found implementation of procedure beneficiaryMultiSigWithdraw_EPXCrowdsale
[2020-05-30 20:22:33,218 INFO  L130     BoogieDeclarations]: Found specification of procedure checkGoalReached_EPXCrowdsale
[2020-05-30 20:22:33,219 INFO  L138     BoogieDeclarations]: Found implementation of procedure checkGoalReached_EPXCrowdsale
[2020-05-30 20:22:33,219 INFO  L130     BoogieDeclarations]: Found specification of procedure refund_EPXCrowdsale
[2020-05-30 20:22:33,219 INFO  L138     BoogieDeclarations]: Found implementation of procedure refund_EPXCrowdsale
[2020-05-30 20:22:33,219 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-05-30 20:22:33,219 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-05-30 20:22:33,219 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-05-30 20:22:33,219 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-05-30 20:22:33,219 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_owned
[2020-05-30 20:22:33,219 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_owned
[2020-05-30 20:22:33,219 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_safeMath
[2020-05-30 20:22:33,219 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_safeMath
[2020-05-30 20:22:33,219 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-05-30 20:22:33,219 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-05-30 20:22:33,220 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_EPXCrowdsale
[2020-05-30 20:22:33,220 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-05-30 20:22:33,220 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-05-30 20:22:33,220 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned_NoBaseCtor__fail
[2020-05-30 20:22:33,220 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned__success
[2020-05-30 20:22:33,220 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned__fail
[2020-05-30 20:22:33,220 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMath_safeMath_NoBaseCtor__fail
[2020-05-30 20:22:33,220 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMath_safeMath__success
[2020-05-30 20:22:33,220 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMath_safeMath__fail
[2020-05-30 20:22:33,220 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul_safeMath__fail
[2020-05-30 20:22:33,220 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv_safeMath__fail
[2020-05-30 20:22:33,220 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub_safeMath__fail
[2020-05-30 20:22:33,220 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd_safeMath__fail
[2020-05-30 20:22:33,221 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAssert_safeMath__fail
[2020-05-30 20:22:33,221 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-05-30 20:22:33,221 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-05-30 20:22:33,221 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-05-30 20:22:33,221 INFO  L130     BoogieDeclarations]: Found specification of procedure EPXCrowdsale_EPXCrowdsale_NoBaseCtor__fail
[2020-05-30 20:22:33,221 INFO  L130     BoogieDeclarations]: Found specification of procedure EPXCrowdsale_EPXCrowdsale__success
[2020-05-30 20:22:33,221 INFO  L130     BoogieDeclarations]: Found specification of procedure EPXCrowdsale_EPXCrowdsale__fail
[2020-05-30 20:22:33,221 INFO  L130     BoogieDeclarations]: Found specification of procedure initialEPXSupply_EPXCrowdsale__success
[2020-05-30 20:22:33,221 INFO  L130     BoogieDeclarations]: Found specification of procedure initialEPXSupply_EPXCrowdsale__fail
[2020-05-30 20:22:33,221 INFO  L130     BoogieDeclarations]: Found specification of procedure remainingEPXSupply_EPXCrowdsale__success
[2020-05-30 20:22:33,222 INFO  L130     BoogieDeclarations]: Found specification of procedure remainingEPXSupply_EPXCrowdsale__fail
[2020-05-30 20:22:33,222 INFO  L130     BoogieDeclarations]: Found specification of procedure SetupCrowdsale_EPXCrowdsale__success
[2020-05-30 20:22:33,222 INFO  L130     BoogieDeclarations]: Found specification of procedure SetupCrowdsale_EPXCrowdsale__fail
[2020-05-30 20:22:33,222 INFO  L130     BoogieDeclarations]: Found specification of procedure checkPrice_EPXCrowdsale__fail
[2020-05-30 20:22:33,222 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_EPXCrowdsale__fail
[2020-05-30 20:22:33,222 INFO  L130     BoogieDeclarations]: Found specification of procedure buy_EPXCrowdsale__success
[2020-05-30 20:22:33,222 INFO  L130     BoogieDeclarations]: Found specification of procedure buy_EPXCrowdsale__fail
[2020-05-30 20:22:33,222 INFO  L130     BoogieDeclarations]: Found specification of procedure beneficiaryMultiSigWithdraw_EPXCrowdsale__success
[2020-05-30 20:22:33,222 INFO  L130     BoogieDeclarations]: Found specification of procedure beneficiaryMultiSigWithdraw_EPXCrowdsale__fail
[2020-05-30 20:22:33,222 INFO  L130     BoogieDeclarations]: Found specification of procedure checkGoalReached_EPXCrowdsale__success
[2020-05-30 20:22:33,223 INFO  L130     BoogieDeclarations]: Found specification of procedure checkGoalReached_EPXCrowdsale__fail
[2020-05-30 20:22:33,223 INFO  L130     BoogieDeclarations]: Found specification of procedure refund_EPXCrowdsale__success
[2020-05-30 20:22:33,223 INFO  L130     BoogieDeclarations]: Found specification of procedure refund_EPXCrowdsale__fail
[2020-05-30 20:22:33,223 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-05-30 20:22:33,223 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-05-30 20:22:33,223 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-05-30 20:22:33,223 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-05-30 20:22:33,223 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-05-30 20:22:33,223 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-05-30 20:22:33,223 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned_NoBaseCtor__fail
[2020-05-30 20:22:33,223 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned_NoBaseCtor__success
[2020-05-30 20:22:33,223 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned__fail
[2020-05-30 20:22:33,223 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned__success
[2020-05-30 20:22:33,223 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMath_safeMath_NoBaseCtor__fail
[2020-05-30 20:22:33,224 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMath_safeMath_NoBaseCtor__success
[2020-05-30 20:22:33,224 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMath_safeMath__fail
[2020-05-30 20:22:33,224 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMath_safeMath__success
[2020-05-30 20:22:33,224 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul_safeMath__fail
[2020-05-30 20:22:33,224 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul_safeMath__success
[2020-05-30 20:22:33,224 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv_safeMath__fail
[2020-05-30 20:22:33,224 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv_safeMath__success
[2020-05-30 20:22:33,224 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub_safeMath__fail
[2020-05-30 20:22:33,224 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub_safeMath__success
[2020-05-30 20:22:33,225 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd_safeMath__fail
[2020-05-30 20:22:33,225 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd_safeMath__success
[2020-05-30 20:22:33,225 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAssert_safeMath__fail
[2020-05-30 20:22:33,225 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAssert_safeMath__success
[2020-05-30 20:22:33,225 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-05-30 20:22:33,225 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-05-30 20:22:33,225 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-05-30 20:22:33,225 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-05-30 20:22:33,226 INFO  L138     BoogieDeclarations]: Found implementation of procedure EPXCrowdsale_EPXCrowdsale_NoBaseCtor__fail
[2020-05-30 20:22:33,226 INFO  L138     BoogieDeclarations]: Found implementation of procedure EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success
[2020-05-30 20:22:33,226 INFO  L138     BoogieDeclarations]: Found implementation of procedure EPXCrowdsale_EPXCrowdsale__fail
[2020-05-30 20:22:33,226 INFO  L138     BoogieDeclarations]: Found implementation of procedure EPXCrowdsale_EPXCrowdsale__success
[2020-05-30 20:22:33,226 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialEPXSupply_EPXCrowdsale__fail
[2020-05-30 20:22:33,226 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialEPXSupply_EPXCrowdsale__success
[2020-05-30 20:22:33,226 INFO  L138     BoogieDeclarations]: Found implementation of procedure remainingEPXSupply_EPXCrowdsale__fail
[2020-05-30 20:22:33,226 INFO  L138     BoogieDeclarations]: Found implementation of procedure remainingEPXSupply_EPXCrowdsale__success
[2020-05-30 20:22:33,227 INFO  L138     BoogieDeclarations]: Found implementation of procedure SetupCrowdsale_EPXCrowdsale__fail
[2020-05-30 20:22:33,227 INFO  L138     BoogieDeclarations]: Found implementation of procedure SetupCrowdsale_EPXCrowdsale__success
[2020-05-30 20:22:33,227 INFO  L138     BoogieDeclarations]: Found implementation of procedure checkPrice_EPXCrowdsale__fail
[2020-05-30 20:22:33,227 INFO  L138     BoogieDeclarations]: Found implementation of procedure checkPrice_EPXCrowdsale__success
[2020-05-30 20:22:33,227 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_EPXCrowdsale__fail
[2020-05-30 20:22:33,227 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_EPXCrowdsale__success
[2020-05-30 20:22:33,227 INFO  L138     BoogieDeclarations]: Found implementation of procedure buy_EPXCrowdsale__fail
[2020-05-30 20:22:33,227 INFO  L138     BoogieDeclarations]: Found implementation of procedure buy_EPXCrowdsale__success
[2020-05-30 20:22:33,227 INFO  L138     BoogieDeclarations]: Found implementation of procedure beneficiaryMultiSigWithdraw_EPXCrowdsale__fail
[2020-05-30 20:22:33,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure beneficiaryMultiSigWithdraw_EPXCrowdsale__success
[2020-05-30 20:22:33,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure checkGoalReached_EPXCrowdsale__fail
[2020-05-30 20:22:33,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure checkGoalReached_EPXCrowdsale__success
[2020-05-30 20:22:33,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure refund_EPXCrowdsale__fail
[2020-05-30 20:22:33,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure refund_EPXCrowdsale__success
[2020-05-30 20:22:33,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-05-30 20:22:33,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-05-30 20:22:33,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-05-30 20:22:33,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-05-30 20:22:33,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-05-30 20:22:33,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-05-30 20:22:33,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-05-30 20:22:33,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-05-30 20:22:33,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_owned
[2020-05-30 20:22:33,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_owned
[2020-05-30 20:22:33,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_safeMath
[2020-05-30 20:22:33,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_safeMath
[2020-05-30 20:22:33,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-05-30 20:22:33,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-05-30 20:22:33,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_EPXCrowdsale
[2020-05-30 20:22:33,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-05-30 20:22:33,231 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-05-30 20:22:33,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-05-30 20:22:33,397 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 20:22:33,414 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 20:22:33,685 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 20:22:33,741 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 20:22:33,775 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-05-30 20:22:33,775 INFO  L286             CfgBuilder]: Removed 4 assue(true) statements.
[2020-05-30 20:22:33,776 INFO  L202        PluginConnector]: Adding new model L1-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 08:22:33 BoogieIcfgContainer
[2020-05-30 20:22:33,776 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 08:22:33" (2/2) ...
[2020-05-30 20:22:33,777 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-05-30 20:22:33,777 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@db800b2 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 08:22:33, skipping insertion in model container
[2020-05-30 20:22:33,777 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-05-30 20:22:33,777 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-05-30 20:22:33,777 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-05-30 20:22:33,778 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-05-30 20:22:33,778 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "L1-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 08:22:33" (1/3) ...
[2020-05-30 20:22:33,779 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@70f5592c and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 08:22:33, skipping insertion in model container
[2020-05-30 20:22:33,779 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 08:22:33" (2/3) ...
No working directory specified, using /Users/jon/Documents/Research/devUltimate/ltl2ba
Starting monitored process 1 with /Users/jon/Documents/Research/devUltimate/ltl2ba -f  ( <>a ) && ! ( ( <>b ) )  (exit command is null, workingDir is null)
[2020-05-30 20:22:33,822 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 08:22:33 NWAContainer
[2020-05-30 20:22:33,823 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-05-30 20:22:33,823 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-05-30 20:22:33,823 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-05-30 20:22:33,823 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-05-30 20:22:33,824 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "L1-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 08:22:33" (3/4) ...
[2020-05-30 20:22:33,825 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@3352f1a3 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 08:22:33, skipping insertion in model container
[2020-05-30 20:22:33,825 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 08:22:33" (4/4) ...
[2020-05-30 20:22:33,828 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-05-30 20:22:33,830 INFO  L110   BuchiProductObserver]: Initial RCFG 1829 locations, 2301 edges
[2020-05-30 20:22:33,831 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-05-30 20:22:33,840 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-05-30 20:22:35,144 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-05-30 20:22:35,150 INFO  L110   BuchiProductObserver]: BuchiProgram size 4199 locations, 7206 edges
[2020-05-30 20:22:35,150 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 08:22:35 BoogieIcfgContainer
[2020-05-30 20:22:35,150 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-05-30 20:22:35,150 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-05-30 20:22:35,151 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-05-30 20:22:35,152 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-05-30 20:22:35,153 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 08:22:35" (1/1) ...
[2020-05-30 20:22:35,232 INFO  L313           BlockEncoder]: Initial Icfg 4199 locations, 7206 edges
[2020-05-30 20:22:35,233 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-05-30 20:22:35,233 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-05-30 20:22:35,234 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-05-30 20:22:35,234 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-05-30 20:22:35,248 INFO  L70    emoveInfeasibleEdges]: Removed 111 edges and 12 locations because of local infeasibility
[2020-05-30 20:22:35,258 INFO  L70        RemoveSinkStates]: Removed 69 edges and 46 locations by removing sink states
[2020-05-30 20:22:35,269 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-05-30 20:22:35,275 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-05-30 20:22:35,279 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-05-30 20:22:35,280 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-05-30 20:22:35,286 INFO  L313           BlockEncoder]: Encoded RCFG 4125 locations, 7003 edges
[2020-05-30 20:22:35,286 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 30.05 08:22:35 BasicIcfg
[2020-05-30 20:22:35,286 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-05-30 20:22:35,286 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-05-30 20:22:35,286 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-05-30 20:22:35,289 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-05-30 20:22:35,289 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 20:22:35,289 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L1-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 08:22:33" (1/6) ...
[2020-05-30 20:22:35,290 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@44276cc2 and model type L1-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 30.05 08:22:35, skipping insertion in model container
[2020-05-30 20:22:35,290 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 20:22:35,290 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 08:22:33" (2/6) ...
[2020-05-30 20:22:35,290 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@44276cc2 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 30.05 08:22:35, skipping insertion in model container
[2020-05-30 20:22:35,291 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 20:22:35,291 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L1-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 08:22:33" (3/6) ...
[2020-05-30 20:22:35,291 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@44276cc2 and model type L1-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 30.05 08:22:35, skipping insertion in model container
[2020-05-30 20:22:35,291 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 20:22:35,291 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 08:22:33" (4/6) ...
[2020-05-30 20:22:35,291 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@44276cc2 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 30.05 08:22:35, skipping insertion in model container
[2020-05-30 20:22:35,291 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 20:22:35,291 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 08:22:35" (5/6) ...
[2020-05-30 20:22:35,291 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@44276cc2 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 30.05 08:22:35, skipping insertion in model container
[2020-05-30 20:22:35,291 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 20:22:35,292 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 30.05 08:22:35" (6/6) ...
[2020-05-30 20:22:35,293 INFO  L404   chiAutomizerObserver]: Analyzing ICFG L1-EPXCrowdsale.bpl_BEv2
[2020-05-30 20:22:35,327 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-05-30 20:22:35,327 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-05-30 20:22:35,327 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-05-30 20:22:35,327 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-05-30 20:22:35,327 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-05-30 20:22:35,327 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-05-30 20:22:35,327 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-05-30 20:22:35,327 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-05-30 20:22:35,328 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-05-30 20:22:35,359 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4125 states.
[2020-05-30 20:22:35,422 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 142
[2020-05-30 20:22:35,422 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:22:35,422 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:22:35,431 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:22:35,431 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:22:35,431 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-05-30 20:22:35,431 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4125 states.
[2020-05-30 20:22:35,460 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 142
[2020-05-30 20:22:35,460 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:22:35,460 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:22:35,462 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:22:35,462 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_refund_EPXCrowdsale0 := false;
[L7]                 fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                 success_send__success0 := false;
[L7]     CALL        call main();
[L7]                 havoc user;
[L3957]              assume null == 0;
[L3958]  CALL        call this := FreshRefGenerator__success();
[L1098]              havoc newRef;
[L1099]              assume Alloc[newRef] == false;
[L1100]              Alloc[newRef] := true;
[L1101]              assume newRef != null;
[L3958]  RET         call this := FreshRefGenerator__success();
[L3959]              assume now >= 0;
[L3960]              assume DType[this] == EPXCrowdsale;
[L3961]              gas := gas - 53000;
[L3962]  CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]               havoc __exception;
[L342]               revert := false;
[L343]   COND FALSE  !(__exception)
[L376]   CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]              assume msgsender_MSG != null;
[L1119]              Balance[this] := 0;
[L1120]              owner_owned[this] := null;
[L1121]              owner_owned[this] := msgsender_MSG;
[L1139]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]  COND FALSE  !(revert)
[L1891]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]  COND TRUE   revert
[L376]   RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]               assume !revert && gas >= 0;
[L3962]  RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]              assume !revert && gas >= 0;

Loop:
[L3966]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]              havoc msgsender_MSG;
[L3864]              havoc msgvalue_MSG;
[L3865]              havoc choice;
[L3866]              havoc initialEPXtokenCount_s286;
[L3867]              havoc remainingEPXtokenCount_s299;
[L3868]              havoc _fundingStartBlock_s391;
[L3869]              havoc _fundingEndBlock_s391;
[L3870]              havoc response_s391;
[L3871]              havoc _amount_s558;
[L3872]              havoc tmpNow;
[L3873]              havoc gas;
[L3874]              assume gas > 4000000 && gas <= 8000000;
[L3875]              tmpNow := now;
[L3876]              havoc now;
[L3877]              assume now > tmpNow;
[L3878]              assume msgsender_MSG != null;
[L3879]              assume DType[msgsender_MSG] != owned;
[L3880]              assume DType[msgsender_MSG] != safeMath;
[L3881]              assume DType[msgsender_MSG] != StandardToken;
[L3882]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]              Alloc[msgsender_MSG] := true;
[L3884]  COND TRUE   choice == 7
[L3886]              gas := gas - 21000;
[L3887]  COND FALSE  !(gas >= 0)
[L3966]  RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:22:35,480 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:22:35,480 INFO  L82        PathProgramCache]: Analyzing trace with hash -1848197135, now seen corresponding path program 1 times
[2020-05-30 20:22:35,484 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:22:35,510 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:22:35,554 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-30 20:22:35,556 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:22:35,557 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-30 20:22:35,560 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:22:35,785 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 20:22:35,786 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-30 20:22:35,787 INFO  L87              Difference]: Start difference. First operand 4125 states. Second operand 4 states.
[2020-05-30 20:22:36,379 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:22:36,379 INFO  L93              Difference]: Finished difference Result 3551 states and 4118 transitions.
[2020-05-30 20:22:36,379 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-30 20:22:36,381 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3551 states and 4118 transitions.
[2020-05-30 20:22:36,405 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 142
[2020-05-30 20:22:36,441 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3551 states to 3551 states and 4118 transitions.
[2020-05-30 20:22:36,442 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-05-30 20:22:36,442 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 89
[2020-05-30 20:22:36,443 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3551 states and 4118 transitions.
[2020-05-30 20:22:36,454 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:22:36,454 INFO  L728         BuchiCegarLoop]: Abstraction has 3551 states and 4118 transitions.
[2020-05-30 20:22:36,473 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3551 states and 4118 transitions.
[2020-05-30 20:22:36,530 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3551 to 3551.
[2020-05-30 20:22:36,531 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3551 states.
[2020-05-30 20:22:36,537 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3551 states to 3551 states and 4118 transitions.
[2020-05-30 20:22:36,538 INFO  L751         BuchiCegarLoop]: Abstraction has 3551 states and 4118 transitions.
[2020-05-30 20:22:36,538 INFO  L631         BuchiCegarLoop]: Abstraction has 3551 states and 4118 transitions.
[2020-05-30 20:22:36,538 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-05-30 20:22:36,538 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3551 states and 4118 transitions.
[2020-05-30 20:22:36,547 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 142
[2020-05-30 20:22:36,547 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:22:36,547 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:22:36,549 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:22:36,549 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND TRUE   revert
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND TRUE   !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0)
[L3026]                    revert := true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND TRUE   !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0)
[L3026]                    revert := true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:22:36,553 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:22:36,554 INFO  L82        PathProgramCache]: Analyzing trace with hash -155380436, now seen corresponding path program 1 times
[2020-05-30 20:22:36,554 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:22:36,567 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:22:36,588 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-30 20:22:36,588 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:22:36,588 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 20:22:36,590 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:22:36,590 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 20:22:36,590 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 20:22:36,590 INFO  L87              Difference]: Start difference. First operand 3551 states and 4118 transitions. cyclomatic complexity: 573 Second operand 3 states.
[2020-05-30 20:22:36,684 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:22:36,684 INFO  L93              Difference]: Finished difference Result 4299 states and 5017 transitions.
[2020-05-30 20:22:36,684 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 20:22:36,684 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4299 states and 5017 transitions.
[2020-05-30 20:22:36,700 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 156
[2020-05-30 20:22:36,721 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4299 states to 4299 states and 5017 transitions.
[2020-05-30 20:22:36,721 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 157
[2020-05-30 20:22:36,722 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 157
[2020-05-30 20:22:36,722 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4299 states and 5017 transitions.
[2020-05-30 20:22:36,731 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:22:36,731 INFO  L728         BuchiCegarLoop]: Abstraction has 4299 states and 5017 transitions.
[2020-05-30 20:22:36,738 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4299 states and 5017 transitions.
[2020-05-30 20:22:36,797 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4299 to 4027.
[2020-05-30 20:22:36,797 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4027 states.
[2020-05-30 20:22:36,803 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4027 states to 4027 states and 4695 transitions.
[2020-05-30 20:22:36,803 INFO  L751         BuchiCegarLoop]: Abstraction has 4027 states and 4695 transitions.
[2020-05-30 20:22:36,803 INFO  L631         BuchiCegarLoop]: Abstraction has 4027 states and 4695 transitions.
[2020-05-30 20:22:36,803 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-05-30 20:22:36,803 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4027 states and 4695 transitions.
[2020-05-30 20:22:36,811 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 156
[2020-05-30 20:22:36,811 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:22:36,811 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:22:36,812 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:22:36,812 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND TRUE   !(msgsender_MSG == owner_owned[this])
[L3670]                    revert := true;
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND TRUE   revert
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND TRUE   !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0)
[L3026]                    revert := true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND TRUE   !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0)
[L3026]                    revert := true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:22:36,818 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:22:36,818 INFO  L82        PathProgramCache]: Analyzing trace with hash 1577762769, now seen corresponding path program 1 times
[2020-05-30 20:22:36,818 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:22:36,832 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:22:36,887 INFO  L134       CoverageAnalysis]: Checked inductivity of 18 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 18 trivial. 0 not checked.
[2020-05-30 20:22:36,887 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:22:36,887 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-05-30 20:22:36,887 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:22:36,888 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-30 20:22:36,888 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-05-30 20:22:36,888 INFO  L87              Difference]: Start difference. First operand 4027 states and 4695 transitions. cyclomatic complexity: 674 Second operand 7 states.
[2020-05-30 20:22:37,023 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:22:37,024 INFO  L93              Difference]: Finished difference Result 4029 states and 4694 transitions.
[2020-05-30 20:22:37,024 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-05-30 20:22:37,024 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4029 states and 4694 transitions.
[2020-05-30 20:22:37,036 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 156
[2020-05-30 20:22:37,053 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4029 states to 4021 states and 4686 transitions.
[2020-05-30 20:22:37,054 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 138
[2020-05-30 20:22:37,054 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 138
[2020-05-30 20:22:37,054 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4021 states and 4686 transitions.
[2020-05-30 20:22:37,059 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:22:37,059 INFO  L728         BuchiCegarLoop]: Abstraction has 4021 states and 4686 transitions.
[2020-05-30 20:22:37,063 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4021 states and 4686 transitions.
[2020-05-30 20:22:37,097 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4021 to 4021.
[2020-05-30 20:22:37,097 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4021 states.
[2020-05-30 20:22:37,102 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4021 states to 4021 states and 4686 transitions.
[2020-05-30 20:22:37,102 INFO  L751         BuchiCegarLoop]: Abstraction has 4021 states and 4686 transitions.
[2020-05-30 20:22:37,103 INFO  L631         BuchiCegarLoop]: Abstraction has 4021 states and 4686 transitions.
[2020-05-30 20:22:37,103 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-05-30 20:22:37,103 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4021 states and 4686 transitions.
[2020-05-30 20:22:37,108 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 156
[2020-05-30 20:22:37,109 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:22:37,109 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:22:37,110 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:22:37,110 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND TRUE   !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0)
[L3026]                    revert := true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND TRUE   !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0)
[L3026]                    revert := true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:22:37,112 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:22:37,112 INFO  L82        PathProgramCache]: Analyzing trace with hash 70265817, now seen corresponding path program 1 times
[2020-05-30 20:22:37,113 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:22:37,128 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:22:37,154 INFO  L134       CoverageAnalysis]: Checked inductivity of 18 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 18 trivial. 0 not checked.
[2020-05-30 20:22:37,154 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:22:37,154 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 20:22:37,154 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:22:37,155 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 20:22:37,155 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 20:22:37,155 INFO  L87              Difference]: Start difference. First operand 4021 states and 4686 transitions. cyclomatic complexity: 671 Second operand 3 states.
[2020-05-30 20:22:37,233 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:22:37,234 INFO  L93              Difference]: Finished difference Result 4363 states and 4948 transitions.
[2020-05-30 20:22:37,234 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 20:22:37,234 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4363 states and 4948 transitions.
[2020-05-30 20:22:37,246 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 146
[2020-05-30 20:22:37,263 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4363 states to 4089 states and 4616 transitions.
[2020-05-30 20:22:37,263 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 138
[2020-05-30 20:22:37,263 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 138
[2020-05-30 20:22:37,263 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4089 states and 4616 transitions.
[2020-05-30 20:22:37,268 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:22:37,268 INFO  L728         BuchiCegarLoop]: Abstraction has 4089 states and 4616 transitions.
[2020-05-30 20:22:37,273 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4089 states and 4616 transitions.
[2020-05-30 20:22:37,308 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4089 to 3787.
[2020-05-30 20:22:37,308 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3787 states.
[2020-05-30 20:22:37,315 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3787 states to 3787 states and 4249 transitions.
[2020-05-30 20:22:37,315 INFO  L751         BuchiCegarLoop]: Abstraction has 3787 states and 4249 transitions.
[2020-05-30 20:22:37,315 INFO  L631         BuchiCegarLoop]: Abstraction has 3787 states and 4249 transitions.
[2020-05-30 20:22:37,315 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-05-30 20:22:37,315 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3787 states and 4249 transitions.
[2020-05-30 20:22:37,325 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 144
[2020-05-30 20:22:37,325 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:22:37,325 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:22:37,327 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:22:37,328 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND FALSE  !(Balance[from] >= amount)
[L3644]                    success := false;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND FALSE  !(Balance[from] >= amount)
[L3644]                    success := false;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:22:37,331 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:22:37,331 INFO  L82        PathProgramCache]: Analyzing trace with hash -742217884, now seen corresponding path program 1 times
[2020-05-30 20:22:37,332 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:22:37,355 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:22:37,426 INFO  L134       CoverageAnalysis]: Checked inductivity of 18 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 18 trivial. 0 not checked.
[2020-05-30 20:22:37,427 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:22:37,427 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-30 20:22:37,427 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:22:37,427 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 20:22:37,427 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-30 20:22:37,427 INFO  L87              Difference]: Start difference. First operand 3787 states and 4249 transitions. cyclomatic complexity: 468 Second operand 4 states.
[2020-05-30 20:22:37,454 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:22:37,454 INFO  L93              Difference]: Finished difference Result 3805 states and 4267 transitions.
[2020-05-30 20:22:37,454 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-30 20:22:37,454 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3805 states and 4267 transitions.
[2020-05-30 20:22:37,464 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 144
[2020-05-30 20:22:37,478 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3805 states to 3801 states and 4263 transitions.
[2020-05-30 20:22:37,478 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 100
[2020-05-30 20:22:37,478 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 100
[2020-05-30 20:22:37,479 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3801 states and 4263 transitions.
[2020-05-30 20:22:37,482 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:22:37,483 INFO  L728         BuchiCegarLoop]: Abstraction has 3801 states and 4263 transitions.
[2020-05-30 20:22:37,488 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3801 states and 4263 transitions.
[2020-05-30 20:22:37,522 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3801 to 3801.
[2020-05-30 20:22:37,522 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3801 states.
[2020-05-30 20:22:37,527 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3801 states to 3801 states and 4263 transitions.
[2020-05-30 20:22:37,527 INFO  L751         BuchiCegarLoop]: Abstraction has 3801 states and 4263 transitions.
[2020-05-30 20:22:37,527 INFO  L631         BuchiCegarLoop]: Abstraction has 3801 states and 4263 transitions.
[2020-05-30 20:22:37,527 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-05-30 20:22:37,527 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3801 states and 4263 transitions.
[2020-05-30 20:22:37,532 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 144
[2020-05-30 20:22:37,532 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:22:37,532 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:22:37,534 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:22:37,534 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:22:37,536 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:22:37,537 INFO  L82        PathProgramCache]: Analyzing trace with hash 1091310698, now seen corresponding path program 1 times
[2020-05-30 20:22:37,537 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:22:37,556 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:22:37,617 INFO  L134       CoverageAnalysis]: Checked inductivity of 18 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 18 trivial. 0 not checked.
[2020-05-30 20:22:37,617 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:22:37,617 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-05-30 20:22:37,617 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:22:37,617 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-30 20:22:37,618 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=12, Invalid=30, Unknown=0, NotChecked=0, Total=42
[2020-05-30 20:22:37,618 INFO  L87              Difference]: Start difference. First operand 3801 states and 4263 transitions. cyclomatic complexity: 468 Second operand 7 states.
[2020-05-30 20:22:37,703 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:22:37,703 INFO  L93              Difference]: Finished difference Result 3823 states and 4285 transitions.
[2020-05-30 20:22:37,703 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-05-30 20:22:37,703 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3823 states and 4285 transitions.
[2020-05-30 20:22:37,711 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 144
[2020-05-30 20:22:37,723 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3823 states to 3823 states and 4285 transitions.
[2020-05-30 20:22:37,723 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 109
[2020-05-30 20:22:37,724 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 109
[2020-05-30 20:22:37,724 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3823 states and 4285 transitions.
[2020-05-30 20:22:37,728 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:22:37,728 INFO  L728         BuchiCegarLoop]: Abstraction has 3823 states and 4285 transitions.
[2020-05-30 20:22:37,732 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3823 states and 4285 transitions.
[2020-05-30 20:22:37,761 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3823 to 3809.
[2020-05-30 20:22:37,761 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3809 states.
[2020-05-30 20:22:37,766 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3809 states to 3809 states and 4271 transitions.
[2020-05-30 20:22:37,766 INFO  L751         BuchiCegarLoop]: Abstraction has 3809 states and 4271 transitions.
[2020-05-30 20:22:37,766 INFO  L631         BuchiCegarLoop]: Abstraction has 3809 states and 4271 transitions.
[2020-05-30 20:22:37,766 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-05-30 20:22:37,766 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3809 states and 4271 transitions.
[2020-05-30 20:22:37,770 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 144
[2020-05-30 20:22:37,770 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:22:37,770 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:22:37,772 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:22:37,772 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:22:37,775 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:22:37,775 INFO  L82        PathProgramCache]: Analyzing trace with hash 1327923234, now seen corresponding path program 1 times
[2020-05-30 20:22:37,776 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:22:37,795 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:22:37,856 INFO  L134       CoverageAnalysis]: Checked inductivity of 18 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 18 trivial. 0 not checked.
[2020-05-30 20:22:37,856 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:22:37,857 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-05-30 20:22:37,857 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:22:37,857 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 20:22:37,857 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-05-30 20:22:37,857 INFO  L87              Difference]: Start difference. First operand 3809 states and 4271 transitions. cyclomatic complexity: 468 Second operand 11 states.
[2020-05-30 20:22:39,682 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:22:39,682 INFO  L93              Difference]: Finished difference Result 4104 states and 4664 transitions.
[2020-05-30 20:22:39,683 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 20:22:39,683 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4104 states and 4664 transitions.
[2020-05-30 20:22:39,691 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 225
[2020-05-30 20:22:39,706 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4104 states to 4104 states and 4664 transitions.
[2020-05-30 20:22:39,706 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 153
[2020-05-30 20:22:39,707 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 153
[2020-05-30 20:22:39,707 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4104 states and 4664 transitions.
[2020-05-30 20:22:39,711 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:22:39,711 INFO  L728         BuchiCegarLoop]: Abstraction has 4104 states and 4664 transitions.
[2020-05-30 20:22:39,715 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4104 states and 4664 transitions.
[2020-05-30 20:22:39,750 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4104 to 3900.
[2020-05-30 20:22:39,750 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3900 states.
[2020-05-30 20:22:39,754 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3900 states to 3900 states and 4385 transitions.
[2020-05-30 20:22:39,755 INFO  L751         BuchiCegarLoop]: Abstraction has 3900 states and 4385 transitions.
[2020-05-30 20:22:39,755 INFO  L631         BuchiCegarLoop]: Abstraction has 3900 states and 4385 transitions.
[2020-05-30 20:22:39,755 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-05-30 20:22:39,755 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3900 states and 4385 transitions.
[2020-05-30 20:22:39,759 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 142
[2020-05-30 20:22:39,759 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:22:39,759 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:22:39,761 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:22:39,761 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -437875663;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]              havoc msgsender_MSG;
[L3864]              havoc msgvalue_MSG;
[L3865]              havoc choice;
[L3866]              havoc initialEPXtokenCount_s286;
[L3867]              havoc remainingEPXtokenCount_s299;
[L3868]              havoc _fundingStartBlock_s391;
[L3869]              havoc _fundingEndBlock_s391;
[L3870]              havoc response_s391;
[L3871]              havoc _amount_s558;
[L3872]              havoc tmpNow;
[L3873]              havoc gas;
[L3874]              assume gas > 4000000 && gas <= 8000000;
[L3875]              tmpNow := now;
[L3876]              havoc now;
[L3877]              assume now > tmpNow;
[L3878]              assume msgsender_MSG != null;
[L3879]              assume DType[msgsender_MSG] != owned;
[L3880]              assume DType[msgsender_MSG] != safeMath;
[L3881]              assume DType[msgsender_MSG] != StandardToken;
[L3882]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]              Alloc[msgsender_MSG] := true;
[L3884]  COND TRUE   choice == 7
[L3886]              gas := gas - 21000;
[L3887]  COND FALSE  !(gas >= 0)
[L3966]  RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:22:39,764 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:22:39,764 INFO  L82        PathProgramCache]: Analyzing trace with hash -479833169, now seen corresponding path program 1 times
[2020-05-30 20:22:39,764 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:22:39,781 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:22:39,849 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 1 proven. 28 refuted. 0 times theorem prover too weak. 22 trivial. 0 not checked.
[2020-05-30 20:22:39,849 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:22:39,849 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-05-30 20:22:39,850 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:22:39,850 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-30 20:22:39,850 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-05-30 20:22:39,850 INFO  L87              Difference]: Start difference. First operand 3900 states and 4385 transitions. cyclomatic complexity: 492 Second operand 10 states.
[2020-05-30 20:22:40,986 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:22:40,986 INFO  L93              Difference]: Finished difference Result 4175 states and 4765 transitions.
[2020-05-30 20:22:40,986 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-05-30 20:22:40,986 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4175 states and 4765 transitions.
[2020-05-30 20:22:40,992 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 223
[2020-05-30 20:22:41,004 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4175 states to 4175 states and 4765 transitions.
[2020-05-30 20:22:41,004 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 149
[2020-05-30 20:22:41,005 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 149
[2020-05-30 20:22:41,005 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4175 states and 4765 transitions.
[2020-05-30 20:22:41,008 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:22:41,008 INFO  L728         BuchiCegarLoop]: Abstraction has 4175 states and 4765 transitions.
[2020-05-30 20:22:41,012 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4175 states and 4765 transitions.
[2020-05-30 20:22:41,044 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4175 to 4164.
[2020-05-30 20:22:41,044 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4164 states.
[2020-05-30 20:22:41,049 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4164 states to 4164 states and 4740 transitions.
[2020-05-30 20:22:41,049 INFO  L751         BuchiCegarLoop]: Abstraction has 4164 states and 4740 transitions.
[2020-05-30 20:22:41,049 INFO  L631         BuchiCegarLoop]: Abstraction has 4164 states and 4740 transitions.
[2020-05-30 20:22:41,049 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-05-30 20:22:41,049 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4164 states and 4740 transitions.
[2020-05-30 20:22:41,053 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 221
[2020-05-30 20:22:41,053 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:22:41,053 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:22:41,055 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:22:41,055 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -437875663;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:22:41,059 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:22:41,059 INFO  L82        PathProgramCache]: Analyzing trace with hash 623150774, now seen corresponding path program 1 times
[2020-05-30 20:22:41,060 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:22:41,081 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:22:41,147 INFO  L134       CoverageAnalysis]: Checked inductivity of 48 backedges. 26 proven. 0 refuted. 0 times theorem prover too weak. 22 trivial. 0 not checked.
[2020-05-30 20:22:41,147 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:22:41,147 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-05-30 20:22:41,147 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:22:41,147 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 20:22:41,148 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-05-30 20:22:41,148 INFO  L87              Difference]: Start difference. First operand 4164 states and 4740 transitions. cyclomatic complexity: 585 Second operand 11 states.
[2020-05-30 20:22:42,373 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:22:42,374 INFO  L93              Difference]: Finished difference Result 4663 states and 5379 transitions.
[2020-05-30 20:22:42,374 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-30 20:22:42,374 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4663 states and 5379 transitions.
[2020-05-30 20:22:42,382 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 302
[2020-05-30 20:22:42,393 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4663 states to 4663 states and 5379 transitions.
[2020-05-30 20:22:42,393 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 218
[2020-05-30 20:22:42,393 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 268
[2020-05-30 20:22:42,393 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4663 states and 5379 transitions.
[2020-05-30 20:22:42,396 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:22:42,396 INFO  L728         BuchiCegarLoop]: Abstraction has 4663 states and 5379 transitions.
[2020-05-30 20:22:42,399 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4663 states and 5379 transitions.
[2020-05-30 20:22:42,436 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4663 to 4609.
[2020-05-30 20:22:42,436 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4609 states.
[2020-05-30 20:22:42,444 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4609 states to 4609 states and 5296 transitions.
[2020-05-30 20:22:42,444 INFO  L751         BuchiCegarLoop]: Abstraction has 4609 states and 5296 transitions.
[2020-05-30 20:22:42,444 INFO  L631         BuchiCegarLoop]: Abstraction has 4609 states and 5296 transitions.
[2020-05-30 20:22:42,444 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-05-30 20:22:42,444 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4609 states and 5296 transitions.
[2020-05-30 20:22:42,449 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 300
[2020-05-30 20:22:42,449 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:22:42,449 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:22:42,450 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:22:42,451 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND TRUE   __exception
[L345]                     __tmp__Balance := Balance;
[L346]                     __tmp__DType := DType;
[L347]                     __tmp__Alloc := Alloc;
[L348]                     __tmp__balance_ADDR := balance_ADDR;
[L349]                     __tmp__M_Ref_int_balancesArray0 := M_Ref_int_balancesArray0;
[L350]                     __tmp__sum_balancesArray0 := sum_balancesArray0;
[L351]                     __tmp__M_Ref_int_usersEPXfundValue1 := M_Ref_int_usersEPXfundValue1;
[L352]                     __tmp__sum_usersEPXfundValue1 := sum_usersEPXfundValue1;
[L353]                     __tmp__Length := Length;
[L354]                     __tmp__now := now;
[L355]                     __tmp__owner_owned := owner_owned;
[L356]                     __tmp__admin_EPXCrowdsale := admin_EPXCrowdsale;
[L357]                     __tmp__tokenReward_EPXCrowdsale := tokenReward_EPXCrowdsale;
[L358]                     __tmp__initialTokenSupply_EPXCrowdsale := initialTokenSupply_EPXCrowdsale;
[L359]                     __tmp__tokensRemaining_EPXCrowdsale := tokensRemaining_EPXCrowdsale;
[L360]                     __tmp__beneficiaryWallet_EPXCrowdsale := beneficiaryWallet_EPXCrowdsale;
[L361]                     __tmp__amountRaisedInWei_EPXCrowdsale := amountRaisedInWei_EPXCrowdsale;
[L362]                     __tmp__fundingMinCapInWei_EPXCrowdsale := fundingMinCapInWei_EPXCrowdsale;
[L363]                     __tmp__CurrentStatus_EPXCrowdsale := CurrentStatus_EPXCrowdsale;
[L364]                     __tmp__fundingStartBlock_EPXCrowdsale := fundingStartBlock_EPXCrowdsale;
[L365]                     __tmp__fundingEndBlock_EPXCrowdsale := fundingEndBlock_EPXCrowdsale;
[L366]                     __tmp__isCrowdSaleClosed_EPXCrowdsale := isCrowdSaleClosed_EPXCrowdsale;
[L367]                     __tmp__areFundsReleasedToBeneficiary_EPXCrowdsale := areFundsReleasedToBeneficiary_EPXCrowdsale;
[L368]                     __tmp__isCrowdSaleSetup_EPXCrowdsale := isCrowdSaleSetup_EPXCrowdsale;
[L369]                     __tmp__balancesArray_EPXCrowdsale := balancesArray_EPXCrowdsale;
[L370]                     __tmp__usersEPXfundValue_EPXCrowdsale := usersEPXfundValue_EPXCrowdsale;
[L371]         CALL        call EPXCrowdsale_EPXCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L1865]        CALL        call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[L1128]        CALL        call owned_owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1108]                    assume msgsender_MSG != null;
[L1109]                    __tmp__Balance[this] := 0;
[L1110]                    __tmp__owner_owned[this] := null;
[L1111]                    __tmp__owner_owned[this] := msgsender_MSG;
[L1128]        RET         call owned_owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1129]        COND FALSE  !(revert)
[L1865]        RET         call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[L1866]        COND FALSE  !(revert)
[L1871]        CALL        call safeMath_safeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[L1166]        CALL        call safeMath_safeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1150]                    assume msgsender_MSG != null;
[L1151]                    __tmp__Balance[this] := 0;
[L1166]        RET         call safeMath_safeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1167]        COND FALSE  !(revert)
[L1871]        RET         call safeMath_safeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[L1872]        COND FALSE  !(revert)
[L1877]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1767]                    assume msgsender_MSG != null;
[L1768]                    __tmp__Balance[this] := 0;
[L1769]                    __tmp__admin_EPXCrowdsale[this] := null;
[L1770]                    __tmp__initialTokenSupply_EPXCrowdsale[this] := 0;
[L1771]                    __tmp__tokensRemaining_EPXCrowdsale[this] := 0;
[L1772]                    __tmp__beneficiaryWallet_EPXCrowdsale[this] := null;
[L1773]                    __tmp__amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1774]                    __tmp__fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1775]                    __tmp__CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1776]                    __tmp__fundingStartBlock_EPXCrowdsale[this] := 0;
[L1777]                    __tmp__fundingEndBlock_EPXCrowdsale[this] := 0;
[L1778]                    __tmp__isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1779]                    __tmp__areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1780]                    __tmp__isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1781]        CALL        call __var_1 := FreshRefGenerator__fail();
[L1088]                    havoc newRef;
[L1089]                    assume __tmp__Alloc[newRef] == false;
[L1090]                    __tmp__Alloc[newRef] := true;
[L1091]                    assume newRef != null;
[L1781]        RET         call __var_1 := FreshRefGenerator__fail();
[L1782]        COND FALSE  !(revert)
[L1787]                    __tmp__balancesArray_EPXCrowdsale[this] := __var_1;
[L1788]                    __tmp__M_Ref_int_balancesArray0[__tmp__balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1789]                    __tmp__sum_balancesArray0[__tmp__balancesArray_EPXCrowdsale[this]] := 0;
[L1790]        CALL        call __var_2 := FreshRefGenerator__fail();
[L1088]                    havoc newRef;
[L1089]                    assume __tmp__Alloc[newRef] == false;
[L1090]                    __tmp__Alloc[newRef] := true;
[L1091]                    assume newRef != null;
[L1790]        RET         call __var_2 := FreshRefGenerator__fail();
[L1791]        COND FALSE  !(revert)
[L1796]                    __tmp__usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1797]                    __tmp__M_Ref_int_usersEPXfundValue1[__tmp__usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1798]                    __tmp__sum_usersEPXfundValue1[__tmp__usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1799]        CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3655]                    gas := gas - 828;
[L3656]        COND FALSE  !(!(msgsender_MSG == __tmp__owner_owned[this]))
[L1799]        RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L1800]        COND FALSE  !(revert)
[L1805]                    __tmp__admin_EPXCrowdsale[this] := msgsender_MSG;
[L1806]                    __tmp__CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1877]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1878]        COND FALSE  !(revert)
[L371]         RET         call EPXCrowdsale_EPXCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L372]                     assume revert || gas < 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:22:42,455 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:22:42,455 INFO  L82        PathProgramCache]: Analyzing trace with hash -416201209, now seen corresponding path program 1 times
[2020-05-30 20:22:42,456 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:22:42,473 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:22:42,527 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-30 20:22:42,527 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:22:42,527 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-30 20:22:42,527 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:22:42,527 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 20:22:42,527 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-05-30 20:22:42,528 INFO  L87              Difference]: Start difference. First operand 4609 states and 5296 transitions. cyclomatic complexity: 696 Second operand 4 states.
[2020-05-30 20:22:42,720 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:22:42,721 INFO  L93              Difference]: Finished difference Result 5303 states and 6289 transitions.
[2020-05-30 20:22:42,721 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-30 20:22:42,721 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5303 states and 6289 transitions.
[2020-05-30 20:22:42,730 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 312
[2020-05-30 20:22:42,745 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5303 states to 5125 states and 6061 transitions.
[2020-05-30 20:22:42,745 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 341
[2020-05-30 20:22:42,745 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 341
[2020-05-30 20:22:42,745 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5125 states and 6061 transitions.
[2020-05-30 20:22:42,750 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:22:42,750 INFO  L728         BuchiCegarLoop]: Abstraction has 5125 states and 6061 transitions.
[2020-05-30 20:22:42,753 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5125 states and 6061 transitions.
[2020-05-30 20:22:42,793 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5125 to 4507.
[2020-05-30 20:22:42,793 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4507 states.
[2020-05-30 20:22:42,798 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4507 states to 4507 states and 5137 transitions.
[2020-05-30 20:22:42,798 INFO  L751         BuchiCegarLoop]: Abstraction has 4507 states and 5137 transitions.
[2020-05-30 20:22:42,799 INFO  L631         BuchiCegarLoop]: Abstraction has 4507 states and 5137 transitions.
[2020-05-30 20:22:42,799 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-05-30 20:22:42,799 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4507 states and 5137 transitions.
[2020-05-30 20:22:42,803 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 300
[2020-05-30 20:22:42,803 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:22:42,803 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:22:42,805 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:22:42,805 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND FALSE  !(gas < 21000)
[L3344]        COND TRUE   iterate && gas >= 21000
[L3346]                    havoc msgsender_MSG;
[L3347]                    havoc msgvalue_MSG;
[L3348]                    havoc choice;
[L3349]                    havoc who_s162;
[L3350]                    havoc __ret_0_balanceOf;
[L3351]                    havoc to_s171;
[L3352]                    havoc value_s171;
[L3353]                    havoc __ret_0_transfer;
[L3354]                    havoc initialEPXtokenCount_s286;
[L3355]                    havoc remainingEPXtokenCount_s299;
[L3356]                    havoc _fundingStartBlock_s391;
[L3357]                    havoc _fundingEndBlock_s391;
[L3358]                    havoc response_s391;
[L3359]                    havoc _amount_s558;
[L3360]                    havoc iterate;
[L3361]        COND TRUE   DType[from] == EPXCrowdsale
[L3363]        COND FALSE  !(choice == 7)
[L3376]        COND FALSE  !(choice == 6)
[L3389]        COND FALSE  !(choice == 5)
[L3402]        COND FALSE  !(choice == 4)
[L3415]        COND FALSE  !(choice == 3)
[L3428]        COND TRUE   choice == 2
[L3430]                    gas := gas - 21000;
[L3431]        COND TRUE   gas >= 0
[L3433]                    assume msgvalue_MSG == 0;
[L3434]        CALL        call checkGoalReached_EPXCrowdsale__success(from, to, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -437875663;
[L3434]        RET         call checkGoalReached_EPXCrowdsale__success(from, to, msgvalue_MSG);
[L3435]        COND FALSE  !(revert)
[L3344]        COND FALSE  !(iterate && gas >= 21000)
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]              havoc msgsender_MSG;
[L3864]              havoc msgvalue_MSG;
[L3865]              havoc choice;
[L3866]              havoc initialEPXtokenCount_s286;
[L3867]              havoc remainingEPXtokenCount_s299;
[L3868]              havoc _fundingStartBlock_s391;
[L3869]              havoc _fundingEndBlock_s391;
[L3870]              havoc response_s391;
[L3871]              havoc _amount_s558;
[L3872]              havoc tmpNow;
[L3873]              havoc gas;
[L3874]              assume gas > 4000000 && gas <= 8000000;
[L3875]              tmpNow := now;
[L3876]              havoc now;
[L3877]              assume now > tmpNow;
[L3878]              assume msgsender_MSG != null;
[L3879]              assume DType[msgsender_MSG] != owned;
[L3880]              assume DType[msgsender_MSG] != safeMath;
[L3881]              assume DType[msgsender_MSG] != StandardToken;
[L3882]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]              Alloc[msgsender_MSG] := true;
[L3884]  COND TRUE   choice == 7
[L3886]              gas := gas - 21000;
[L3887]  COND FALSE  !(gas >= 0)
[L3966]  RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:22:42,808 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:22:42,808 INFO  L82        PathProgramCache]: Analyzing trace with hash -1383299783, now seen corresponding path program 1 times
[2020-05-30 20:22:42,808 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:22:42,827 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:22:42,902 INFO  L134       CoverageAnalysis]: Checked inductivity of 90 backedges. 1 proven. 32 refuted. 0 times theorem prover too weak. 57 trivial. 0 not checked.
[2020-05-30 20:22:42,902 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:22:42,902 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [6] total 6
[2020-05-30 20:22:42,903 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:22:42,903 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-05-30 20:22:42,903 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=19, Unknown=0, NotChecked=0, Total=30
[2020-05-30 20:22:42,903 INFO  L87              Difference]: Start difference. First operand 4507 states and 5137 transitions. cyclomatic complexity: 639 Second operand 6 states.
[2020-05-30 20:22:43,320 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:22:43,320 INFO  L93              Difference]: Finished difference Result 4717 states and 5215 transitions.
[2020-05-30 20:22:43,320 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-30 20:22:43,320 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4717 states and 5215 transitions.
[2020-05-30 20:22:43,328 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 20:22:43,336 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4717 states to 4717 states and 5215 transitions.
[2020-05-30 20:22:43,336 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 223
[2020-05-30 20:22:43,337 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 844
[2020-05-30 20:22:43,337 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4717 states and 5215 transitions.
[2020-05-30 20:22:43,339 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:22:43,339 INFO  L728         BuchiCegarLoop]: Abstraction has 4717 states and 5215 transitions.
[2020-05-30 20:22:43,341 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4717 states and 5215 transitions.
[2020-05-30 20:22:43,376 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4717 to 4464.
[2020-05-30 20:22:43,377 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4464 states.
[2020-05-30 20:22:43,380 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4464 states to 4464 states and 4922 transitions.
[2020-05-30 20:22:43,381 INFO  L751         BuchiCegarLoop]: Abstraction has 4464 states and 4922 transitions.
[2020-05-30 20:22:43,381 INFO  L631         BuchiCegarLoop]: Abstraction has 4464 states and 4922 transitions.
[2020-05-30 20:22:43,381 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-05-30 20:22:43,381 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4464 states and 4922 transitions.
[2020-05-30 20:22:43,385 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:22:43,385 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:22:43,385 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:22:43,386 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:22:43,386 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -437875663;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]              havoc msgsender_MSG;
[L3864]              havoc msgvalue_MSG;
[L3865]              havoc choice;
[L3866]              havoc initialEPXtokenCount_s286;
[L3867]              havoc remainingEPXtokenCount_s299;
[L3868]              havoc _fundingStartBlock_s391;
[L3869]              havoc _fundingEndBlock_s391;
[L3870]              havoc response_s391;
[L3871]              havoc _amount_s558;
[L3872]              havoc tmpNow;
[L3873]              havoc gas;
[L3874]              assume gas > 4000000 && gas <= 8000000;
[L3875]              tmpNow := now;
[L3876]              havoc now;
[L3877]              assume now > tmpNow;
[L3878]              assume msgsender_MSG != null;
[L3879]              assume DType[msgsender_MSG] != owned;
[L3880]              assume DType[msgsender_MSG] != safeMath;
[L3881]              assume DType[msgsender_MSG] != StandardToken;
[L3882]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]              Alloc[msgsender_MSG] := true;
[L3884]  COND TRUE   choice == 7
[L3886]              gas := gas - 21000;
[L3887]  COND FALSE  !(gas >= 0)
[L3966]  RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:22:43,391 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:22:43,391 INFO  L82        PathProgramCache]: Analyzing trace with hash -900787301, now seen corresponding path program 1 times
[2020-05-30 20:22:43,392 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:22:43,413 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:22:43,497 INFO  L134       CoverageAnalysis]: Checked inductivity of 114 backedges. 58 proven. 0 refuted. 0 times theorem prover too weak. 56 trivial. 0 not checked.
[2020-05-30 20:22:43,498 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:22:43,498 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-05-30 20:22:43,498 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:22:43,498 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 20:22:43,498 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-05-30 20:22:43,499 INFO  L87              Difference]: Start difference. First operand 4464 states and 4922 transitions. cyclomatic complexity: 461 Second operand 11 states.
[2020-05-30 20:22:44,567 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:22:44,567 INFO  L93              Difference]: Finished difference Result 4891 states and 5421 transitions.
[2020-05-30 20:22:44,568 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 20:22:44,568 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4891 states and 5421 transitions.
[2020-05-30 20:22:44,574 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 20:22:44,581 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4891 states to 4891 states and 5421 transitions.
[2020-05-30 20:22:44,581 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 860
[2020-05-30 20:22:44,582 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 860
[2020-05-30 20:22:44,582 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4891 states and 5421 transitions.
[2020-05-30 20:22:44,583 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:22:44,583 INFO  L728         BuchiCegarLoop]: Abstraction has 4891 states and 5421 transitions.
[2020-05-30 20:22:44,585 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4891 states and 5421 transitions.
[2020-05-30 20:22:44,604 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4891 to 4824.
[2020-05-30 20:22:44,604 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4824 states.
[2020-05-30 20:22:44,609 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4824 states to 4824 states and 5354 transitions.
[2020-05-30 20:22:44,609 INFO  L751         BuchiCegarLoop]: Abstraction has 4824 states and 5354 transitions.
[2020-05-30 20:22:44,609 INFO  L631         BuchiCegarLoop]: Abstraction has 4824 states and 5354 transitions.
[2020-05-30 20:22:44,609 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-05-30 20:22:44,609 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4824 states and 5354 transitions.
[2020-05-30 20:22:44,613 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 20:22:44,613 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:22:44,613 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:22:44,614 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:22:44,614 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -1702767056;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -1702767056;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:22:44,618 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:22:44,618 INFO  L82        PathProgramCache]: Analyzing trace with hash 849989259, now seen corresponding path program 1 times
[2020-05-30 20:22:44,618 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:22:44,636 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:22:44,710 INFO  L134       CoverageAnalysis]: Checked inductivity of 114 backedges. 27 proven. 0 refuted. 0 times theorem prover too weak. 87 trivial. 0 not checked.
[2020-05-30 20:22:44,711 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:22:44,711 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-05-30 20:22:44,711 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:22:44,711 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 20:22:44,711 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=35, Invalid=75, Unknown=0, NotChecked=0, Total=110
[2020-05-30 20:22:44,711 INFO  L87              Difference]: Start difference. First operand 4824 states and 5354 transitions. cyclomatic complexity: 533 Second operand 11 states.
[2020-05-30 20:22:45,389 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:22:45,389 INFO  L93              Difference]: Finished difference Result 5528 states and 6135 transitions.
[2020-05-30 20:22:45,389 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-05-30 20:22:45,389 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5528 states and 6135 transitions.
[2020-05-30 20:22:45,397 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-05-30 20:22:45,404 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5528 states to 5420 states and 5991 transitions.
[2020-05-30 20:22:45,404 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1073
[2020-05-30 20:22:45,405 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1073
[2020-05-30 20:22:45,405 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5420 states and 5991 transitions.
[2020-05-30 20:22:45,407 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:22:45,407 INFO  L728         BuchiCegarLoop]: Abstraction has 5420 states and 5991 transitions.
[2020-05-30 20:22:45,409 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5420 states and 5991 transitions.
[2020-05-30 20:22:45,431 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5420 to 4824.
[2020-05-30 20:22:45,431 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4824 states.
[2020-05-30 20:22:45,435 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4824 states to 4824 states and 5304 transitions.
[2020-05-30 20:22:45,436 INFO  L751         BuchiCegarLoop]: Abstraction has 4824 states and 5304 transitions.
[2020-05-30 20:22:45,436 INFO  L631         BuchiCegarLoop]: Abstraction has 4824 states and 5304 transitions.
[2020-05-30 20:22:45,436 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-05-30 20:22:45,436 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4824 states and 5304 transitions.
[2020-05-30 20:22:45,440 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 20:22:45,440 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:22:45,440 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:22:45,442 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:22:45,442 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -1702767056;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:22:45,445 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:22:45,445 INFO  L82        PathProgramCache]: Analyzing trace with hash -1903617948, now seen corresponding path program 1 times
[2020-05-30 20:22:45,446 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:22:45,468 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:22:45,588 INFO  L134       CoverageAnalysis]: Checked inductivity of 114 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 114 trivial. 0 not checked.
[2020-05-30 20:22:45,589 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:22:45,589 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-05-30 20:22:45,589 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:22:45,589 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 20:22:45,589 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=107, Unknown=0, NotChecked=0, Total=132
[2020-05-30 20:22:45,589 INFO  L87              Difference]: Start difference. First operand 4824 states and 5304 transitions. cyclomatic complexity: 483 Second operand 12 states.
[2020-05-30 20:22:46,646 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:22:46,646 INFO  L93              Difference]: Finished difference Result 4916 states and 5424 transitions.
[2020-05-30 20:22:46,646 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-05-30 20:22:46,646 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4916 states and 5424 transitions.
[2020-05-30 20:22:46,652 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 20:22:46,658 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4916 states to 4916 states and 5424 transitions.
[2020-05-30 20:22:46,658 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 871
[2020-05-30 20:22:46,659 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 871
[2020-05-30 20:22:46,659 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4916 states and 5424 transitions.
[2020-05-30 20:22:46,660 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:22:46,660 INFO  L728         BuchiCegarLoop]: Abstraction has 4916 states and 5424 transitions.
[2020-05-30 20:22:46,662 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4916 states and 5424 transitions.
[2020-05-30 20:22:46,680 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4916 to 4869.
[2020-05-30 20:22:46,680 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4869 states.
[2020-05-30 20:22:46,684 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4869 states to 4869 states and 5372 transitions.
[2020-05-30 20:22:46,684 INFO  L751         BuchiCegarLoop]: Abstraction has 4869 states and 5372 transitions.
[2020-05-30 20:22:46,684 INFO  L631         BuchiCegarLoop]: Abstraction has 4869 states and 5372 transitions.
[2020-05-30 20:22:46,684 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-05-30 20:22:46,684 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4869 states and 5372 transitions.
[2020-05-30 20:22:46,688 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 20:22:46,688 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:22:46,688 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:22:46,690 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:22:46,690 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -1702767056;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND TRUE   DType[to] == EPXCrowdsale
[L3111]        CALL        call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L2307]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2308]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2309]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2310]                    gas := gas - 4;
[L2311]        CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L2311]        RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2312]        COND FALSE  !(revert)
[L3111]        RET         call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L3112]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:22:46,695 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:22:46,696 INFO  L82        PathProgramCache]: Analyzing trace with hash 1902233304, now seen corresponding path program 1 times
[2020-05-30 20:22:46,696 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:22:46,719 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:22:46,868 INFO  L134       CoverageAnalysis]: Checked inductivity of 277 backedges. 64 proven. 29 refuted. 0 times theorem prover too weak. 184 trivial. 0 not checked.
[2020-05-30 20:22:46,869 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:22:46,869 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-30 20:22:46,869 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:22:46,869 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 20:22:46,869 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-05-30 20:22:46,870 INFO  L87              Difference]: Start difference. First operand 4869 states and 5372 transitions. cyclomatic complexity: 508 Second operand 11 states.
[2020-05-30 20:22:47,833 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:22:47,833 INFO  L93              Difference]: Finished difference Result 5861 states and 6595 transitions.
[2020-05-30 20:22:47,833 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 20:22:47,834 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5861 states and 6595 transitions.
[2020-05-30 20:22:47,844 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-05-30 20:22:47,853 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5861 states to 5861 states and 6595 transitions.
[2020-05-30 20:22:47,854 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1074
[2020-05-30 20:22:47,854 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1074
[2020-05-30 20:22:47,854 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5861 states and 6595 transitions.
[2020-05-30 20:22:47,857 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:22:47,857 INFO  L728         BuchiCegarLoop]: Abstraction has 5861 states and 6595 transitions.
[2020-05-30 20:22:47,860 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5861 states and 6595 transitions.
[2020-05-30 20:22:47,885 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5861 to 5816.
[2020-05-30 20:22:47,885 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5816 states.
[2020-05-30 20:22:47,891 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5816 states to 5816 states and 6538 transitions.
[2020-05-30 20:22:47,891 INFO  L751         BuchiCegarLoop]: Abstraction has 5816 states and 6538 transitions.
[2020-05-30 20:22:47,891 INFO  L631         BuchiCegarLoop]: Abstraction has 5816 states and 6538 transitions.
[2020-05-30 20:22:47,891 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-05-30 20:22:47,891 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5816 states and 6538 transitions.
[2020-05-30 20:22:47,897 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-05-30 20:22:47,897 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:22:47,897 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:22:47,898 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:22:47,898 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -1702767056;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND FALSE  !(DType[this] == EPXCrowdsale)
[L1645]        COND TRUE   DType[this] == StandardToken
[L1647]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1647]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1648]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND FALSE  !(DType[this] == EPXCrowdsale)
[L1267]        COND FALSE  !(DType[this] == StandardToken)
[L1275]        COND TRUE   DType[this] == safeMath
[L1277]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1277]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1278]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND FALSE  !(DType[this] == EPXCrowdsale)
[L1645]        COND TRUE   DType[this] == StandardToken
[L1647]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1647]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1648]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]              havoc msgsender_MSG;
[L3864]              havoc msgvalue_MSG;
[L3865]              havoc choice;
[L3866]              havoc initialEPXtokenCount_s286;
[L3867]              havoc remainingEPXtokenCount_s299;
[L3868]              havoc _fundingStartBlock_s391;
[L3869]              havoc _fundingEndBlock_s391;
[L3870]              havoc response_s391;
[L3871]              havoc _amount_s558;
[L3872]              havoc tmpNow;
[L3873]              havoc gas;
[L3874]              assume gas > 4000000 && gas <= 8000000;
[L3875]              tmpNow := now;
[L3876]              havoc now;
[L3877]              assume now > tmpNow;
[L3878]              assume msgsender_MSG != null;
[L3879]              assume DType[msgsender_MSG] != owned;
[L3880]              assume DType[msgsender_MSG] != safeMath;
[L3881]              assume DType[msgsender_MSG] != StandardToken;
[L3882]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]              Alloc[msgsender_MSG] := true;
[L3884]  COND FALSE  !(choice == 7)
[L3893]  COND FALSE  !(choice == 6)
[L3902]  COND FALSE  !(choice == 5)
[L3911]  COND FALSE  !(choice == 4)
[L3920]  COND FALSE  !(choice == 3)
[L3929]  COND FALSE  !(choice == 2)
[L3938]  COND FALSE  !(choice == 1)
[L3966]  RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:22:47,902 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:22:47,903 INFO  L82        PathProgramCache]: Analyzing trace with hash 695325207, now seen corresponding path program 1 times
[2020-05-30 20:22:47,903 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:22:47,923 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:22:48,070 INFO  L134       CoverageAnalysis]: Checked inductivity of 247 backedges. 9 proven. 9 refuted. 0 times theorem prover too weak. 229 trivial. 0 not checked.
[2020-05-30 20:22:48,070 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:22:48,070 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-05-30 20:22:48,071 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:22:48,071 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-30 20:22:48,071 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-05-30 20:22:48,071 INFO  L87              Difference]: Start difference. First operand 5816 states and 6538 transitions. cyclomatic complexity: 727 Second operand 7 states.
[2020-05-30 20:22:48,131 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:22:48,131 INFO  L93              Difference]: Finished difference Result 5976 states and 6702 transitions.
[2020-05-30 20:22:48,131 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-05-30 20:22:48,131 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5976 states and 6702 transitions.
[2020-05-30 20:22:48,139 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-05-30 20:22:48,148 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5976 states to 5824 states and 6538 transitions.
[2020-05-30 20:22:48,148 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1066
[2020-05-30 20:22:48,149 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1075
[2020-05-30 20:22:48,149 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5824 states and 6538 transitions.
[2020-05-30 20:22:48,151 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:22:48,151 INFO  L728         BuchiCegarLoop]: Abstraction has 5824 states and 6538 transitions.
[2020-05-30 20:22:48,153 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5824 states and 6538 transitions.
[2020-05-30 20:22:48,174 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5824 to 5806.
[2020-05-30 20:22:48,175 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5806 states.
[2020-05-30 20:22:48,180 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5806 states to 5806 states and 6520 transitions.
[2020-05-30 20:22:48,180 INFO  L751         BuchiCegarLoop]: Abstraction has 5806 states and 6520 transitions.
[2020-05-30 20:22:48,180 INFO  L631         BuchiCegarLoop]: Abstraction has 5806 states and 6520 transitions.
[2020-05-30 20:22:48,180 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-05-30 20:22:48,180 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5806 states and 6520 transitions.
[2020-05-30 20:22:48,186 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-05-30 20:22:48,186 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:22:48,186 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:22:48,187 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:22:48,187 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -1702767056;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND FALSE  !(DType[this] == EPXCrowdsale)
[L1267]        COND FALSE  !(DType[this] == StandardToken)
[L1275]        COND TRUE   DType[this] == safeMath
[L1277]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1277]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1278]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND FALSE  !(DType[this] == EPXCrowdsale)
[L1535]        COND TRUE   DType[this] == StandardToken
[L1537]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1537]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1538]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]              havoc msgsender_MSG;
[L3864]              havoc msgvalue_MSG;
[L3865]              havoc choice;
[L3866]              havoc initialEPXtokenCount_s286;
[L3867]              havoc remainingEPXtokenCount_s299;
[L3868]              havoc _fundingStartBlock_s391;
[L3869]              havoc _fundingEndBlock_s391;
[L3870]              havoc response_s391;
[L3871]              havoc _amount_s558;
[L3872]              havoc tmpNow;
[L3873]              havoc gas;
[L3874]              assume gas > 4000000 && gas <= 8000000;
[L3875]              tmpNow := now;
[L3876]              havoc now;
[L3877]              assume now > tmpNow;
[L3878]              assume msgsender_MSG != null;
[L3879]              assume DType[msgsender_MSG] != owned;
[L3880]              assume DType[msgsender_MSG] != safeMath;
[L3881]              assume DType[msgsender_MSG] != StandardToken;
[L3882]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]              Alloc[msgsender_MSG] := true;
[L3884]  COND FALSE  !(choice == 7)
[L3893]  COND FALSE  !(choice == 6)
[L3902]  COND FALSE  !(choice == 5)
[L3911]  COND FALSE  !(choice == 4)
[L3920]  COND FALSE  !(choice == 3)
[L3929]  COND FALSE  !(choice == 2)
[L3938]  COND FALSE  !(choice == 1)
[L3966]  RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:22:48,191 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:22:48,191 INFO  L82        PathProgramCache]: Analyzing trace with hash -5399069, now seen corresponding path program 1 times
[2020-05-30 20:22:48,192 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:22:48,211 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:22:48,334 INFO  L134       CoverageAnalysis]: Checked inductivity of 246 backedges. 9 proven. 0 refuted. 0 times theorem prover too weak. 237 trivial. 0 not checked.
[2020-05-30 20:22:48,335 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:22:48,335 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-05-30 20:22:48,335 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:22:48,335 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-30 20:22:48,336 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-05-30 20:22:48,336 INFO  L87              Difference]: Start difference. First operand 5806 states and 6520 transitions. cyclomatic complexity: 719 Second operand 7 states.
[2020-05-30 20:22:48,389 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:22:48,389 INFO  L93              Difference]: Finished difference Result 5866 states and 6576 transitions.
[2020-05-30 20:22:48,389 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-30 20:22:48,389 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5866 states and 6576 transitions.
[2020-05-30 20:22:48,398 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-05-30 20:22:48,406 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5866 states to 5766 states and 6464 transitions.
[2020-05-30 20:22:48,406 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1066
[2020-05-30 20:22:48,407 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1066
[2020-05-30 20:22:48,407 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5766 states and 6464 transitions.
[2020-05-30 20:22:48,409 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:22:48,409 INFO  L728         BuchiCegarLoop]: Abstraction has 5766 states and 6464 transitions.
[2020-05-30 20:22:48,411 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5766 states and 6464 transitions.
[2020-05-30 20:22:48,432 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5766 to 5766.
[2020-05-30 20:22:48,432 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5766 states.
[2020-05-30 20:22:48,438 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5766 states to 5766 states and 6464 transitions.
[2020-05-30 20:22:48,438 INFO  L751         BuchiCegarLoop]: Abstraction has 5766 states and 6464 transitions.
[2020-05-30 20:22:48,438 INFO  L631         BuchiCegarLoop]: Abstraction has 5766 states and 6464 transitions.
[2020-05-30 20:22:48,438 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-05-30 20:22:48,439 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5766 states and 6464 transitions.
[2020-05-30 20:22:48,444 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-05-30 20:22:48,444 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:22:48,444 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:22:48,445 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:22:48,445 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -1702767056;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND FALSE  !(DType[this] == EPXCrowdsale)
[L1535]        COND FALSE  !(DType[this] == StandardToken)
[L1543]        COND TRUE   DType[this] == safeMath
[L1545]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1545]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1546]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]              havoc msgsender_MSG;
[L3864]              havoc msgvalue_MSG;
[L3865]              havoc choice;
[L3866]              havoc initialEPXtokenCount_s286;
[L3867]              havoc remainingEPXtokenCount_s299;
[L3868]              havoc _fundingStartBlock_s391;
[L3869]              havoc _fundingEndBlock_s391;
[L3870]              havoc response_s391;
[L3871]              havoc _amount_s558;
[L3872]              havoc tmpNow;
[L3873]              havoc gas;
[L3874]              assume gas > 4000000 && gas <= 8000000;
[L3875]              tmpNow := now;
[L3876]              havoc now;
[L3877]              assume now > tmpNow;
[L3878]              assume msgsender_MSG != null;
[L3879]              assume DType[msgsender_MSG] != owned;
[L3880]              assume DType[msgsender_MSG] != safeMath;
[L3881]              assume DType[msgsender_MSG] != StandardToken;
[L3882]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]              Alloc[msgsender_MSG] := true;
[L3884]  COND FALSE  !(choice == 7)
[L3893]  COND FALSE  !(choice == 6)
[L3902]  COND FALSE  !(choice == 5)
[L3911]  COND FALSE  !(choice == 4)
[L3920]  COND FALSE  !(choice == 3)
[L3929]  COND FALSE  !(choice == 2)
[L3938]  COND FALSE  !(choice == 1)
[L3966]  RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:22:48,449 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:22:48,450 INFO  L82        PathProgramCache]: Analyzing trace with hash 2130551457, now seen corresponding path program 1 times
[2020-05-30 20:22:48,450 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:22:48,469 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:22:48,586 INFO  L134       CoverageAnalysis]: Checked inductivity of 246 backedges. 9 proven. 0 refuted. 0 times theorem prover too weak. 237 trivial. 0 not checked.
[2020-05-30 20:22:48,586 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:22:48,587 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-05-30 20:22:48,587 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:22:48,587 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-30 20:22:48,587 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-05-30 20:22:48,587 INFO  L87              Difference]: Start difference. First operand 5766 states and 6464 transitions. cyclomatic complexity: 703 Second operand 7 states.
[2020-05-30 20:22:48,639 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:22:48,640 INFO  L93              Difference]: Finished difference Result 5842 states and 6536 transitions.
[2020-05-30 20:22:48,640 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-30 20:22:48,640 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5842 states and 6536 transitions.
[2020-05-30 20:22:48,648 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-05-30 20:22:48,656 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5842 states to 5726 states and 6408 transitions.
[2020-05-30 20:22:48,656 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1066
[2020-05-30 20:22:48,657 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1066
[2020-05-30 20:22:48,657 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5726 states and 6408 transitions.
[2020-05-30 20:22:48,659 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:22:48,659 INFO  L728         BuchiCegarLoop]: Abstraction has 5726 states and 6408 transitions.
[2020-05-30 20:22:48,661 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5726 states and 6408 transitions.
[2020-05-30 20:22:48,682 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5726 to 5726.
[2020-05-30 20:22:48,682 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5726 states.
[2020-05-30 20:22:48,688 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5726 states to 5726 states and 6408 transitions.
[2020-05-30 20:22:48,688 INFO  L751         BuchiCegarLoop]: Abstraction has 5726 states and 6408 transitions.
[2020-05-30 20:22:48,688 INFO  L631         BuchiCegarLoop]: Abstraction has 5726 states and 6408 transitions.
[2020-05-30 20:22:48,688 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-05-30 20:22:48,688 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5726 states and 6408 transitions.
[2020-05-30 20:22:48,693 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-05-30 20:22:48,694 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:22:48,694 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:22:48,695 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:22:48,695 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -1702767056;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -1702767056;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:22:48,699 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:22:48,699 INFO  L82        PathProgramCache]: Analyzing trace with hash -139428469, now seen corresponding path program 1 times
[2020-05-30 20:22:48,700 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:22:48,725 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:22:48,917 INFO  L134       CoverageAnalysis]: Checked inductivity of 246 backedges. 88 proven. 56 refuted. 0 times theorem prover too weak. 102 trivial. 0 not checked.
[2020-05-30 20:22:48,917 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:22:48,917 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [14] total 14
[2020-05-30 20:22:48,918 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:22:48,918 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-05-30 20:22:48,918 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=152, Unknown=0, NotChecked=0, Total=182
[2020-05-30 20:22:48,918 INFO  L87              Difference]: Start difference. First operand 5726 states and 6408 transitions. cyclomatic complexity: 687 Second operand 14 states.
[2020-05-30 20:22:50,515 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:22:50,515 INFO  L93              Difference]: Finished difference Result 5902 states and 6696 transitions.
[2020-05-30 20:22:50,515 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-30 20:22:50,515 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5902 states and 6696 transitions.
[2020-05-30 20:22:50,524 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 18
[2020-05-30 20:22:50,533 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5902 states to 5896 states and 6690 transitions.
[2020-05-30 20:22:50,533 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1110
[2020-05-30 20:22:50,533 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1110
[2020-05-30 20:22:50,533 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5896 states and 6690 transitions.
[2020-05-30 20:22:50,536 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:22:50,536 INFO  L728         BuchiCegarLoop]: Abstraction has 5896 states and 6690 transitions.
[2020-05-30 20:22:50,538 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5896 states and 6690 transitions.
[2020-05-30 20:22:50,563 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5896 to 5774.
[2020-05-30 20:22:50,563 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5774 states.
[2020-05-30 20:22:50,569 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5774 states to 5774 states and 6563 transitions.
[2020-05-30 20:22:50,569 INFO  L751         BuchiCegarLoop]: Abstraction has 5774 states and 6563 transitions.
[2020-05-30 20:22:50,569 INFO  L631         BuchiCegarLoop]: Abstraction has 5774 states and 6563 transitions.
[2020-05-30 20:22:50,569 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-05-30 20:22:50,570 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5774 states and 6563 transitions.
[2020-05-30 20:22:50,575 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 18
[2020-05-30 20:22:50,575 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:22:50,575 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:22:50,576 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:22:50,576 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0
[L2904]                    gas := gas - 20317;
[L2905]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2906]                    gas := gas - 20267;
[L2907]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2908]                    gas := gas - 409;
[L2909]                    CurrentStatus_EPXCrowdsale[this] := 1905681161;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND TRUE   DType[to] == EPXCrowdsale
[L3111]        CALL        call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L2307]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2308]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2309]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2310]                    gas := gas - 4;
[L2311]        CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L2311]        RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2312]        COND FALSE  !(revert)
[L3111]        RET         call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L3112]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:22:50,581 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:22:50,581 INFO  L82        PathProgramCache]: Analyzing trace with hash 61714588, now seen corresponding path program 1 times
[2020-05-30 20:22:50,582 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:22:50,604 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:22:50,857 INFO  L134       CoverageAnalysis]: Checked inductivity of 277 backedges. 32 proven. 61 refuted. 0 times theorem prover too weak. 184 trivial. 0 not checked.
[2020-05-30 20:22:50,858 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:22:50,858 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-30 20:22:50,858 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:22:50,858 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 20:22:50,858 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=20, Invalid=90, Unknown=0, NotChecked=0, Total=110
[2020-05-30 20:22:50,859 INFO  L87              Difference]: Start difference. First operand 5774 states and 6563 transitions. cyclomatic complexity: 794 Second operand 11 states.
[2020-05-30 20:22:52,129 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:22:52,129 INFO  L93              Difference]: Finished difference Result 6820 states and 7762 transitions.
[2020-05-30 20:22:52,129 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-30 20:22:52,129 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6820 states and 7762 transitions.
[2020-05-30 20:22:52,142 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 28
[2020-05-30 20:22:52,154 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6820 states to 6820 states and 7762 transitions.
[2020-05-30 20:22:52,155 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1338
[2020-05-30 20:22:52,155 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1338
[2020-05-30 20:22:52,155 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6820 states and 7762 transitions.
[2020-05-30 20:22:52,158 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:22:52,158 INFO  L728         BuchiCegarLoop]: Abstraction has 6820 states and 7762 transitions.
[2020-05-30 20:22:52,161 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6820 states and 7762 transitions.
[2020-05-30 20:22:52,187 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6820 to 6800.
[2020-05-30 20:22:52,187 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6800 states.
[2020-05-30 20:22:52,195 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6800 states to 6800 states and 7734 transitions.
[2020-05-30 20:22:52,195 INFO  L751         BuchiCegarLoop]: Abstraction has 6800 states and 7734 transitions.
[2020-05-30 20:22:52,195 INFO  L631         BuchiCegarLoop]: Abstraction has 6800 states and 7734 transitions.
[2020-05-30 20:22:52,195 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-05-30 20:22:52,195 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6800 states and 7734 transitions.
[2020-05-30 20:22:52,201 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 28
[2020-05-30 20:22:52,201 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:22:52,202 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:22:52,203 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:22:52,203 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND TRUE   DType[to] == EPXCrowdsale
[L3111]        CALL        call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L2307]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2308]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2309]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2310]                    gas := gas - 4;
[L2311]        CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L2311]        RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2312]        COND FALSE  !(revert)
[L3111]        RET         call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L3112]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -1702767056;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND TRUE   DType[to] == EPXCrowdsale
[L3111]        CALL        call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L2307]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2308]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2309]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2310]                    gas := gas - 4;
[L2311]        CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L2311]        RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2312]        COND FALSE  !(revert)
[L3111]        RET         call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L3112]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]              havoc msgsender_MSG;
[L3864]              havoc msgvalue_MSG;
[L3865]              havoc choice;
[L3866]              havoc initialEPXtokenCount_s286;
[L3867]              havoc remainingEPXtokenCount_s299;
[L3868]              havoc _fundingStartBlock_s391;
[L3869]              havoc _fundingEndBlock_s391;
[L3870]              havoc response_s391;
[L3871]              havoc _amount_s558;
[L3872]              havoc tmpNow;
[L3873]              havoc gas;
[L3874]              assume gas > 4000000 && gas <= 8000000;
[L3875]              tmpNow := now;
[L3876]              havoc now;
[L3877]              assume now > tmpNow;
[L3878]              assume msgsender_MSG != null;
[L3879]              assume DType[msgsender_MSG] != owned;
[L3880]              assume DType[msgsender_MSG] != safeMath;
[L3881]              assume DType[msgsender_MSG] != StandardToken;
[L3882]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]              Alloc[msgsender_MSG] := true;
[L3884]  COND FALSE  !(choice == 7)
[L3893]  COND FALSE  !(choice == 6)
[L3902]  COND FALSE  !(choice == 5)
[L3911]  COND FALSE  !(choice == 4)
[L3920]  COND FALSE  !(choice == 3)
[L3929]  COND FALSE  !(choice == 2)
[L3938]  COND FALSE  !(choice == 1)
[L3966]  RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:22:52,208 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:22:52,208 INFO  L82        PathProgramCache]: Analyzing trace with hash -1906041200, now seen corresponding path program 1 times
[2020-05-30 20:22:52,209 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:22:52,232 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:22:52,444 INFO  L134       CoverageAnalysis]: Checked inductivity of 611 backedges. 6 proven. 110 refuted. 0 times theorem prover too weak. 495 trivial. 0 not checked.
[2020-05-30 20:22:52,445 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:22:52,445 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-30 20:22:52,445 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:22:52,445 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 20:22:52,445 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-05-30 20:22:52,445 INFO  L87              Difference]: Start difference. First operand 6800 states and 7734 transitions. cyclomatic complexity: 940 Second operand 11 states.
[2020-05-30 20:22:53,265 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:22:53,266 INFO  L93              Difference]: Finished difference Result 6856 states and 7814 transitions.
[2020-05-30 20:22:53,266 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-05-30 20:22:53,266 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6856 states and 7814 transitions.
[2020-05-30 20:22:53,277 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 28
[2020-05-30 20:22:53,289 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6856 states to 6856 states and 7814 transitions.
[2020-05-30 20:22:53,289 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1355
[2020-05-30 20:22:53,290 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1355
[2020-05-30 20:22:53,290 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6856 states and 7814 transitions.
[2020-05-30 20:22:53,293 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:22:53,293 INFO  L728         BuchiCegarLoop]: Abstraction has 6856 states and 7814 transitions.
[2020-05-30 20:22:53,295 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6856 states and 7814 transitions.
[2020-05-30 20:22:53,323 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6856 to 6810.
[2020-05-30 20:22:53,323 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6810 states.
[2020-05-30 20:22:53,331 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6810 states to 6810 states and 7754 transitions.
[2020-05-30 20:22:53,331 INFO  L751         BuchiCegarLoop]: Abstraction has 6810 states and 7754 transitions.
[2020-05-30 20:22:53,331 INFO  L631         BuchiCegarLoop]: Abstraction has 6810 states and 7754 transitions.
[2020-05-30 20:22:53,331 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-05-30 20:22:53,331 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6810 states and 7754 transitions.
[2020-05-30 20:22:53,337 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 28
[2020-05-30 20:22:53,338 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:22:53,338 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:22:53,339 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:22:53,340 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -437875663;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -1702767056;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND TRUE   DType[to] == EPXCrowdsale
[L3111]        CALL        call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L2307]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2308]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2309]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2310]                    gas := gas - 4;
[L2311]        CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L2311]        RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2312]        COND FALSE  !(revert)
[L3111]        RET         call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L3112]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:22:53,345 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:22:53,345 INFO  L82        PathProgramCache]: Analyzing trace with hash -888437478, now seen corresponding path program 1 times
[2020-05-30 20:22:53,346 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:22:53,368 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:22:53,631 INFO  L134       CoverageAnalysis]: Checked inductivity of 947 backedges. 131 proven. 100 refuted. 0 times theorem prover too weak. 716 trivial. 0 not checked.
[2020-05-30 20:22:53,631 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:22:53,632 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-30 20:22:53,632 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:22:53,632 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 20:22:53,632 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-05-30 20:22:53,632 INFO  L87              Difference]: Start difference. First operand 6810 states and 7754 transitions. cyclomatic complexity: 951 Second operand 11 states.
[2020-05-30 20:22:54,496 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:22:54,497 INFO  L93              Difference]: Finished difference Result 6447 states and 7279 transitions.
[2020-05-30 20:22:54,497 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-05-30 20:22:54,497 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6447 states and 7279 transitions.
[2020-05-30 20:22:54,508 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 18
[2020-05-30 20:22:54,522 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6447 states to 6295 states and 7106 transitions.
[2020-05-30 20:22:54,522 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1059
[2020-05-30 20:22:54,523 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1059
[2020-05-30 20:22:54,523 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6295 states and 7106 transitions.
[2020-05-30 20:22:54,526 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:22:54,526 INFO  L728         BuchiCegarLoop]: Abstraction has 6295 states and 7106 transitions.
[2020-05-30 20:22:54,528 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6295 states and 7106 transitions.
[2020-05-30 20:22:54,554 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6295 to 6257.
[2020-05-30 20:22:54,554 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6257 states.
[2020-05-30 20:22:54,561 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6257 states to 6257 states and 7057 transitions.
[2020-05-30 20:22:54,561 INFO  L751         BuchiCegarLoop]: Abstraction has 6257 states and 7057 transitions.
[2020-05-30 20:22:54,561 INFO  L631         BuchiCegarLoop]: Abstraction has 6257 states and 7057 transitions.
[2020-05-30 20:22:54,561 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-05-30 20:22:54,561 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6257 states and 7057 transitions.
[2020-05-30 20:22:54,567 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 18
[2020-05-30 20:22:54,567 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:22:54,567 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:22:54,568 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:22:54,568 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1137288944;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1137288944;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:22:54,572 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:22:54,572 INFO  L82        PathProgramCache]: Analyzing trace with hash -1051549217, now seen corresponding path program 1 times
[2020-05-30 20:22:54,573 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:22:54,598 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:22:54,879 INFO  L134       CoverageAnalysis]: Checked inductivity of 246 backedges. 136 proven. 4 refuted. 0 times theorem prover too weak. 106 trivial. 0 not checked.
[2020-05-30 20:22:54,879 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:22:54,880 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [17] total 17
[2020-05-30 20:22:54,880 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:22:54,880 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-05-30 20:22:54,880 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=39, Invalid=267, Unknown=0, NotChecked=0, Total=306
[2020-05-30 20:22:54,881 INFO  L87              Difference]: Start difference. First operand 6257 states and 7057 transitions. cyclomatic complexity: 815 Second operand 18 states.
[2020-05-30 20:22:56,920 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:22:56,920 INFO  L93              Difference]: Finished difference Result 7850 states and 8987 transitions.
[2020-05-30 20:22:56,920 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-05-30 20:22:56,920 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7850 states and 8987 transitions.
[2020-05-30 20:22:56,931 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 32
[2020-05-30 20:22:56,947 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7850 states to 7809 states and 8946 transitions.
[2020-05-30 20:22:56,947 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1427
[2020-05-30 20:22:56,948 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1427
[2020-05-30 20:22:56,948 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7809 states and 8946 transitions.
[2020-05-30 20:22:56,952 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:22:56,952 INFO  L728         BuchiCegarLoop]: Abstraction has 7809 states and 8946 transitions.
[2020-05-30 20:22:56,954 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7809 states and 8946 transitions.
[2020-05-30 20:22:56,984 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7809 to 7789.
[2020-05-30 20:22:56,985 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7789 states.
[2020-05-30 20:22:56,993 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7789 states to 7789 states and 8920 transitions.
[2020-05-30 20:22:56,994 INFO  L751         BuchiCegarLoop]: Abstraction has 7789 states and 8920 transitions.
[2020-05-30 20:22:56,994 INFO  L631         BuchiCegarLoop]: Abstraction has 7789 states and 8920 transitions.
[2020-05-30 20:22:56,994 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-05-30 20:22:56,994 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7789 states and 8920 transitions.
[2020-05-30 20:22:57,001 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 32
[2020-05-30 20:22:57,001 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:22:57,001 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:22:57,002 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:22:57,003 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -437875663;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -1702767056;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]              havoc msgsender_MSG;
[L3864]              havoc msgvalue_MSG;
[L3865]              havoc choice;
[L3866]              havoc initialEPXtokenCount_s286;
[L3867]              havoc remainingEPXtokenCount_s299;
[L3868]              havoc _fundingStartBlock_s391;
[L3869]              havoc _fundingEndBlock_s391;
[L3870]              havoc response_s391;
[L3871]              havoc _amount_s558;
[L3872]              havoc tmpNow;
[L3873]              havoc gas;
[L3874]              assume gas > 4000000 && gas <= 8000000;
[L3875]              tmpNow := now;
[L3876]              havoc now;
[L3877]              assume now > tmpNow;
[L3878]              assume msgsender_MSG != null;
[L3879]              assume DType[msgsender_MSG] != owned;
[L3880]              assume DType[msgsender_MSG] != safeMath;
[L3881]              assume DType[msgsender_MSG] != StandardToken;
[L3882]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]              Alloc[msgsender_MSG] := true;
[L3884]  COND FALSE  !(choice == 7)
[L3893]  COND FALSE  !(choice == 6)
[L3902]  COND FALSE  !(choice == 5)
[L3911]  COND FALSE  !(choice == 4)
[L3920]  COND FALSE  !(choice == 3)
[L3929]  COND FALSE  !(choice == 2)
[L3938]  COND FALSE  !(choice == 1)
[L3966]  RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:22:57,006 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:22:57,006 INFO  L82        PathProgramCache]: Analyzing trace with hash -583324478, now seen corresponding path program 1 times
[2020-05-30 20:22:57,007 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:22:57,037 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:22:57,434 INFO  L134       CoverageAnalysis]: Checked inductivity of 409 backedges. 2 proven. 14 refuted. 0 times theorem prover too weak. 393 trivial. 0 not checked.
[2020-05-30 20:22:57,434 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:22:57,434 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [20] total 20
[2020-05-30 20:22:57,435 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:22:57,435 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 21 interpolants.
[2020-05-30 20:22:57,435 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=61, Invalid=359, Unknown=0, NotChecked=0, Total=420
[2020-05-30 20:22:57,435 INFO  L87              Difference]: Start difference. First operand 7789 states and 8920 transitions. cyclomatic complexity: 1146 Second operand 21 states.
[2020-05-30 20:23:00,075 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:23:00,075 INFO  L93              Difference]: Finished difference Result 7901 states and 9188 transitions.
[2020-05-30 20:23:00,075 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-05-30 20:23:00,075 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7901 states and 9188 transitions.
[2020-05-30 20:23:00,089 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 32
[2020-05-30 20:23:00,106 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7901 states to 7901 states and 9188 transitions.
[2020-05-30 20:23:00,107 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1453
[2020-05-30 20:23:00,107 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1453
[2020-05-30 20:23:00,107 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7901 states and 9188 transitions.
[2020-05-30 20:23:00,112 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:23:00,112 INFO  L728         BuchiCegarLoop]: Abstraction has 7901 states and 9188 transitions.
[2020-05-30 20:23:00,115 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7901 states and 9188 transitions.
[2020-05-30 20:23:00,150 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7901 to 7855.
[2020-05-30 20:23:00,151 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7855 states.
[2020-05-30 20:23:00,160 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7855 states to 7855 states and 9079 transitions.
[2020-05-30 20:23:00,161 INFO  L751         BuchiCegarLoop]: Abstraction has 7855 states and 9079 transitions.
[2020-05-30 20:23:00,161 INFO  L631         BuchiCegarLoop]: Abstraction has 7855 states and 9079 transitions.
[2020-05-30 20:23:00,161 INFO  L445         BuchiCegarLoop]: ======== Iteration 25============
[2020-05-30 20:23:00,161 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7855 states and 9079 transitions.
[2020-05-30 20:23:00,169 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 32
[2020-05-30 20:23:00,169 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:23:00,169 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:23:00,170 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:23:00,170 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -437875663;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume msgsender_MSG == user;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -1702767056;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]              havoc msgsender_MSG;
[L3864]              havoc msgvalue_MSG;
[L3865]              havoc choice;
[L3866]              havoc initialEPXtokenCount_s286;
[L3867]              havoc remainingEPXtokenCount_s299;
[L3868]              havoc _fundingStartBlock_s391;
[L3869]              havoc _fundingEndBlock_s391;
[L3870]              havoc response_s391;
[L3871]              havoc _amount_s558;
[L3872]              havoc tmpNow;
[L3873]              havoc gas;
[L3874]              assume gas > 4000000 && gas <= 8000000;
[L3875]              tmpNow := now;
[L3876]              havoc now;
[L3877]              assume now > tmpNow;
[L3878]              assume msgsender_MSG != null;
[L3879]              assume DType[msgsender_MSG] != owned;
[L3880]              assume DType[msgsender_MSG] != safeMath;
[L3881]              assume DType[msgsender_MSG] != StandardToken;
[L3882]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]              Alloc[msgsender_MSG] := true;
[L3884]  COND FALSE  !(choice == 7)
[L3893]  COND FALSE  !(choice == 6)
[L3902]  COND FALSE  !(choice == 5)
[L3911]  COND FALSE  !(choice == 4)
[L3920]  COND FALSE  !(choice == 3)
[L3929]  COND FALSE  !(choice == 2)
[L3938]  COND FALSE  !(choice == 1)
[L3966]  RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:23:00,174 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:23:00,174 INFO  L82        PathProgramCache]: Analyzing trace with hash 304382380, now seen corresponding path program 1 times
[2020-05-30 20:23:00,175 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:23:00,211 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:23:00,854 INFO  L134       CoverageAnalysis]: Checked inductivity of 409 backedges. 180 proven. 16 refuted. 0 times theorem prover too weak. 213 trivial. 0 not checked.
[2020-05-30 20:23:00,854 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:23:00,854 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [36] total 36
[2020-05-30 20:23:00,855 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:23:00,855 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 37 interpolants.
[2020-05-30 20:23:00,855 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=97, Invalid=1235, Unknown=0, NotChecked=0, Total=1332
[2020-05-30 20:23:00,855 INFO  L87              Difference]: Start difference. First operand 7855 states and 9079 transitions. cyclomatic complexity: 1248 Second operand 37 states.
[2020-05-30 20:23:12,782 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:23:12,783 INFO  L93              Difference]: Finished difference Result 16677 states and 19474 transitions.
[2020-05-30 20:23:12,783 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 58 states. 
[2020-05-30 20:23:12,783 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 16677 states and 19474 transitions.
[2020-05-30 20:23:12,816 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 64
[2020-05-30 20:23:12,860 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 16677 states to 16677 states and 19470 transitions.
[2020-05-30 20:23:12,861 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2941
[2020-05-30 20:23:12,862 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2941
[2020-05-30 20:23:12,862 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 16677 states and 19470 transitions.
[2020-05-30 20:23:12,872 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:23:12,872 INFO  L728         BuchiCegarLoop]: Abstraction has 16677 states and 19470 transitions.
[2020-05-30 20:23:12,878 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 16677 states and 19470 transitions.
[2020-05-30 20:23:12,966 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 16677 to 16562.
[2020-05-30 20:23:12,966 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 16562 states.
[2020-05-30 20:23:12,992 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 16562 states to 16562 states and 19316 transitions.
[2020-05-30 20:23:12,992 INFO  L751         BuchiCegarLoop]: Abstraction has 16562 states and 19316 transitions.
[2020-05-30 20:23:12,993 INFO  L631         BuchiCegarLoop]: Abstraction has 16562 states and 19316 transitions.
[2020-05-30 20:23:12,993 INFO  L445         BuchiCegarLoop]: ======== Iteration 26============
[2020-05-30 20:23:12,993 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 16562 states and 19316 transitions.
[2020-05-30 20:23:13,013 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 64
[2020-05-30 20:23:13,013 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:23:13,013 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:23:13,015 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:23:13,015 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -437875663;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume msgsender_MSG == user;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -1702767056;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND TRUE   DType[to] == EPXCrowdsale
[L3111]        CALL        call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L2307]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2308]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2309]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2310]                    gas := gas - 4;
[L2311]        CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L2311]        RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2312]        COND FALSE  !(revert)
[L3111]        RET         call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L3112]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND TRUE   DType[to] == EPXCrowdsale
[L3111]        CALL        call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L2307]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2308]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2309]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2310]                    gas := gas - 4;
[L2311]        CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L2311]        RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2312]        COND FALSE  !(revert)
[L3111]        RET         call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L3112]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(msgsender_MSG == user);
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:23:13,022 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:23:13,022 INFO  L82        PathProgramCache]: Analyzing trace with hash 1483258946, now seen corresponding path program 1 times
[2020-05-30 20:23:13,023 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:23:13,054 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:23:13,267 INFO  L134       CoverageAnalysis]: Checked inductivity of 729 backedges. 23 proven. 0 refuted. 0 times theorem prover too weak. 706 trivial. 0 not checked.
[2020-05-30 20:23:13,267 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:23:13,267 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-05-30 20:23:13,268 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:23:13,268 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-30 20:23:13,268 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-05-30 20:23:13,268 INFO  L87              Difference]: Start difference. First operand 16562 states and 19316 transitions. cyclomatic complexity: 2800 Second operand 7 states.
[2020-05-30 20:23:13,407 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:23:13,408 INFO  L93              Difference]: Finished difference Result 16541 states and 19247 transitions.
[2020-05-30 20:23:13,408 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-05-30 20:23:13,408 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 16541 states and 19247 transitions.
[2020-05-30 20:23:13,442 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 64
[2020-05-30 20:23:13,491 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 16541 states to 16468 states and 19171 transitions.
[2020-05-30 20:23:13,491 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2826
[2020-05-30 20:23:13,492 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2826
[2020-05-30 20:23:13,492 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 16468 states and 19171 transitions.
[2020-05-30 20:23:13,503 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:23:13,503 INFO  L728         BuchiCegarLoop]: Abstraction has 16468 states and 19171 transitions.
[2020-05-30 20:23:13,508 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 16468 states and 19171 transitions.
[2020-05-30 20:23:13,592 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 16468 to 16468.
[2020-05-30 20:23:13,592 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 16468 states.
[2020-05-30 20:23:13,618 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 16468 states to 16468 states and 19171 transitions.
[2020-05-30 20:23:13,618 INFO  L751         BuchiCegarLoop]: Abstraction has 16468 states and 19171 transitions.
[2020-05-30 20:23:13,618 INFO  L631         BuchiCegarLoop]: Abstraction has 16468 states and 19171 transitions.
[2020-05-30 20:23:13,618 INFO  L445         BuchiCegarLoop]: ======== Iteration 27============
[2020-05-30 20:23:13,618 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 16468 states and 19171 transitions.
[2020-05-30 20:23:13,637 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 64
[2020-05-30 20:23:13,637 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:23:13,637 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:23:13,639 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:23:13,639 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -437875663;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume msgsender_MSG == user;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -1702767056;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(msgsender_MSG == user);
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:23:13,644 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:23:13,644 INFO  L82        PathProgramCache]: Analyzing trace with hash 1672326467, now seen corresponding path program 1 times
[2020-05-30 20:23:13,644 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:23:13,682 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:23:14,144 INFO  L134       CoverageAnalysis]: Checked inductivity of 644 backedges. 11 proven. 208 refuted. 0 times theorem prover too weak. 425 trivial. 0 not checked.
[2020-05-30 20:23:14,144 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:23:14,144 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [21] total 21
[2020-05-30 20:23:14,145 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:23:14,145 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 21 interpolants.
[2020-05-30 20:23:14,145 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=61, Invalid=359, Unknown=0, NotChecked=0, Total=420
[2020-05-30 20:23:14,145 INFO  L87              Difference]: Start difference. First operand 16468 states and 19171 transitions. cyclomatic complexity: 2749 Second operand 21 states.
[2020-05-30 20:23:16,946 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:23:16,946 INFO  L93              Difference]: Finished difference Result 16544 states and 19389 transitions.
[2020-05-30 20:23:16,946 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-05-30 20:23:16,947 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 16544 states and 19389 transitions.
[2020-05-30 20:23:16,987 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 64
[2020-05-30 20:23:17,037 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 16544 states to 16465 states and 19285 transitions.
[2020-05-30 20:23:17,037 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2844
[2020-05-30 20:23:17,039 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2844
[2020-05-30 20:23:17,039 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 16465 states and 19285 transitions.
[2020-05-30 20:23:17,050 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:23:17,050 INFO  L728         BuchiCegarLoop]: Abstraction has 16465 states and 19285 transitions.
[2020-05-30 20:23:17,055 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 16465 states and 19285 transitions.
[2020-05-30 20:23:17,147 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 16465 to 16433.
[2020-05-30 20:23:17,147 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 16433 states.
[2020-05-30 20:23:17,173 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 16433 states to 16433 states and 19222 transitions.
[2020-05-30 20:23:17,174 INFO  L751         BuchiCegarLoop]: Abstraction has 16433 states and 19222 transitions.
[2020-05-30 20:23:17,174 INFO  L631         BuchiCegarLoop]: Abstraction has 16433 states and 19222 transitions.
[2020-05-30 20:23:17,174 INFO  L445         BuchiCegarLoop]: ======== Iteration 28============
[2020-05-30 20:23:17,174 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 16433 states and 19222 transitions.
[2020-05-30 20:23:17,193 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 64
[2020-05-30 20:23:17,193 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:23:17,193 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:23:17,195 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:23:17,195 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -437875663;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0
[L2904]                    gas := gas - 20317;
[L2905]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2906]                    gas := gas - 20267;
[L2907]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2908]                    gas := gas - 409;
[L2909]                    CurrentStatus_EPXCrowdsale[this] := 1905681161;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND TRUE   DType[to] == EPXCrowdsale
[L3111]        CALL        call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L2307]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2308]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2309]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2310]                    gas := gas - 4;
[L2311]        CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L2311]        RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2312]        COND FALSE  !(revert)
[L3111]        RET         call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L3112]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND TRUE   choice == 3
[L3922]                    gas := gas - 21000;
[L3923]        COND TRUE   gas >= 0
[L3925]                    assume msgvalue_MSG == 0;
[L3926]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND TRUE   DType[to] == EPXCrowdsale
[L3111]        CALL        call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L2307]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2308]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2309]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2310]                    gas := gas - 4;
[L2311]        CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L2311]        RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2312]        COND FALSE  !(revert)
[L3111]        RET         call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L3112]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L3926]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:23:17,201 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:23:17,201 INFO  L82        PathProgramCache]: Analyzing trace with hash -316973570, now seen corresponding path program 1 times
[2020-05-30 20:23:17,202 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:23:17,240 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:23:17,605 INFO  L134       CoverageAnalysis]: Checked inductivity of 911 backedges. 291 proven. 17 refuted. 0 times theorem prover too weak. 603 trivial. 0 not checked.
[2020-05-30 20:23:17,606 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:23:17,606 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [32] total 32
[2020-05-30 20:23:17,606 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:23:17,606 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-05-30 20:23:17,606 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=412, Invalid=580, Unknown=0, NotChecked=0, Total=992
[2020-05-30 20:23:17,607 INFO  L87              Difference]: Start difference. First operand 16433 states and 19222 transitions. cyclomatic complexity: 2842 Second operand 32 states.
[2020-05-30 20:23:18,993 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:23:18,993 INFO  L93              Difference]: Finished difference Result 19264 states and 23539 transitions.
[2020-05-30 20:23:18,994 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 59 states. 
[2020-05-30 20:23:18,994 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 19264 states and 23539 transitions.
[2020-05-30 20:23:19,053 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 112
[2020-05-30 20:23:19,118 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 19264 states to 17725 states and 21429 transitions.
[2020-05-30 20:23:19,118 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3660
[2020-05-30 20:23:19,120 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3668
[2020-05-30 20:23:19,120 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 17725 states and 21429 transitions.
[2020-05-30 20:23:19,134 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:23:19,134 INFO  L728         BuchiCegarLoop]: Abstraction has 17725 states and 21429 transitions.
[2020-05-30 20:23:19,140 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 17725 states and 21429 transitions.
[2020-05-30 20:23:19,257 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 17725 to 14982.
[2020-05-30 20:23:19,257 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 14982 states.
[2020-05-30 20:23:19,282 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 14982 states to 14982 states and 17397 transitions.
[2020-05-30 20:23:19,283 INFO  L751         BuchiCegarLoop]: Abstraction has 14982 states and 17397 transitions.
[2020-05-30 20:23:19,283 INFO  L631         BuchiCegarLoop]: Abstraction has 14982 states and 17397 transitions.
[2020-05-30 20:23:19,283 INFO  L445         BuchiCegarLoop]: ======== Iteration 29============
[2020-05-30 20:23:19,283 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 14982 states and 17397 transitions.
[2020-05-30 20:23:19,301 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 56
[2020-05-30 20:23:19,301 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:23:19,301 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:23:19,303 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:23:19,303 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -437875663;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1137288944;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]              havoc msgsender_MSG;
[L3864]              havoc msgvalue_MSG;
[L3865]              havoc choice;
[L3866]              havoc initialEPXtokenCount_s286;
[L3867]              havoc remainingEPXtokenCount_s299;
[L3868]              havoc _fundingStartBlock_s391;
[L3869]              havoc _fundingEndBlock_s391;
[L3870]              havoc response_s391;
[L3871]              havoc _amount_s558;
[L3872]              havoc tmpNow;
[L3873]              havoc gas;
[L3874]              assume gas > 4000000 && gas <= 8000000;
[L3875]              tmpNow := now;
[L3876]              havoc now;
[L3877]              assume now > tmpNow;
[L3878]              assume msgsender_MSG != null;
[L3879]              assume DType[msgsender_MSG] != owned;
[L3880]              assume DType[msgsender_MSG] != safeMath;
[L3881]              assume DType[msgsender_MSG] != StandardToken;
[L3882]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]              Alloc[msgsender_MSG] := true;
[L3884]  COND FALSE  !(choice == 7)
[L3893]  COND FALSE  !(choice == 6)
[L3902]  COND FALSE  !(choice == 5)
[L3911]  COND FALSE  !(choice == 4)
[L3920]  COND FALSE  !(choice == 3)
[L3929]  COND FALSE  !(choice == 2)
[L3938]  COND FALSE  !(choice == 1)
[L3966]  RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:23:19,308 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:23:19,308 INFO  L82        PathProgramCache]: Analyzing trace with hash -1562329471, now seen corresponding path program 1 times
[2020-05-30 20:23:19,308 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:23:19,344 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:23:19,839 INFO  L134       CoverageAnalysis]: Checked inductivity of 891 backedges. 433 proven. 24 refuted. 0 times theorem prover too weak. 434 trivial. 0 not checked.
[2020-05-30 20:23:19,840 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:23:19,840 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [26] total 26
[2020-05-30 20:23:19,840 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:23:19,840 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 27 interpolants.
[2020-05-30 20:23:19,840 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=78, Invalid=624, Unknown=0, NotChecked=0, Total=702
[2020-05-30 20:23:19,841 INFO  L87              Difference]: Start difference. First operand 14982 states and 17397 transitions. cyclomatic complexity: 2468 Second operand 27 states.
[2020-05-30 20:23:23,290 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:23:23,290 INFO  L93              Difference]: Finished difference Result 15213 states and 17548 transitions.
[2020-05-30 20:23:23,290 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 30 states. 
[2020-05-30 20:23:23,290 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 15213 states and 17548 transitions.
[2020-05-30 20:23:23,326 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 32
[2020-05-30 20:23:23,356 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 15213 states to 11876 states and 13541 transitions.
[2020-05-30 20:23:23,356 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2294
[2020-05-30 20:23:23,357 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2294
[2020-05-30 20:23:23,357 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11876 states and 13541 transitions.
[2020-05-30 20:23:23,364 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:23:23,364 INFO  L728         BuchiCegarLoop]: Abstraction has 11876 states and 13541 transitions.
[2020-05-30 20:23:23,368 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11876 states and 13541 transitions.
[2020-05-30 20:23:23,427 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11876 to 11837.
[2020-05-30 20:23:23,427 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11837 states.
[2020-05-30 20:23:23,443 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11837 states to 11837 states and 13469 transitions.
[2020-05-30 20:23:23,443 INFO  L751         BuchiCegarLoop]: Abstraction has 11837 states and 13469 transitions.
[2020-05-30 20:23:23,443 INFO  L631         BuchiCegarLoop]: Abstraction has 11837 states and 13469 transitions.
[2020-05-30 20:23:23,443 INFO  L445         BuchiCegarLoop]: ======== Iteration 30============
[2020-05-30 20:23:23,443 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11837 states and 13469 transitions.
[2020-05-30 20:23:23,455 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 32
[2020-05-30 20:23:23,455 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:23:23,456 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:23:23,457 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:23:23,457 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -437875663;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume msgsender_MSG == user;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -1702767056;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]              havoc msgsender_MSG;
[L3864]              havoc msgvalue_MSG;
[L3865]              havoc choice;
[L3866]              havoc initialEPXtokenCount_s286;
[L3867]              havoc remainingEPXtokenCount_s299;
[L3868]              havoc _fundingStartBlock_s391;
[L3869]              havoc _fundingEndBlock_s391;
[L3870]              havoc response_s391;
[L3871]              havoc _amount_s558;
[L3872]              havoc tmpNow;
[L3873]              havoc gas;
[L3874]              assume gas > 4000000 && gas <= 8000000;
[L3875]              tmpNow := now;
[L3876]              havoc now;
[L3877]              assume now > tmpNow;
[L3878]              assume msgsender_MSG != null;
[L3879]              assume DType[msgsender_MSG] != owned;
[L3880]              assume DType[msgsender_MSG] != safeMath;
[L3881]              assume DType[msgsender_MSG] != StandardToken;
[L3882]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]              Alloc[msgsender_MSG] := true;
[L3884]  COND FALSE  !(choice == 7)
[L3893]  COND FALSE  !(choice == 6)
[L3902]  COND FALSE  !(choice == 5)
[L3911]  COND FALSE  !(choice == 4)
[L3920]  COND FALSE  !(choice == 3)
[L3929]  COND FALSE  !(choice == 2)
[L3938]  COND FALSE  !(choice == 1)
[L3966]  RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:23:23,461 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:23:23,461 INFO  L82        PathProgramCache]: Analyzing trace with hash -1801797613, now seen corresponding path program 1 times
[2020-05-30 20:23:23,462 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:23:23,523 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:23:24,172 INFO  L134       CoverageAnalysis]: Checked inductivity of 891 backedges. 46 proven. 48 refuted. 0 times theorem prover too weak. 797 trivial. 0 not checked.
[2020-05-30 20:23:24,172 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:23:24,172 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [30] total 30
[2020-05-30 20:23:24,173 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:23:24,173 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 31 interpolants.
[2020-05-30 20:23:24,173 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=82, Invalid=848, Unknown=0, NotChecked=0, Total=930
[2020-05-30 20:23:24,173 INFO  L87              Difference]: Start difference. First operand 11837 states and 13469 transitions. cyclomatic complexity: 1682 Second operand 31 states.
[2020-05-30 20:23:31,724 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:23:31,725 INFO  L93              Difference]: Finished difference Result 11929 states and 13629 transitions.
[2020-05-30 20:23:31,725 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 44 states. 
[2020-05-30 20:23:31,725 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11929 states and 13629 transitions.
[2020-05-30 20:23:31,754 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 32
[2020-05-30 20:23:31,784 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11929 states to 11890 states and 13584 transitions.
[2020-05-30 20:23:31,784 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2284
[2020-05-30 20:23:31,785 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2318
[2020-05-30 20:23:31,785 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11890 states and 13584 transitions.
[2020-05-30 20:23:31,792 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:23:31,792 INFO  L728         BuchiCegarLoop]: Abstraction has 11890 states and 13584 transitions.
[2020-05-30 20:23:31,796 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11890 states and 13584 transitions.
[2020-05-30 20:23:31,855 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11890 to 11863.
[2020-05-30 20:23:31,855 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11863 states.
[2020-05-30 20:23:31,872 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11863 states to 11863 states and 13545 transitions.
[2020-05-30 20:23:31,872 INFO  L751         BuchiCegarLoop]: Abstraction has 11863 states and 13545 transitions.
[2020-05-30 20:23:31,872 INFO  L631         BuchiCegarLoop]: Abstraction has 11863 states and 13545 transitions.
[2020-05-30 20:23:31,872 INFO  L445         BuchiCegarLoop]: ======== Iteration 31============
[2020-05-30 20:23:31,872 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11863 states and 13545 transitions.
[2020-05-30 20:23:31,884 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 32
[2020-05-30 20:23:31,884 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:23:31,884 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:23:31,885 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:23:31,886 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0)
[L2913]                    gas := gas - 876;
[L2914]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2915]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2916]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2917]                    assume now >= 0;
[L2918]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2919-L2921]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0 && now <= fundingEndBlock_EPXCrowdsale[this])
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -1702767056;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(msgsender_MSG == user);
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]              havoc msgsender_MSG;
[L3864]              havoc msgvalue_MSG;
[L3865]              havoc choice;
[L3866]              havoc initialEPXtokenCount_s286;
[L3867]              havoc remainingEPXtokenCount_s299;
[L3868]              havoc _fundingStartBlock_s391;
[L3869]              havoc _fundingEndBlock_s391;
[L3870]              havoc response_s391;
[L3871]              havoc _amount_s558;
[L3872]              havoc tmpNow;
[L3873]              havoc gas;
[L3874]              assume gas > 4000000 && gas <= 8000000;
[L3875]              tmpNow := now;
[L3876]              havoc now;
[L3877]              assume now > tmpNow;
[L3878]              assume msgsender_MSG != null;
[L3879]              assume DType[msgsender_MSG] != owned;
[L3880]              assume DType[msgsender_MSG] != safeMath;
[L3881]              assume DType[msgsender_MSG] != StandardToken;
[L3882]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]              Alloc[msgsender_MSG] := true;
[L3884]  COND FALSE  !(choice == 7)
[L3893]  COND FALSE  !(choice == 6)
[L3902]  COND FALSE  !(choice == 5)
[L3911]  COND FALSE  !(choice == 4)
[L3920]  COND FALSE  !(choice == 3)
[L3929]  COND FALSE  !(choice == 2)
[L3938]  COND FALSE  !(choice == 1)
[L3966]  RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:23:31,889 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:23:31,890 INFO  L82        PathProgramCache]: Analyzing trace with hash -1323303160, now seen corresponding path program 1 times
[2020-05-30 20:23:31,890 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:23:31,914 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:23:32,306 INFO  L134       CoverageAnalysis]: Checked inductivity of 656 backedges. 38 proven. 147 refuted. 0 times theorem prover too weak. 471 trivial. 0 not checked.
[2020-05-30 20:23:32,306 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:23:32,306 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [14] total 14
[2020-05-30 20:23:32,307 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:23:32,307 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-05-30 20:23:32,307 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=152, Unknown=0, NotChecked=0, Total=182
[2020-05-30 20:23:32,307 INFO  L87              Difference]: Start difference. First operand 11863 states and 13545 transitions. cyclomatic complexity: 1740 Second operand 14 states.
[2020-05-30 20:23:34,224 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:23:34,224 INFO  L93              Difference]: Finished difference Result 11791 states and 13382 transitions.
[2020-05-30 20:23:34,224 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-30 20:23:34,225 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11791 states and 13382 transitions.
[2020-05-30 20:23:34,253 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 32
[2020-05-30 20:23:34,281 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11791 states to 11791 states and 13382 transitions.
[2020-05-30 20:23:34,282 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2400
[2020-05-30 20:23:34,283 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2400
[2020-05-30 20:23:34,283 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11791 states and 13382 transitions.
[2020-05-30 20:23:34,289 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:23:34,290 INFO  L728         BuchiCegarLoop]: Abstraction has 11791 states and 13382 transitions.
[2020-05-30 20:23:34,293 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11791 states and 13382 transitions.
[2020-05-30 20:23:34,349 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11791 to 11632.
[2020-05-30 20:23:34,349 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11632 states.
[2020-05-30 20:23:34,365 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11632 states to 11632 states and 13168 transitions.
[2020-05-30 20:23:34,365 INFO  L751         BuchiCegarLoop]: Abstraction has 11632 states and 13168 transitions.
[2020-05-30 20:23:34,365 INFO  L631         BuchiCegarLoop]: Abstraction has 11632 states and 13168 transitions.
[2020-05-30 20:23:34,365 INFO  L445         BuchiCegarLoop]: ======== Iteration 32============
[2020-05-30 20:23:34,365 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11632 states and 13168 transitions.
[2020-05-30 20:23:34,377 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 32
[2020-05-30 20:23:34,377 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:23:34,377 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:23:34,378 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:23:34,378 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -1702767056;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(msgsender_MSG == user);
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:23:34,382 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:23:34,382 INFO  L82        PathProgramCache]: Analyzing trace with hash -570756174, now seen corresponding path program 1 times
[2020-05-30 20:23:34,383 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:23:34,472 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:23:34,834 INFO  L134       CoverageAnalysis]: Checked inductivity of 449 backedges. 15 proven. 72 refuted. 0 times theorem prover too weak. 362 trivial. 0 not checked.
[2020-05-30 20:23:34,834 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:23:34,834 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [21] total 21
[2020-05-30 20:23:34,834 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:23:34,834 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 22 interpolants.
[2020-05-30 20:23:34,835 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=62, Invalid=400, Unknown=0, NotChecked=0, Total=462
[2020-05-30 20:23:34,835 INFO  L87              Difference]: Start difference. First operand 11632 states and 13168 transitions. cyclomatic complexity: 1587 Second operand 22 states.
[2020-05-30 20:23:37,615 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:23:37,615 INFO  L93              Difference]: Finished difference Result 11680 states and 13282 transitions.
[2020-05-30 20:23:37,615 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-05-30 20:23:37,615 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11680 states and 13282 transitions.
[2020-05-30 20:23:37,637 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 32
[2020-05-30 20:23:37,662 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11680 states to 11680 states and 13282 transitions.
[2020-05-30 20:23:37,662 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2328
[2020-05-30 20:23:37,663 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2328
[2020-05-30 20:23:37,663 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11680 states and 13282 transitions.
[2020-05-30 20:23:37,669 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:23:37,669 INFO  L728         BuchiCegarLoop]: Abstraction has 11680 states and 13282 transitions.
[2020-05-30 20:23:37,672 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11680 states and 13282 transitions.
[2020-05-30 20:23:37,725 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11680 to 11640.
[2020-05-30 20:23:37,725 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11640 states.
[2020-05-30 20:23:37,741 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11640 states to 11640 states and 13188 transitions.
[2020-05-30 20:23:37,741 INFO  L751         BuchiCegarLoop]: Abstraction has 11640 states and 13188 transitions.
[2020-05-30 20:23:37,741 INFO  L631         BuchiCegarLoop]: Abstraction has 11640 states and 13188 transitions.
[2020-05-30 20:23:37,741 INFO  L445         BuchiCegarLoop]: ======== Iteration 33============
[2020-05-30 20:23:37,742 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11640 states and 13188 transitions.
[2020-05-30 20:23:37,753 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 32
[2020-05-30 20:23:37,753 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:23:37,753 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:23:37,755 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:23:37,755 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -437875663;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume msgsender_MSG == user;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -1702767056;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(msgsender_MSG == user);
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -1702767056;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:23:37,760 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:23:37,760 INFO  L82        PathProgramCache]: Analyzing trace with hash 24821500, now seen corresponding path program 1 times
[2020-05-30 20:23:37,760 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:23:37,827 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:23:38,599 INFO  L134       CoverageAnalysis]: Checked inductivity of 1156 backedges. 57 proven. 113 refuted. 0 times theorem prover too weak. 986 trivial. 0 not checked.
[2020-05-30 20:23:38,599 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:23:38,599 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [33] total 33
[2020-05-30 20:23:38,600 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:23:38,600 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 34 interpolants.
[2020-05-30 20:23:38,600 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=97, Invalid=1025, Unknown=0, NotChecked=0, Total=1122
[2020-05-30 20:23:38,600 INFO  L87              Difference]: Start difference. First operand 11640 states and 13188 transitions. cyclomatic complexity: 1601 Second operand 34 states.
[2020-05-30 20:23:44,127 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:23:44,127 INFO  L93              Difference]: Finished difference Result 8949 states and 10171 transitions.
[2020-05-30 20:23:44,127 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 46 states. 
[2020-05-30 20:23:44,127 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8949 states and 10171 transitions.
[2020-05-30 20:23:44,143 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 16
[2020-05-30 20:23:44,159 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8949 states to 8526 states and 9639 transitions.
[2020-05-30 20:23:44,159 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1146
[2020-05-30 20:23:44,159 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1146
[2020-05-30 20:23:44,159 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8526 states and 9639 transitions.
[2020-05-30 20:23:44,163 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:23:44,163 INFO  L728         BuchiCegarLoop]: Abstraction has 8526 states and 9639 transitions.
[2020-05-30 20:23:44,166 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8526 states and 9639 transitions.
[2020-05-30 20:23:44,202 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8526 to 8519.
[2020-05-30 20:23:44,202 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8519 states.
[2020-05-30 20:23:44,212 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8519 states to 8519 states and 9632 transitions.
[2020-05-30 20:23:44,212 INFO  L751         BuchiCegarLoop]: Abstraction has 8519 states and 9632 transitions.
[2020-05-30 20:23:44,212 INFO  L631         BuchiCegarLoop]: Abstraction has 8519 states and 9632 transitions.
[2020-05-30 20:23:44,212 INFO  L445         BuchiCegarLoop]: ======== Iteration 34============
[2020-05-30 20:23:44,212 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8519 states and 9632 transitions.
[2020-05-30 20:23:44,219 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 16
[2020-05-30 20:23:44,220 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:23:44,220 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:23:44,221 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:23:44,221 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -437875663;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume msgsender_MSG == user;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -1702767056;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -1702767056;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:23:44,226 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:23:44,226 INFO  L82        PathProgramCache]: Analyzing trace with hash 760213242, now seen corresponding path program 2 times
[2020-05-30 20:23:44,227 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:23:44,288 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:23:45,236 INFO  L134       CoverageAnalysis]: Checked inductivity of 1693 backedges. 76 proven. 76 refuted. 0 times theorem prover too weak. 1541 trivial. 0 not checked.
[2020-05-30 20:23:45,236 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:23:45,236 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [34] total 34
[2020-05-30 20:23:45,236 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:23:45,237 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 35 interpolants.
[2020-05-30 20:23:45,237 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=105, Invalid=1085, Unknown=0, NotChecked=0, Total=1190
[2020-05-30 20:23:45,237 INFO  L87              Difference]: Start difference. First operand 8519 states and 9632 transitions. cyclomatic complexity: 1155 Second operand 35 states.
[2020-05-30 20:23:50,502 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:23:50,502 INFO  L93              Difference]: Finished difference Result 8558 states and 9738 transitions.
[2020-05-30 20:23:50,502 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 40 states. 
[2020-05-30 20:23:50,502 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8558 states and 9738 transitions.
[2020-05-30 20:23:50,517 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 16
[2020-05-30 20:23:50,533 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8558 states to 8558 states and 9738 transitions.
[2020-05-30 20:23:50,533 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1146
[2020-05-30 20:23:50,534 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1146
[2020-05-30 20:23:50,534 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8558 states and 9738 transitions.
[2020-05-30 20:23:50,538 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:23:50,538 INFO  L728         BuchiCegarLoop]: Abstraction has 8558 states and 9738 transitions.
[2020-05-30 20:23:50,540 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8558 states and 9738 transitions.
[2020-05-30 20:23:50,576 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8558 to 8539.
[2020-05-30 20:23:50,577 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8539 states.
[2020-05-30 20:23:50,587 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8539 states to 8539 states and 9694 transitions.
[2020-05-30 20:23:50,587 INFO  L751         BuchiCegarLoop]: Abstraction has 8539 states and 9694 transitions.
[2020-05-30 20:23:50,587 INFO  L631         BuchiCegarLoop]: Abstraction has 8539 states and 9694 transitions.
[2020-05-30 20:23:50,587 INFO  L445         BuchiCegarLoop]: ======== Iteration 35============
[2020-05-30 20:23:50,587 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8539 states and 9694 transitions.
[2020-05-30 20:23:50,594 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 16
[2020-05-30 20:23:50,594 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:23:50,594 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:23:50,596 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:23:50,596 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -437875663;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume msgsender_MSG == user;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume msgsender_MSG == user;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -1702767056;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -1702767056;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:23:50,601 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:23:50,601 INFO  L82        PathProgramCache]: Analyzing trace with hash -802639006, now seen corresponding path program 3 times
[2020-05-30 20:23:50,601 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:23:50,672 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:23:51,582 INFO  L134       CoverageAnalysis]: Checked inductivity of 1694 backedges. 119 proven. 126 refuted. 0 times theorem prover too weak. 1449 trivial. 0 not checked.
[2020-05-30 20:23:51,582 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:23:51,583 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [41] total 41
[2020-05-30 20:23:51,583 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:23:51,583 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 42 interpolants.
[2020-05-30 20:23:51,583 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=109, Invalid=1613, Unknown=0, NotChecked=0, Total=1722
[2020-05-30 20:23:51,583 INFO  L87              Difference]: Start difference. First operand 8539 states and 9694 transitions. cyclomatic complexity: 1204 Second operand 42 states.
[2020-05-30 20:23:59,703 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:23:59,703 INFO  L93              Difference]: Finished difference Result 8554 states and 9717 transitions.
[2020-05-30 20:23:59,703 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 41 states. 
[2020-05-30 20:23:59,703 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8554 states and 9717 transitions.
[2020-05-30 20:23:59,720 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 16
[2020-05-30 20:23:59,736 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8554 states to 8546 states and 9694 transitions.
[2020-05-30 20:23:59,736 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1146
[2020-05-30 20:23:59,736 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1146
[2020-05-30 20:23:59,736 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8546 states and 9694 transitions.
[2020-05-30 20:23:59,740 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:23:59,741 INFO  L728         BuchiCegarLoop]: Abstraction has 8546 states and 9694 transitions.
[2020-05-30 20:23:59,743 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8546 states and 9694 transitions.
[2020-05-30 20:23:59,778 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8546 to 8519.
[2020-05-30 20:23:59,778 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8519 states.
[2020-05-30 20:23:59,788 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8519 states to 8519 states and 9625 transitions.
[2020-05-30 20:23:59,788 INFO  L751         BuchiCegarLoop]: Abstraction has 8519 states and 9625 transitions.
[2020-05-30 20:23:59,788 INFO  L631         BuchiCegarLoop]: Abstraction has 8519 states and 9625 transitions.
[2020-05-30 20:23:59,788 INFO  L445         BuchiCegarLoop]: ======== Iteration 36============
[2020-05-30 20:23:59,788 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8519 states and 9625 transitions.
[2020-05-30 20:23:59,795 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 16
[2020-05-30 20:23:59,795 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:23:59,795 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:23:59,797 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:23:59,797 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume msgsender_MSG == user;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -1702767056;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(msgsender_MSG == user);
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -1702767056;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:23:59,802 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:23:59,802 INFO  L82        PathProgramCache]: Analyzing trace with hash -445111408, now seen corresponding path program 1 times
[2020-05-30 20:23:59,803 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:23:59,878 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:24:00,829 INFO  L134       CoverageAnalysis]: Checked inductivity of 1733 backedges. 87 proven. 133 refuted. 0 times theorem prover too weak. 1513 trivial. 0 not checked.
[2020-05-30 20:24:00,829 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:24:00,829 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [34] total 34
[2020-05-30 20:24:00,829 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:24:00,830 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 35 interpolants.
[2020-05-30 20:24:00,830 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=103, Invalid=1087, Unknown=0, NotChecked=0, Total=1190
[2020-05-30 20:24:00,830 INFO  L87              Difference]: Start difference. First operand 8519 states and 9625 transitions. cyclomatic complexity: 1148 Second operand 35 states.
[2020-05-30 20:24:07,010 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:24:07,010 INFO  L93              Difference]: Finished difference Result 8566 states and 9751 transitions.
[2020-05-30 20:24:07,010 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 39 states. 
[2020-05-30 20:24:07,010 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8566 states and 9751 transitions.
[2020-05-30 20:24:07,029 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 16
[2020-05-30 20:24:07,047 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8566 states to 8550 states and 9706 transitions.
[2020-05-30 20:24:07,047 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1146
[2020-05-30 20:24:07,048 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1146
[2020-05-30 20:24:07,048 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8550 states and 9706 transitions.
[2020-05-30 20:24:07,052 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:24:07,052 INFO  L728         BuchiCegarLoop]: Abstraction has 8550 states and 9706 transitions.
[2020-05-30 20:24:07,055 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8550 states and 9706 transitions.
[2020-05-30 20:24:07,090 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8550 to 8531.
[2020-05-30 20:24:07,090 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8531 states.
[2020-05-30 20:24:07,100 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8531 states to 8531 states and 9662 transitions.
[2020-05-30 20:24:07,100 INFO  L751         BuchiCegarLoop]: Abstraction has 8531 states and 9662 transitions.
[2020-05-30 20:24:07,100 INFO  L631         BuchiCegarLoop]: Abstraction has 8531 states and 9662 transitions.
[2020-05-30 20:24:07,100 INFO  L445         BuchiCegarLoop]: ======== Iteration 37============
[2020-05-30 20:24:07,100 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8531 states and 9662 transitions.
[2020-05-30 20:24:07,107 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 16
[2020-05-30 20:24:07,107 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:24:07,107 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:24:07,109 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:24:07,109 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3957]                    assume null == 0;
[L3958]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3958]        RET         call this := FreshRefGenerator__success();
[L3959]                    assume now >= 0;
[L3960]                    assume DType[this] == EPXCrowdsale;
[L3961]                    gas := gas - 53000;
[L3962]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -1017260089;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 772099896;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3962]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3963]                    assume !revert && gas >= 0;
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND TRUE   choice == 5
[L3904]                    gas := gas - 21000;
[L3905]        COND TRUE   gas >= 0
[L3907]                    assume msgvalue_MSG == 0;
[L3908]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -2026447402;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -2026447402;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3908]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume msgsender_MSG == user;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND TRUE   choice == 4
[L3913]                    gas := gas - 21000;
[L3914]        COND TRUE   gas >= 0
[L3916]                    assume msgvalue_MSG >= 0;
[L3917]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume msgsender_MSG == user;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3917]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND TRUE   choice == 2
[L3931]                    gas := gas - 21000;
[L3932]        COND TRUE   gas >= 0
[L3934]                    assume msgvalue_MSG == 0;
[L3935]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]                    gas := gas - 828;
[L3668]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -1702767056;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3935]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(msgsender_MSG == user);
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3966]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3863]                    havoc msgsender_MSG;
[L3864]                    havoc msgvalue_MSG;
[L3865]                    havoc choice;
[L3866]                    havoc initialEPXtokenCount_s286;
[L3867]                    havoc remainingEPXtokenCount_s299;
[L3868]                    havoc _fundingStartBlock_s391;
[L3869]                    havoc _fundingEndBlock_s391;
[L3870]                    havoc response_s391;
[L3871]                    havoc _amount_s558;
[L3872]                    havoc tmpNow;
[L3873]                    havoc gas;
[L3874]                    assume gas > 4000000 && gas <= 8000000;
[L3875]                    tmpNow := now;
[L3876]                    havoc now;
[L3877]                    assume now > tmpNow;
[L3878]                    assume msgsender_MSG != null;
[L3879]                    assume DType[msgsender_MSG] != owned;
[L3880]                    assume DType[msgsender_MSG] != safeMath;
[L3881]                    assume DType[msgsender_MSG] != StandardToken;
[L3882]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3883]                    Alloc[msgsender_MSG] := true;
[L3884]        COND FALSE  !(choice == 7)
[L3893]        COND FALSE  !(choice == 6)
[L3902]        COND FALSE  !(choice == 5)
[L3911]        COND FALSE  !(choice == 4)
[L3920]        COND FALSE  !(choice == 3)
[L3929]        COND FALSE  !(choice == 2)
[L3938]        COND TRUE   choice == 1
[L3940]                    gas := gas - 21000;
[L3941]        COND TRUE   gas >= 0
[L3943]                    assume msgvalue_MSG == 0;
[L3944]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3597]                    havoc __exception;
[L3598]        COND FALSE  !(__exception)
[L3637]        COND TRUE   Balance[from] >= amount
[L3639]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3330]                    assume Balance[from] >= amount;
[L3331]                    Balance[from] := Balance[from] - amount;
[L3332]                    Balance[to] := Balance[to] + amount;
[L3333]        COND FALSE  !(choice == 0)
[L3339]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3639]        RET         call FallbackDispatch__success(from, to, amount);
[L3640]                    success := true;
[L3647]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3944]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3966]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:24:07,114 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:24:07,115 INFO  L82        PathProgramCache]: Analyzing trace with hash -1333883182, now seen corresponding path program 2 times
[2020-05-30 20:24:07,115 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:24:07,193 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:24:08,166 INFO  L134       CoverageAnalysis]: Checked inductivity of 1734 backedges. 130 proven. 175 refuted. 0 times theorem prover too weak. 1429 trivial. 0 not checked.
[2020-05-30 20:24:08,167 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:24:08,167 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [44] total 44
[2020-05-30 20:24:08,167 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:24:08,167 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 45 interpolants.
[2020-05-30 20:24:08,167 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=127, Invalid=1853, Unknown=0, NotChecked=0, Total=1980
[2020-05-30 20:24:08,168 INFO  L87              Difference]: Start difference. First operand 8531 states and 9662 transitions. cyclomatic complexity: 1179 Second operand 45 states.
[2020-05-30 20:24:13,735 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:24:13,736 INFO  L93              Difference]: Finished difference Result 5830 states and 6624 transitions.
[2020-05-30 20:24:13,736 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 42 states. 
[2020-05-30 20:24:13,736 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5830 states and 6624 transitions.
[2020-05-30 20:24:13,749 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-05-30 20:24:13,749 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5830 states to 0 states and 0 transitions.
[2020-05-30 20:24:13,749 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-05-30 20:24:13,750 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-05-30 20:24:13,750 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-05-30 20:24:13,750 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:24:13,750 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-30 20:24:13,750 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-30 20:24:13,750 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-30 20:24:13,750 INFO  L445         BuchiCegarLoop]: ======== Iteration 38============
[2020-05-30 20:24:13,750 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-05-30 20:24:13,750 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-05-30 20:24:13,750 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-05-30 20:24:13,754 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 30.05 08:24:13 BasicIcfg
[2020-05-30 20:24:13,754 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-05-30 20:24:13,755 INFO  L168              Benchmark]: Toolchain (without parser) took 100712.71 ms. Allocated memory was 514.9 MB in the beginning and 3.8 GB in the end (delta: 3.3 GB). Free memory was 456.1 MB in the beginning and 1.7 GB in the end (delta: -1.3 GB). Peak memory consumption was 2.0 GB. Max. memory is 15.3 GB.
[2020-05-30 20:24:13,756 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-05-30 20:24:13,756 INFO  L168              Benchmark]: Boogie Preprocessor took 77.58 ms. Allocated memory is still 514.9 MB. Free memory was 456.1 MB in the beginning and 448.0 MB in the end (delta: 8.1 MB). Peak memory consumption was 8.1 MB. Max. memory is 15.3 GB.
[2020-05-30 20:24:13,757 INFO  L168              Benchmark]: UtopiaSpecLang took 41.39 ms. Allocated memory is still 514.9 MB. Free memory was 448.0 MB in the beginning and 442.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-05-30 20:24:13,757 INFO  L168              Benchmark]: Boogie Printer took 12.41 ms. Allocated memory is still 514.9 MB. Free memory was 442.6 MB in the beginning and 439.9 MB in the end (delta: 2.7 MB). Peak memory consumption was 2.7 MB. Max. memory is 15.3 GB.
[2020-05-30 20:24:13,757 INFO  L168              Benchmark]: RCFGBuilder took 604.72 ms. Allocated memory was 514.9 MB in the beginning and 553.1 MB in the end (delta: 38.3 MB). Free memory was 439.9 MB in the beginning and 497.3 MB in the end (delta: -57.4 MB). Peak memory consumption was 98.0 MB. Max. memory is 15.3 GB.
[2020-05-30 20:24:13,757 INFO  L168              Benchmark]: UtopiaLTL2Aut took 45.65 ms. Allocated memory is still 553.1 MB. Free memory was 497.3 MB in the beginning and 492.1 MB in the end (delta: 5.3 MB). Peak memory consumption was 5.3 MB. Max. memory is 15.3 GB.
[2020-05-30 20:24:13,758 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1327.41 ms. Allocated memory was 553.1 MB in the beginning and 628.1 MB in the end (delta: 75.0 MB). Free memory was 492.1 MB in the beginning and 417.3 MB in the end (delta: 74.8 MB). Peak memory consumption was 281.1 MB. Max. memory is 15.3 GB.
[2020-05-30 20:24:13,758 INFO  L168              Benchmark]: BlockEncodingV2 took 135.58 ms. Allocated memory is still 628.1 MB. Free memory was 417.3 MB in the beginning and 370.4 MB in the end (delta: 46.9 MB). Peak memory consumption was 46.9 MB. Max. memory is 15.3 GB.
[2020-05-30 20:24:13,759 INFO  L168              Benchmark]: BuchiAutomizer took 98465.30 ms. Allocated memory was 628.1 MB in the beginning and 3.8 GB in the end (delta: 3.2 GB). Free memory was 366.1 MB in the beginning and 1.7 GB in the end (delta: -1.4 GB). Peak memory consumption was 1.8 GB. Max. memory is 15.3 GB.
[2020-05-30 20:24:13,763 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    4199 locations, 7206 edges
  - StatisticsResult: Encoded RCFG
    4125 locations, 7003 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 77.58 ms. Allocated memory is still 514.9 MB. Free memory was 456.1 MB in the beginning and 448.0 MB in the end (delta: 8.1 MB). Peak memory consumption was 8.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 41.39 ms. Allocated memory is still 514.9 MB. Free memory was 448.0 MB in the beginning and 442.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 12.41 ms. Allocated memory is still 514.9 MB. Free memory was 442.6 MB in the beginning and 439.9 MB in the end (delta: 2.7 MB). Peak memory consumption was 2.7 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 604.72 ms. Allocated memory was 514.9 MB in the beginning and 553.1 MB in the end (delta: 38.3 MB). Free memory was 439.9 MB in the beginning and 497.3 MB in the end (delta: -57.4 MB). Peak memory consumption was 98.0 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 45.65 ms. Allocated memory is still 553.1 MB. Free memory was 497.3 MB in the beginning and 492.1 MB in the end (delta: 5.3 MB). Peak memory consumption was 5.3 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1327.41 ms. Allocated memory was 553.1 MB in the beginning and 628.1 MB in the end (delta: 75.0 MB). Free memory was 492.1 MB in the beginning and 417.3 MB in the end (delta: 74.8 MB). Peak memory consumption was 281.1 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 135.58 ms. Allocated memory is still 628.1 MB. Free memory was 417.3 MB in the beginning and 370.4 MB in the end (delta: 46.9 MB). Peak memory consumption was 46.9 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 98465.30 ms. Allocated memory was 628.1 MB in the beginning and 3.8 GB in the end (delta: 3.2 GB). Free memory was 366.1 MB in the beginning and 1.7 GB in the end (delta: -1.4 GB). Peak memory consumption was 1.8 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1829 locations, 2301 edges
  - StatisticsResult: BuchiProgram size
    4199 locations, 7206 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 37 terminating modules (37 trivial, 0 deterministic, 0 nondeterministic). 37 modules have a trivial ranking function, the largest among these consists of 45 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 98.4s and 38 iterations.  TraceHistogramMax:12. Analysis of lassos took 12.5s. Construction of modules took 61.4s. BÃ¼chi inclusion checks took 20.3s. Highest rank in rank-based complementation 0. Minimization of det autom 37. Minimization of nondet autom 0. Automata minimization 1.9s AutomataMinimizationTime, 36 MinimizatonAttempts, 6020 StatesRemovedByMinimization, 30 NontrivialMinimizations. Non-live state removal took 1.3s Buchi closure took 0.0s. Biggest automaton had 16562 states and ocurred in iteration 25.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 125357 SDtfs, 196676 SDslu, 328436 SDs, 0 SdLazy, 861181 SolverSat, 24043 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 61.4s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU37 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ( <>(success_refund_EPXCrowdsale0) )&& ! ( ( <>(success_send__success0) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
