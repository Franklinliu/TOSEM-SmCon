This is Ultimate 0.1.24-9993c5c-m
[2020-05-30 20:09:57,747 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-05-30 20:09:57,748 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-05-30 20:09:57,759 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-05-30 20:09:57,759 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-05-30 20:09:57,760 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-05-30 20:09:57,761 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-05-30 20:09:57,763 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-05-30 20:09:57,765 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-05-30 20:09:57,767 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-05-30 20:09:57,768 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-05-30 20:09:57,768 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-05-30 20:09:57,769 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-05-30 20:09:57,770 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-05-30 20:09:57,772 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-05-30 20:09:57,772 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-05-30 20:09:57,773 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-05-30 20:09:57,774 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-05-30 20:09:57,776 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-05-30 20:09:57,777 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-05-30 20:09:57,778 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-05-30 20:09:57,779 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-05-30 20:09:57,781 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-05-30 20:09:57,781 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-05-30 20:09:57,781 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-05-30 20:09:57,782 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-05-30 20:09:57,782 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-05-30 20:09:57,783 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-05-30 20:09:57,784 INFO  L174        SettingsManager]: Resetting UtopiaLiveness preferences to default values
[2020-05-30 20:09:57,784 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-05-30 20:09:57,784 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-05-30 20:09:57,785 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-05-30 20:09:57,785 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-05-30 20:09:57,786 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-05-30 20:09:57,787 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-05-30 20:09:57,788 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-05-30 20:09:57,788 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-05-30 20:09:57,789 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-05-30 20:09:57,789 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-05-30 20:09:57,790 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-05-30 20:09:57,791 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-05-30 20:09:57,792 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-05-30 20:09:57,792 INFO  L98         SettingsManager]: Beginning loading settings from /Users/jon/Documents/Research/masterUltimate/SmartPulse/settings.epf
[2020-05-30 20:09:57,801 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-05-30 20:09:57,802 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-05-30 20:09:57,803 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-05-30 20:09:57,803 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-05-30 20:09:57,803 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/Users/jon/Documents/Research/devUltimate/ltl2ba
[2020-05-30 20:09:57,803 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-05-30 20:09:57,803 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-05-30 20:09:57,803 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-05-30 20:09:57,803 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-05-30 20:09:57,803 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-05-30 20:09:57,803 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-05-30 20:09:57,804 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-05-30 20:09:57,804 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-05-30 20:09:57,804 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-05-30 20:09:57,804 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-05-30 20:09:57,804 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-05-30 20:09:57,804 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-05-30 20:09:57,804 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-05-30 20:09:57,805 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-05-30 20:09:57,805 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-05-30 20:09:57,805 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-05-30 20:09:57,805 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-05-30 20:09:57,805 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-05-30 20:09:57,805 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-05-30 20:09:57,805 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-05-30 20:09:57,805 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-05-30 20:09:57,824 INFO  L81    nceAwareModelManager]: Repository-Root is: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T
[2020-05-30 20:09:57,835 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-05-30 20:09:57,837 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-05-30 20:09:57,838 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-05-30 20:09:57,838 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-05-30 20:09:57,840 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/EPXCrowdsale/no-callback/L1-EPXCrowdsale.bpl
[2020-05-30 20:09:57,840 INFO  L111           BoogieParser]: Parsing: '/Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/EPXCrowdsale/no-callback/L1-EPXCrowdsale.bpl'
[2020-05-30 20:09:57,896 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-05-30 20:09:57,899 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-05-30 20:09:57,899 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-05-30 20:09:57,899 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-05-30 20:09:57,899 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-05-30 20:09:57,913 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "L1-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 08:09:57" (1/1) ...
[2020-05-30 20:09:57,914 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "L1-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 08:09:57" (1/1) ...
[2020-05-30 20:09:57,937 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "L1-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 08:09:57" (1/1) ...
[2020-05-30 20:09:57,938 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "L1-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 08:09:57" (1/1) ...
[2020-05-30 20:09:57,952 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "L1-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 08:09:57" (1/1) ...
[2020-05-30 20:09:57,959 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "L1-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 08:09:57" (1/1) ...
[2020-05-30 20:09:57,965 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "L1-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 08:09:57" (1/1) ...
[2020-05-30 20:09:57,972 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-05-30 20:09:57,973 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-05-30 20:09:57,973 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-05-30 20:09:57,975 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-05-30 20:09:57,977 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "L1-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 08:09:57" (1/1) ...
[2020-05-30 20:09:57,992 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: <>(finished(send(from, to, amt), to == user && amt == fsum(EPXCrowdsale.buy, 2, msg.sender == user)))
[2020-05-30 20:09:57,997 INFO  L979   opiaSpecLangObserver]: Successfully lexed: <>(finished(send(from, to, amt), to == user && amt == fsum(EPXCrowdsale.buy, 2, msg.sender == user)))
[2020-05-30 20:09:58,003 INFO  L981   opiaSpecLangObserver]: Successfully parsed: <>(finished(send(from, to, amt), to == user && amt == fsum(EPXCrowdsale.buy, 2, msg.sender == user)))
[2020-05-30 20:09:58,005 INFO  L599   opiaSpecLangObserver]: Parsed msg.sender==user to BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,buy_EPXCrowdsale>],IdentifierExpression[user,GLOBAL]]
[2020-05-30 20:09:58,007 INFO  L599   opiaSpecLangObserver]: Parsed ( to==user && amount==fsum_buy_EPXCrowdsale_2_0 ) to BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[to,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[user,GLOBAL]],BinaryExpression[COMPEQ,IdentifierExpression[amount,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[fsum_buy_EPXCrowdsale_2_0,GLOBAL]]]
[2020-05-30 20:09:58,007 INFO  L968   opiaSpecLangObserver]: Compiling: <>(finished(send(from, to, amt), to == user && amt == fsum(EPXCrowdsale.buy, 2, msg.sender == user)))
[2020-05-30 20:09:58,007 INFO  L970   opiaSpecLangObserver]: Compiled to ( <>AP(success_send__success0) )
[2020-05-30 20:09:58,007 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: <>(finished(EPXCrowdsale.refund, msg.sender == user))
[2020-05-30 20:09:58,007 INFO  L979   opiaSpecLangObserver]: Successfully lexed: <>(finished(EPXCrowdsale.refund, msg.sender == user))
[2020-05-30 20:09:58,008 INFO  L981   opiaSpecLangObserver]: Successfully parsed: <>(finished(EPXCrowdsale.refund, msg.sender == user))
[2020-05-30 20:09:58,009 INFO  L599   opiaSpecLangObserver]: Parsed msg.sender==user to BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,refund_EPXCrowdsale>],IdentifierExpression[user,GLOBAL]]
[2020-05-30 20:09:58,010 INFO  L968   opiaSpecLangObserver]: Compiling: <>(finished(EPXCrowdsale.refund, msg.sender == user))
[2020-05-30 20:09:58,010 INFO  L970   opiaSpecLangObserver]: Compiled to ( <>AP(success_refund_EPXCrowdsale0) )
Executed UtopiaSpecLang
[2020-05-30 20:09:58,017 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 08:09:58 PropertyContainer
[2020-05-30 20:09:58,017 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-05-30 20:09:58,017 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-05-30 20:09:58,017 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-05-30 20:09:58,017 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-05-30 20:09:58,018 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "L1-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 08:09:57" (1/2) ...
[2020-05-30 20:09:58,018 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-30 20:09:58,019 INFO  L120   oogiePrinterObserver]: Writing to file /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-30 20:09:58,030 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 08:09:58" (2/2) ...
[2020-05-30 20:09:58,031 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-05-30 20:09:58,031 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-05-30 20:09:58,031 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-05-30 20:09:58,031 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-05-30 20:09:58,032 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "L1-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 08:09:57" (1/2) ...
[2020-05-30 20:09:58,074 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-05-30 20:09:58,074 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned_NoBaseCtor__success
[2020-05-30 20:09:58,074 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned
[2020-05-30 20:09:58,074 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned
[2020-05-30 20:09:58,074 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMath_safeMath_NoBaseCtor__success
[2020-05-30 20:09:58,074 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMath_safeMath
[2020-05-30 20:09:58,075 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMath_safeMath
[2020-05-30 20:09:58,075 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul_safeMath__success
[2020-05-30 20:09:58,075 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv_safeMath__success
[2020-05-30 20:09:58,075 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub_safeMath__success
[2020-05-30 20:09:58,076 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd_safeMath__success
[2020-05-30 20:09:58,076 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAssert_safeMath__success
[2020-05-30 20:09:58,076 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-05-30 20:09:58,076 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-05-30 20:09:58,076 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-05-30 20:09:58,076 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf_StandardToken
[2020-05-30 20:09:58,076 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer_StandardToken
[2020-05-30 20:09:58,076 INFO  L130     BoogieDeclarations]: Found specification of procedure EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success
[2020-05-30 20:09:58,076 INFO  L130     BoogieDeclarations]: Found specification of procedure EPXCrowdsale_EPXCrowdsale
[2020-05-30 20:09:58,076 INFO  L138     BoogieDeclarations]: Found implementation of procedure EPXCrowdsale_EPXCrowdsale
[2020-05-30 20:09:58,076 INFO  L130     BoogieDeclarations]: Found specification of procedure initialEPXSupply_EPXCrowdsale
[2020-05-30 20:09:58,076 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialEPXSupply_EPXCrowdsale
[2020-05-30 20:09:58,076 INFO  L130     BoogieDeclarations]: Found specification of procedure remainingEPXSupply_EPXCrowdsale
[2020-05-30 20:09:58,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure remainingEPXSupply_EPXCrowdsale
[2020-05-30 20:09:58,077 INFO  L130     BoogieDeclarations]: Found specification of procedure SetupCrowdsale_EPXCrowdsale
[2020-05-30 20:09:58,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure SetupCrowdsale_EPXCrowdsale
[2020-05-30 20:09:58,077 INFO  L130     BoogieDeclarations]: Found specification of procedure checkPrice_EPXCrowdsale__success
[2020-05-30 20:09:58,077 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_EPXCrowdsale__success
[2020-05-30 20:09:58,077 INFO  L130     BoogieDeclarations]: Found specification of procedure buy_EPXCrowdsale
[2020-05-30 20:09:58,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure buy_EPXCrowdsale
[2020-05-30 20:09:58,077 INFO  L130     BoogieDeclarations]: Found specification of procedure beneficiaryMultiSigWithdraw_EPXCrowdsale
[2020-05-30 20:09:58,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure beneficiaryMultiSigWithdraw_EPXCrowdsale
[2020-05-30 20:09:58,077 INFO  L130     BoogieDeclarations]: Found specification of procedure checkGoalReached_EPXCrowdsale
[2020-05-30 20:09:58,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure checkGoalReached_EPXCrowdsale
[2020-05-30 20:09:58,078 INFO  L130     BoogieDeclarations]: Found specification of procedure refund_EPXCrowdsale
[2020-05-30 20:09:58,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure refund_EPXCrowdsale
[2020-05-30 20:09:58,078 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-05-30 20:09:58,078 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-05-30 20:09:58,078 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-05-30 20:09:58,078 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-05-30 20:09:58,078 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_owned
[2020-05-30 20:09:58,078 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_owned
[2020-05-30 20:09:58,078 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_safeMath
[2020-05-30 20:09:58,078 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_safeMath
[2020-05-30 20:09:58,078 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-05-30 20:09:58,078 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-05-30 20:09:58,079 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_EPXCrowdsale
[2020-05-30 20:09:58,079 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-05-30 20:09:58,079 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-05-30 20:09:58,079 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned_NoBaseCtor__fail
[2020-05-30 20:09:58,079 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned__success
[2020-05-30 20:09:58,079 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned__fail
[2020-05-30 20:09:58,079 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMath_safeMath_NoBaseCtor__fail
[2020-05-30 20:09:58,079 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMath_safeMath__success
[2020-05-30 20:09:58,079 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMath_safeMath__fail
[2020-05-30 20:09:58,079 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul_safeMath__fail
[2020-05-30 20:09:58,079 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv_safeMath__fail
[2020-05-30 20:09:58,079 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub_safeMath__fail
[2020-05-30 20:09:58,079 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd_safeMath__fail
[2020-05-30 20:09:58,079 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAssert_safeMath__fail
[2020-05-30 20:09:58,080 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-05-30 20:09:58,080 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-05-30 20:09:58,080 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-05-30 20:09:58,080 INFO  L130     BoogieDeclarations]: Found specification of procedure EPXCrowdsale_EPXCrowdsale_NoBaseCtor__fail
[2020-05-30 20:09:58,080 INFO  L130     BoogieDeclarations]: Found specification of procedure EPXCrowdsale_EPXCrowdsale__success
[2020-05-30 20:09:58,080 INFO  L130     BoogieDeclarations]: Found specification of procedure EPXCrowdsale_EPXCrowdsale__fail
[2020-05-30 20:09:58,080 INFO  L130     BoogieDeclarations]: Found specification of procedure initialEPXSupply_EPXCrowdsale__success
[2020-05-30 20:09:58,080 INFO  L130     BoogieDeclarations]: Found specification of procedure initialEPXSupply_EPXCrowdsale__fail
[2020-05-30 20:09:58,080 INFO  L130     BoogieDeclarations]: Found specification of procedure remainingEPXSupply_EPXCrowdsale__success
[2020-05-30 20:09:58,080 INFO  L130     BoogieDeclarations]: Found specification of procedure remainingEPXSupply_EPXCrowdsale__fail
[2020-05-30 20:09:58,080 INFO  L130     BoogieDeclarations]: Found specification of procedure SetupCrowdsale_EPXCrowdsale__success
[2020-05-30 20:09:58,080 INFO  L130     BoogieDeclarations]: Found specification of procedure SetupCrowdsale_EPXCrowdsale__fail
[2020-05-30 20:09:58,080 INFO  L130     BoogieDeclarations]: Found specification of procedure checkPrice_EPXCrowdsale__fail
[2020-05-30 20:09:58,081 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_EPXCrowdsale__fail
[2020-05-30 20:09:58,081 INFO  L130     BoogieDeclarations]: Found specification of procedure buy_EPXCrowdsale__success
[2020-05-30 20:09:58,081 INFO  L130     BoogieDeclarations]: Found specification of procedure buy_EPXCrowdsale__fail
[2020-05-30 20:09:58,081 INFO  L130     BoogieDeclarations]: Found specification of procedure beneficiaryMultiSigWithdraw_EPXCrowdsale__success
[2020-05-30 20:09:58,081 INFO  L130     BoogieDeclarations]: Found specification of procedure beneficiaryMultiSigWithdraw_EPXCrowdsale__fail
[2020-05-30 20:09:58,081 INFO  L130     BoogieDeclarations]: Found specification of procedure checkGoalReached_EPXCrowdsale__success
[2020-05-30 20:09:58,081 INFO  L130     BoogieDeclarations]: Found specification of procedure checkGoalReached_EPXCrowdsale__fail
[2020-05-30 20:09:58,081 INFO  L130     BoogieDeclarations]: Found specification of procedure refund_EPXCrowdsale__success
[2020-05-30 20:09:58,081 INFO  L130     BoogieDeclarations]: Found specification of procedure refund_EPXCrowdsale__fail
[2020-05-30 20:09:58,081 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-05-30 20:09:58,081 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-05-30 20:09:58,081 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-05-30 20:09:58,082 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-05-30 20:09:58,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-05-30 20:09:58,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-05-30 20:09:58,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned_NoBaseCtor__fail
[2020-05-30 20:09:58,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned_NoBaseCtor__success
[2020-05-30 20:09:58,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned__fail
[2020-05-30 20:09:58,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned__success
[2020-05-30 20:09:58,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMath_safeMath_NoBaseCtor__fail
[2020-05-30 20:09:58,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMath_safeMath_NoBaseCtor__success
[2020-05-30 20:09:58,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMath_safeMath__fail
[2020-05-30 20:09:58,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMath_safeMath__success
[2020-05-30 20:09:58,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul_safeMath__fail
[2020-05-30 20:09:58,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul_safeMath__success
[2020-05-30 20:09:58,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv_safeMath__fail
[2020-05-30 20:09:58,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv_safeMath__success
[2020-05-30 20:09:58,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub_safeMath__fail
[2020-05-30 20:09:58,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub_safeMath__success
[2020-05-30 20:09:58,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd_safeMath__fail
[2020-05-30 20:09:58,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd_safeMath__success
[2020-05-30 20:09:58,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAssert_safeMath__fail
[2020-05-30 20:09:58,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAssert_safeMath__success
[2020-05-30 20:09:58,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-05-30 20:09:58,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-05-30 20:09:58,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-05-30 20:09:58,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-05-30 20:09:58,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure EPXCrowdsale_EPXCrowdsale_NoBaseCtor__fail
[2020-05-30 20:09:58,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success
[2020-05-30 20:09:58,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure EPXCrowdsale_EPXCrowdsale__fail
[2020-05-30 20:09:58,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure EPXCrowdsale_EPXCrowdsale__success
[2020-05-30 20:09:58,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialEPXSupply_EPXCrowdsale__fail
[2020-05-30 20:09:58,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialEPXSupply_EPXCrowdsale__success
[2020-05-30 20:09:58,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure remainingEPXSupply_EPXCrowdsale__fail
[2020-05-30 20:09:58,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure remainingEPXSupply_EPXCrowdsale__success
[2020-05-30 20:09:58,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure SetupCrowdsale_EPXCrowdsale__fail
[2020-05-30 20:09:58,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure SetupCrowdsale_EPXCrowdsale__success
[2020-05-30 20:09:58,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure checkPrice_EPXCrowdsale__fail
[2020-05-30 20:09:58,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure checkPrice_EPXCrowdsale__success
[2020-05-30 20:09:58,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_EPXCrowdsale__fail
[2020-05-30 20:09:58,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_EPXCrowdsale__success
[2020-05-30 20:09:58,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure buy_EPXCrowdsale__fail
[2020-05-30 20:09:58,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure buy_EPXCrowdsale__success
[2020-05-30 20:09:58,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure beneficiaryMultiSigWithdraw_EPXCrowdsale__fail
[2020-05-30 20:09:58,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure beneficiaryMultiSigWithdraw_EPXCrowdsale__success
[2020-05-30 20:09:58,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure checkGoalReached_EPXCrowdsale__fail
[2020-05-30 20:09:58,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure checkGoalReached_EPXCrowdsale__success
[2020-05-30 20:09:58,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure refund_EPXCrowdsale__fail
[2020-05-30 20:09:58,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure refund_EPXCrowdsale__success
[2020-05-30 20:09:58,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-05-30 20:09:58,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-05-30 20:09:58,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-05-30 20:09:58,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-05-30 20:09:58,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-05-30 20:09:58,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-05-30 20:09:58,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-05-30 20:09:58,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-05-30 20:09:58,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_owned
[2020-05-30 20:09:58,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_owned
[2020-05-30 20:09:58,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_safeMath
[2020-05-30 20:09:58,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_safeMath
[2020-05-30 20:09:58,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-05-30 20:09:58,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-05-30 20:09:58,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_EPXCrowdsale
[2020-05-30 20:09:58,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-05-30 20:09:58,087 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-05-30 20:09:58,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-05-30 20:09:58,252 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 20:09:58,267 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 20:09:58,520 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 20:09:58,553 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 20:09:58,606 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-05-30 20:09:58,606 INFO  L286             CfgBuilder]: Removed 4 assue(true) statements.
[2020-05-30 20:09:58,607 INFO  L202        PluginConnector]: Adding new model L1-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 08:09:58 BoogieIcfgContainer
[2020-05-30 20:09:58,607 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 08:09:58" (2/2) ...
[2020-05-30 20:09:58,607 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-05-30 20:09:58,608 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@5cc4de94 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 08:09:58, skipping insertion in model container
[2020-05-30 20:09:58,608 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-05-30 20:09:58,608 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-05-30 20:09:58,608 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-05-30 20:09:58,609 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-05-30 20:09:58,609 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "L1-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 08:09:57" (1/3) ...
[2020-05-30 20:09:58,610 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@51b9747f and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 08:09:58, skipping insertion in model container
[2020-05-30 20:09:58,610 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 08:09:58" (2/3) ...
No working directory specified, using /Users/jon/Documents/Research/devUltimate/ltl2ba
Starting monitored process 1 with /Users/jon/Documents/Research/devUltimate/ltl2ba -f  ( <>a ) && ! ( ( <>b ) )  (exit command is null, workingDir is null)
[2020-05-30 20:09:58,652 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 08:09:58 NWAContainer
[2020-05-30 20:09:58,652 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-05-30 20:09:58,652 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-05-30 20:09:58,652 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-05-30 20:09:58,653 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-05-30 20:09:58,653 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "L1-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 08:09:58" (3/4) ...
[2020-05-30 20:09:58,654 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@9bd8832 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 08:09:58, skipping insertion in model container
[2020-05-30 20:09:58,654 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 08:09:58" (4/4) ...
[2020-05-30 20:09:58,657 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-05-30 20:09:58,660 INFO  L110   BuchiProductObserver]: Initial RCFG 1683 locations, 2067 edges
[2020-05-30 20:09:58,660 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-05-30 20:09:58,670 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-05-30 20:09:59,901 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-05-30 20:09:59,905 INFO  L110   BuchiProductObserver]: BuchiProgram size 3851 locations, 6476 edges
[2020-05-30 20:09:59,905 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 08:09:59 BoogieIcfgContainer
[2020-05-30 20:09:59,905 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-05-30 20:09:59,906 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-05-30 20:09:59,906 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-05-30 20:09:59,907 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-05-30 20:09:59,907 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 08:09:59" (1/1) ...
[2020-05-30 20:09:59,977 INFO  L313           BlockEncoder]: Initial Icfg 3851 locations, 6476 edges
[2020-05-30 20:09:59,977 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-05-30 20:09:59,978 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-05-30 20:09:59,978 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-05-30 20:09:59,979 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-05-30 20:09:59,990 INFO  L70    emoveInfeasibleEdges]: Removed 111 edges and 12 locations because of local infeasibility
[2020-05-30 20:09:59,997 INFO  L70        RemoveSinkStates]: Removed 69 edges and 46 locations by removing sink states
[2020-05-30 20:10:00,008 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-05-30 20:10:00,014 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-05-30 20:10:00,016 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-05-30 20:10:00,017 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-05-30 20:10:00,023 INFO  L313           BlockEncoder]: Encoded RCFG 3777 locations, 6273 edges
[2020-05-30 20:10:00,023 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 30.05 08:10:00 BasicIcfg
[2020-05-30 20:10:00,023 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-05-30 20:10:00,024 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-05-30 20:10:00,024 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-05-30 20:10:00,026 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-05-30 20:10:00,026 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 20:10:00,027 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L1-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 08:09:57" (1/6) ...
[2020-05-30 20:10:00,028 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@745e57d4 and model type L1-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 30.05 08:10:00, skipping insertion in model container
[2020-05-30 20:10:00,028 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 20:10:00,028 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 08:09:58" (2/6) ...
[2020-05-30 20:10:00,028 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@745e57d4 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 30.05 08:10:00, skipping insertion in model container
[2020-05-30 20:10:00,028 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 20:10:00,028 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L1-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 08:09:58" (3/6) ...
[2020-05-30 20:10:00,029 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@745e57d4 and model type L1-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 30.05 08:10:00, skipping insertion in model container
[2020-05-30 20:10:00,029 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 20:10:00,029 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 08:09:58" (4/6) ...
[2020-05-30 20:10:00,029 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@745e57d4 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 30.05 08:10:00, skipping insertion in model container
[2020-05-30 20:10:00,029 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 20:10:00,029 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 08:09:59" (5/6) ...
[2020-05-30 20:10:00,029 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@745e57d4 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 30.05 08:10:00, skipping insertion in model container
[2020-05-30 20:10:00,029 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 20:10:00,030 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 30.05 08:10:00" (6/6) ...
[2020-05-30 20:10:00,031 INFO  L404   chiAutomizerObserver]: Analyzing ICFG L1-EPXCrowdsale.bpl_BEv2
[2020-05-30 20:10:00,066 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-05-30 20:10:00,067 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-05-30 20:10:00,067 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-05-30 20:10:00,067 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-05-30 20:10:00,067 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-05-30 20:10:00,067 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-05-30 20:10:00,067 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-05-30 20:10:00,067 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-05-30 20:10:00,067 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-05-30 20:10:00,095 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3777 states.
[2020-05-30 20:10:00,151 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 20:10:00,152 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:10:00,152 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:10:00,160 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:10:00,160 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:10:00,160 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-05-30 20:10:00,160 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3777 states.
[2020-05-30 20:10:00,184 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 20:10:00,184 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:10:00,184 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:10:00,186 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:10:00,186 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_refund_EPXCrowdsale0 := false;
[L7]                 fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                 success_send__success0 := false;
[L7]     CALL        call main();
[L7]                 havoc user;
[L3635]              assume null == 0;
[L3636]  CALL        call this := FreshRefGenerator__success();
[L1098]              havoc newRef;
[L1099]              assume Alloc[newRef] == false;
[L1100]              Alloc[newRef] := true;
[L1101]              assume newRef != null;
[L3636]  RET         call this := FreshRefGenerator__success();
[L3637]              assume now >= 0;
[L3638]              assume DType[this] == EPXCrowdsale;
[L3639]              gas := gas - 53000;
[L3640]  CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]               havoc __exception;
[L342]               revert := false;
[L343]   COND FALSE  !(__exception)
[L376]   CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]              assume msgsender_MSG != null;
[L1119]              Balance[this] := 0;
[L1120]              owner_owned[this] := null;
[L1121]              owner_owned[this] := msgsender_MSG;
[L1139]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]  COND FALSE  !(revert)
[L1891]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]  COND TRUE   revert
[L376]   RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]               assume !revert && gas >= 0;
[L3640]  RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]              assume !revert && gas >= 0;

Loop:
[L3644]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]              havoc msgsender_MSG;
[L3542]              havoc msgvalue_MSG;
[L3543]              havoc choice;
[L3544]              havoc initialEPXtokenCount_s286;
[L3545]              havoc remainingEPXtokenCount_s299;
[L3546]              havoc _fundingStartBlock_s391;
[L3547]              havoc _fundingEndBlock_s391;
[L3548]              havoc response_s391;
[L3549]              havoc _amount_s558;
[L3550]              havoc tmpNow;
[L3551]              havoc gas;
[L3552]              assume gas > 4000000 && gas <= 8000000;
[L3553]              tmpNow := now;
[L3554]              havoc now;
[L3555]              assume now > tmpNow;
[L3556]              assume msgsender_MSG != null;
[L3557]              assume DType[msgsender_MSG] != owned;
[L3558]              assume DType[msgsender_MSG] != safeMath;
[L3559]              assume DType[msgsender_MSG] != StandardToken;
[L3560]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]              Alloc[msgsender_MSG] := true;
[L3562]  COND TRUE   choice == 7
[L3564]              gas := gas - 21000;
[L3565]  COND FALSE  !(gas >= 0)
[L3644]  RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:10:00,203 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:10:00,203 INFO  L82        PathProgramCache]: Analyzing trace with hash -242347038, now seen corresponding path program 1 times
[2020-05-30 20:10:00,207 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:10:00,233 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:10:00,274 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-30 20:10:00,276 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:10:00,277 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 20:10:00,280 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:10:00,477 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 20:10:00,478 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 20:10:00,480 INFO  L87              Difference]: Start difference. First operand 3777 states. Second operand 3 states.
[2020-05-30 20:10:00,754 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:10:00,754 INFO  L93              Difference]: Finished difference Result 3203 states and 3622 transitions.
[2020-05-30 20:10:00,754 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 20:10:00,755 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3203 states and 3622 transitions.
[2020-05-30 20:10:00,773 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 20:10:00,796 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3203 states to 3203 states and 3622 transitions.
[2020-05-30 20:10:00,797 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-05-30 20:10:00,799 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 512
[2020-05-30 20:10:00,799 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3203 states and 3622 transitions.
[2020-05-30 20:10:00,806 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:10:00,806 INFO  L728         BuchiCegarLoop]: Abstraction has 3203 states and 3622 transitions.
[2020-05-30 20:10:00,823 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3203 states and 3622 transitions.
[2020-05-30 20:10:00,871 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3203 to 3203.
[2020-05-30 20:10:00,871 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3203 states.
[2020-05-30 20:10:00,878 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3203 states to 3203 states and 3622 transitions.
[2020-05-30 20:10:00,879 INFO  L751         BuchiCegarLoop]: Abstraction has 3203 states and 3622 transitions.
[2020-05-30 20:10:00,880 INFO  L631         BuchiCegarLoop]: Abstraction has 3203 states and 3622 transitions.
[2020-05-30 20:10:00,880 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-05-30 20:10:00,880 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3203 states and 3622 transitions.
[2020-05-30 20:10:00,888 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 20:10:00,888 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:10:00,888 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:10:00,890 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:10:00,890 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND TRUE   revert
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND TRUE   !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0)
[L3026]                    revert := true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND TRUE   !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0)
[L3026]                    revert := true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:10:00,894 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:10:00,894 INFO  L82        PathProgramCache]: Analyzing trace with hash 809692792, now seen corresponding path program 1 times
[2020-05-30 20:10:00,895 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:10:00,908 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:10:00,928 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-30 20:10:00,928 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:10:00,928 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 20:10:00,929 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:10:00,929 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 20:10:00,929 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 20:10:00,929 INFO  L87              Difference]: Start difference. First operand 3203 states and 3622 transitions. cyclomatic complexity: 421 Second operand 3 states.
[2020-05-30 20:10:01,026 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:10:01,026 INFO  L93              Difference]: Finished difference Result 3887 states and 4429 transitions.
[2020-05-30 20:10:01,027 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 20:10:01,027 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3887 states and 4429 transitions.
[2020-05-30 20:10:01,041 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:10:01,056 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3887 states to 3887 states and 4429 transitions.
[2020-05-30 20:10:01,056 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 677
[2020-05-30 20:10:01,057 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 677
[2020-05-30 20:10:01,057 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3887 states and 4429 transitions.
[2020-05-30 20:10:01,062 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:10:01,062 INFO  L728         BuchiCegarLoop]: Abstraction has 3887 states and 4429 transitions.
[2020-05-30 20:10:01,066 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3887 states and 4429 transitions.
[2020-05-30 20:10:01,104 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3887 to 3587.
[2020-05-30 20:10:01,104 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3587 states.
[2020-05-30 20:10:01,109 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3587 states to 3587 states and 4079 transitions.
[2020-05-30 20:10:01,109 INFO  L751         BuchiCegarLoop]: Abstraction has 3587 states and 4079 transitions.
[2020-05-30 20:10:01,109 INFO  L631         BuchiCegarLoop]: Abstraction has 3587 states and 4079 transitions.
[2020-05-30 20:10:01,109 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-05-30 20:10:01,109 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3587 states and 4079 transitions.
[2020-05-30 20:10:01,117 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:10:01,118 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:10:01,118 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:10:01,119 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:10:01,119 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND TRUE   !(msgsender_MSG == owner_owned[this])
[L3348]                    revert := true;
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND TRUE   revert
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND TRUE   revert
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND TRUE   !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0)
[L3026]                    revert := true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND TRUE   !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0)
[L3026]                    revert := true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:10:01,122 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:10:01,122 INFO  L82        PathProgramCache]: Analyzing trace with hash 1783237593, now seen corresponding path program 1 times
[2020-05-30 20:10:01,123 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:10:01,135 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:10:01,188 INFO  L134       CoverageAnalysis]: Checked inductivity of 18 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 18 trivial. 0 not checked.
[2020-05-30 20:10:01,188 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:10:01,188 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-05-30 20:10:01,189 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:10:01,189 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-30 20:10:01,189 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-05-30 20:10:01,189 INFO  L87              Difference]: Start difference. First operand 3587 states and 4079 transitions. cyclomatic complexity: 494 Second operand 7 states.
[2020-05-30 20:10:01,286 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:10:01,286 INFO  L93              Difference]: Finished difference Result 3589 states and 4078 transitions.
[2020-05-30 20:10:01,286 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-05-30 20:10:01,286 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3589 states and 4078 transitions.
[2020-05-30 20:10:01,298 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:10:01,316 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3589 states to 3581 states and 4070 transitions.
[2020-05-30 20:10:01,316 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 615
[2020-05-30 20:10:01,317 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 615
[2020-05-30 20:10:01,317 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3581 states and 4070 transitions.
[2020-05-30 20:10:01,323 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:10:01,323 INFO  L728         BuchiCegarLoop]: Abstraction has 3581 states and 4070 transitions.
[2020-05-30 20:10:01,328 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3581 states and 4070 transitions.
[2020-05-30 20:10:01,367 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3581 to 3581.
[2020-05-30 20:10:01,367 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3581 states.
[2020-05-30 20:10:01,388 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3581 states to 3581 states and 4070 transitions.
[2020-05-30 20:10:01,388 INFO  L751         BuchiCegarLoop]: Abstraction has 3581 states and 4070 transitions.
[2020-05-30 20:10:01,388 INFO  L631         BuchiCegarLoop]: Abstraction has 3581 states and 4070 transitions.
[2020-05-30 20:10:01,388 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-05-30 20:10:01,388 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3581 states and 4070 transitions.
[2020-05-30 20:10:01,393 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:10:01,394 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:10:01,394 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:10:01,395 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:10:01,396 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND TRUE   !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0)
[L3026]                    revert := true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND TRUE   !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0)
[L3026]                    revert := true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:10:01,400 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:10:01,400 INFO  L82        PathProgramCache]: Analyzing trace with hash 17943539, now seen corresponding path program 1 times
[2020-05-30 20:10:01,401 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:10:01,417 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:10:01,448 INFO  L134       CoverageAnalysis]: Checked inductivity of 18 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 18 trivial. 0 not checked.
[2020-05-30 20:10:01,448 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:10:01,449 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 20:10:01,449 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:10:01,449 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 20:10:01,449 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 20:10:01,449 INFO  L87              Difference]: Start difference. First operand 3581 states and 4070 transitions. cyclomatic complexity: 491 Second operand 3 states.
[2020-05-30 20:10:01,513 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:10:01,513 INFO  L93              Difference]: Finished difference Result 3943 states and 4376 transitions.
[2020-05-30 20:10:01,513 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 20:10:01,513 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3943 states and 4376 transitions.
[2020-05-30 20:10:01,522 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 20:10:01,535 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3943 states to 3707 states and 4102 transitions.
[2020-05-30 20:10:01,536 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 626
[2020-05-30 20:10:01,536 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 671
[2020-05-30 20:10:01,536 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3707 states and 4102 transitions.
[2020-05-30 20:10:01,542 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:10:01,542 INFO  L728         BuchiCegarLoop]: Abstraction has 3707 states and 4102 transitions.
[2020-05-30 20:10:01,546 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3707 states and 4102 transitions.
[2020-05-30 20:10:01,582 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3707 to 3381.
[2020-05-30 20:10:01,582 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3381 states.
[2020-05-30 20:10:01,588 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3381 states to 3381 states and 3711 transitions.
[2020-05-30 20:10:01,588 INFO  L751         BuchiCegarLoop]: Abstraction has 3381 states and 3711 transitions.
[2020-05-30 20:10:01,588 INFO  L631         BuchiCegarLoop]: Abstraction has 3381 states and 3711 transitions.
[2020-05-30 20:10:01,588 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-05-30 20:10:01,589 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3381 states and 3711 transitions.
[2020-05-30 20:10:01,595 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:10:01,595 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:10:01,595 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:10:01,597 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:10:01,597 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND FALSE  !(Balance[from] >= amount)
[L3322]                    success := false;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND FALSE  !(Balance[from] >= amount)
[L3322]                    success := false;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:10:01,600 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:10:01,601 INFO  L82        PathProgramCache]: Analyzing trace with hash -96511897, now seen corresponding path program 1 times
[2020-05-30 20:10:01,601 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:10:01,620 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:10:01,656 INFO  L134       CoverageAnalysis]: Checked inductivity of 18 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 18 trivial. 0 not checked.
[2020-05-30 20:10:01,656 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:10:01,656 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-30 20:10:01,656 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:10:01,657 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 20:10:01,657 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-30 20:10:01,657 INFO  L87              Difference]: Start difference. First operand 3381 states and 3711 transitions. cyclomatic complexity: 332 Second operand 4 states.
[2020-05-30 20:10:01,682 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:10:01,682 INFO  L93              Difference]: Finished difference Result 3399 states and 3729 transitions.
[2020-05-30 20:10:01,682 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-30 20:10:01,682 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3399 states and 3729 transitions.
[2020-05-30 20:10:01,690 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:10:01,701 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3399 states to 3395 states and 3725 transitions.
[2020-05-30 20:10:01,701 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 593
[2020-05-30 20:10:01,702 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 593
[2020-05-30 20:10:01,702 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3395 states and 3725 transitions.
[2020-05-30 20:10:01,705 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:10:01,705 INFO  L728         BuchiCegarLoop]: Abstraction has 3395 states and 3725 transitions.
[2020-05-30 20:10:01,709 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3395 states and 3725 transitions.
[2020-05-30 20:10:01,733 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3395 to 3395.
[2020-05-30 20:10:01,734 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3395 states.
[2020-05-30 20:10:01,738 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3395 states to 3395 states and 3725 transitions.
[2020-05-30 20:10:01,738 INFO  L751         BuchiCegarLoop]: Abstraction has 3395 states and 3725 transitions.
[2020-05-30 20:10:01,738 INFO  L631         BuchiCegarLoop]: Abstraction has 3395 states and 3725 transitions.
[2020-05-30 20:10:01,738 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-05-30 20:10:01,738 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3395 states and 3725 transitions.
[2020-05-30 20:10:01,742 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:10:01,742 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:10:01,743 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:10:01,744 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:10:01,744 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:10:01,747 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:10:01,747 INFO  L82        PathProgramCache]: Analyzing trace with hash -598222402, now seen corresponding path program 1 times
[2020-05-30 20:10:01,748 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:10:01,765 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:10:01,830 INFO  L134       CoverageAnalysis]: Checked inductivity of 18 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 18 trivial. 0 not checked.
[2020-05-30 20:10:01,830 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:10:01,830 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-05-30 20:10:01,831 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:10:01,831 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-30 20:10:01,831 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=12, Invalid=30, Unknown=0, NotChecked=0, Total=42
[2020-05-30 20:10:01,831 INFO  L87              Difference]: Start difference. First operand 3395 states and 3725 transitions. cyclomatic complexity: 332 Second operand 7 states.
[2020-05-30 20:10:01,919 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:10:01,920 INFO  L93              Difference]: Finished difference Result 3417 states and 3747 transitions.
[2020-05-30 20:10:01,920 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-05-30 20:10:01,920 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3417 states and 3747 transitions.
[2020-05-30 20:10:01,928 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:10:01,938 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3417 states to 3417 states and 3747 transitions.
[2020-05-30 20:10:01,938 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 604
[2020-05-30 20:10:01,939 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 604
[2020-05-30 20:10:01,939 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3417 states and 3747 transitions.
[2020-05-30 20:10:01,944 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:10:01,945 INFO  L728         BuchiCegarLoop]: Abstraction has 3417 states and 3747 transitions.
[2020-05-30 20:10:01,950 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3417 states and 3747 transitions.
[2020-05-30 20:10:01,979 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3417 to 3403.
[2020-05-30 20:10:01,979 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3403 states.
[2020-05-30 20:10:01,982 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3403 states to 3403 states and 3733 transitions.
[2020-05-30 20:10:01,983 INFO  L751         BuchiCegarLoop]: Abstraction has 3403 states and 3733 transitions.
[2020-05-30 20:10:01,983 INFO  L631         BuchiCegarLoop]: Abstraction has 3403 states and 3733 transitions.
[2020-05-30 20:10:01,983 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-05-30 20:10:01,983 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3403 states and 3733 transitions.
[2020-05-30 20:10:01,987 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:10:01,987 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:10:01,987 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:10:01,989 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:10:01,989 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:10:01,992 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:10:01,992 INFO  L82        PathProgramCache]: Analyzing trace with hash -1427572363, now seen corresponding path program 1 times
[2020-05-30 20:10:01,992 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:10:02,009 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:10:02,072 INFO  L134       CoverageAnalysis]: Checked inductivity of 18 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 18 trivial. 0 not checked.
[2020-05-30 20:10:02,072 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:10:02,072 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-05-30 20:10:02,072 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:10:02,073 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-30 20:10:02,073 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-05-30 20:10:02,073 INFO  L87              Difference]: Start difference. First operand 3403 states and 3733 transitions. cyclomatic complexity: 332 Second operand 10 states.
[2020-05-30 20:10:03,701 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:10:03,701 INFO  L93              Difference]: Finished difference Result 3454 states and 3798 transitions.
[2020-05-30 20:10:03,701 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-05-30 20:10:03,701 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3454 states and 3798 transitions.
[2020-05-30 20:10:03,708 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-05-30 20:10:03,719 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3454 states to 3454 states and 3798 transitions.
[2020-05-30 20:10:03,720 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 619
[2020-05-30 20:10:03,720 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 619
[2020-05-30 20:10:03,720 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3454 states and 3798 transitions.
[2020-05-30 20:10:03,724 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:10:03,724 INFO  L728         BuchiCegarLoop]: Abstraction has 3454 states and 3798 transitions.
[2020-05-30 20:10:03,727 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3454 states and 3798 transitions.
[2020-05-30 20:10:03,757 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3454 to 3385.
[2020-05-30 20:10:03,757 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3385 states.
[2020-05-30 20:10:03,762 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3385 states to 3385 states and 3701 transitions.
[2020-05-30 20:10:03,763 INFO  L751         BuchiCegarLoop]: Abstraction has 3385 states and 3701 transitions.
[2020-05-30 20:10:03,763 INFO  L631         BuchiCegarLoop]: Abstraction has 3385 states and 3701 transitions.
[2020-05-30 20:10:03,763 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-05-30 20:10:03,763 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3385 states and 3701 transitions.
[2020-05-30 20:10:03,768 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 20:10:03,768 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:10:03,768 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:10:03,772 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:10:03,772 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := 855885808;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:10:03,777 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:10:03,777 INFO  L82        PathProgramCache]: Analyzing trace with hash -1334732233, now seen corresponding path program 1 times
[2020-05-30 20:10:03,778 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:10:03,791 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:10:03,886 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 1 proven. 28 refuted. 0 times theorem prover too weak. 22 trivial. 0 not checked.
[2020-05-30 20:10:03,886 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:10:03,886 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-05-30 20:10:03,887 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:10:03,887 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-30 20:10:03,887 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-05-30 20:10:03,887 INFO  L87              Difference]: Start difference. First operand 3385 states and 3701 transitions. cyclomatic complexity: 319 Second operand 10 states.
[2020-05-30 20:10:04,910 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:10:04,911 INFO  L93              Difference]: Finished difference Result 3410 states and 3736 transitions.
[2020-05-30 20:10:04,911 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-05-30 20:10:04,911 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3410 states and 3736 transitions.
[2020-05-30 20:10:04,916 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-30 20:10:04,924 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3410 states to 3410 states and 3736 transitions.
[2020-05-30 20:10:04,924 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 611
[2020-05-30 20:10:04,925 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 611
[2020-05-30 20:10:04,925 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3410 states and 3736 transitions.
[2020-05-30 20:10:04,927 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:10:04,927 INFO  L728         BuchiCegarLoop]: Abstraction has 3410 states and 3736 transitions.
[2020-05-30 20:10:04,930 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3410 states and 3736 transitions.
[2020-05-30 20:10:04,949 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3410 to 3381.
[2020-05-30 20:10:04,949 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3381 states.
[2020-05-30 20:10:04,952 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3381 states to 3381 states and 3697 transitions.
[2020-05-30 20:10:04,952 INFO  L751         BuchiCegarLoop]: Abstraction has 3381 states and 3697 transitions.
[2020-05-30 20:10:04,952 INFO  L631         BuchiCegarLoop]: Abstraction has 3381 states and 3697 transitions.
[2020-05-30 20:10:04,952 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-05-30 20:10:04,952 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3381 states and 3697 transitions.
[2020-05-30 20:10:04,954 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 20:10:04,955 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:10:04,955 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:10:04,956 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:10:04,956 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]              havoc msgsender_MSG;
[L3542]              havoc msgvalue_MSG;
[L3543]              havoc choice;
[L3544]              havoc initialEPXtokenCount_s286;
[L3545]              havoc remainingEPXtokenCount_s299;
[L3546]              havoc _fundingStartBlock_s391;
[L3547]              havoc _fundingEndBlock_s391;
[L3548]              havoc response_s391;
[L3549]              havoc _amount_s558;
[L3550]              havoc tmpNow;
[L3551]              havoc gas;
[L3552]              assume gas > 4000000 && gas <= 8000000;
[L3553]              tmpNow := now;
[L3554]              havoc now;
[L3555]              assume now > tmpNow;
[L3556]              assume msgsender_MSG != null;
[L3557]              assume DType[msgsender_MSG] != owned;
[L3558]              assume DType[msgsender_MSG] != safeMath;
[L3559]              assume DType[msgsender_MSG] != StandardToken;
[L3560]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]              Alloc[msgsender_MSG] := true;
[L3562]  COND TRUE   choice == 7
[L3564]              gas := gas - 21000;
[L3565]  COND FALSE  !(gas >= 0)
[L3644]  RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:10:04,959 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:10:04,960 INFO  L82        PathProgramCache]: Analyzing trace with hash 1414026906, now seen corresponding path program 1 times
[2020-05-30 20:10:04,960 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:10:04,979 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:10:05,041 INFO  L134       CoverageAnalysis]: Checked inductivity of 48 backedges. 26 proven. 0 refuted. 0 times theorem prover too weak. 22 trivial. 0 not checked.
[2020-05-30 20:10:05,041 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:10:05,042 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-05-30 20:10:05,042 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:10:05,042 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-30 20:10:05,042 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-05-30 20:10:05,042 INFO  L87              Difference]: Start difference. First operand 3381 states and 3697 transitions. cyclomatic complexity: 319 Second operand 10 states.
[2020-05-30 20:10:06,126 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:10:06,126 INFO  L93              Difference]: Finished difference Result 3740 states and 4121 transitions.
[2020-05-30 20:10:06,126 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 20:10:06,126 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3740 states and 4121 transitions.
[2020-05-30 20:10:06,136 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-05-30 20:10:06,146 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3740 states to 3740 states and 4121 transitions.
[2020-05-30 20:10:06,146 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 680
[2020-05-30 20:10:06,147 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 680
[2020-05-30 20:10:06,147 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3740 states and 4121 transitions.
[2020-05-30 20:10:06,149 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:10:06,149 INFO  L728         BuchiCegarLoop]: Abstraction has 3740 states and 4121 transitions.
[2020-05-30 20:10:06,152 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3740 states and 4121 transitions.
[2020-05-30 20:10:06,170 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3740 to 3722.
[2020-05-30 20:10:06,170 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3722 states.
[2020-05-30 20:10:06,173 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3722 states to 3722 states and 4093 transitions.
[2020-05-30 20:10:06,173 INFO  L751         BuchiCegarLoop]: Abstraction has 3722 states and 4093 transitions.
[2020-05-30 20:10:06,173 INFO  L631         BuchiCegarLoop]: Abstraction has 3722 states and 4093 transitions.
[2020-05-30 20:10:06,173 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-05-30 20:10:06,173 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3722 states and 4093 transitions.
[2020-05-30 20:10:06,178 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:10:06,178 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:10:06,178 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:10:06,179 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:10:06,179 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND TRUE   __exception
[L345]                     __tmp__Balance := Balance;
[L346]                     __tmp__DType := DType;
[L347]                     __tmp__Alloc := Alloc;
[L348]                     __tmp__balance_ADDR := balance_ADDR;
[L349]                     __tmp__M_Ref_int_balancesArray0 := M_Ref_int_balancesArray0;
[L350]                     __tmp__sum_balancesArray0 := sum_balancesArray0;
[L351]                     __tmp__M_Ref_int_usersEPXfundValue1 := M_Ref_int_usersEPXfundValue1;
[L352]                     __tmp__sum_usersEPXfundValue1 := sum_usersEPXfundValue1;
[L353]                     __tmp__Length := Length;
[L354]                     __tmp__now := now;
[L355]                     __tmp__owner_owned := owner_owned;
[L356]                     __tmp__admin_EPXCrowdsale := admin_EPXCrowdsale;
[L357]                     __tmp__tokenReward_EPXCrowdsale := tokenReward_EPXCrowdsale;
[L358]                     __tmp__initialTokenSupply_EPXCrowdsale := initialTokenSupply_EPXCrowdsale;
[L359]                     __tmp__tokensRemaining_EPXCrowdsale := tokensRemaining_EPXCrowdsale;
[L360]                     __tmp__beneficiaryWallet_EPXCrowdsale := beneficiaryWallet_EPXCrowdsale;
[L361]                     __tmp__amountRaisedInWei_EPXCrowdsale := amountRaisedInWei_EPXCrowdsale;
[L362]                     __tmp__fundingMinCapInWei_EPXCrowdsale := fundingMinCapInWei_EPXCrowdsale;
[L363]                     __tmp__CurrentStatus_EPXCrowdsale := CurrentStatus_EPXCrowdsale;
[L364]                     __tmp__fundingStartBlock_EPXCrowdsale := fundingStartBlock_EPXCrowdsale;
[L365]                     __tmp__fundingEndBlock_EPXCrowdsale := fundingEndBlock_EPXCrowdsale;
[L366]                     __tmp__isCrowdSaleClosed_EPXCrowdsale := isCrowdSaleClosed_EPXCrowdsale;
[L367]                     __tmp__areFundsReleasedToBeneficiary_EPXCrowdsale := areFundsReleasedToBeneficiary_EPXCrowdsale;
[L368]                     __tmp__isCrowdSaleSetup_EPXCrowdsale := isCrowdSaleSetup_EPXCrowdsale;
[L369]                     __tmp__balancesArray_EPXCrowdsale := balancesArray_EPXCrowdsale;
[L370]                     __tmp__usersEPXfundValue_EPXCrowdsale := usersEPXfundValue_EPXCrowdsale;
[L371]         CALL        call EPXCrowdsale_EPXCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L1865]        CALL        call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[L1128]        CALL        call owned_owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1108]                    assume msgsender_MSG != null;
[L1109]                    __tmp__Balance[this] := 0;
[L1110]                    __tmp__owner_owned[this] := null;
[L1111]                    __tmp__owner_owned[this] := msgsender_MSG;
[L1128]        RET         call owned_owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1129]        COND FALSE  !(revert)
[L1865]        RET         call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[L1866]        COND FALSE  !(revert)
[L1871]        CALL        call safeMath_safeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[L1166]        CALL        call safeMath_safeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1150]                    assume msgsender_MSG != null;
[L1151]                    __tmp__Balance[this] := 0;
[L1166]        RET         call safeMath_safeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1167]        COND FALSE  !(revert)
[L1871]        RET         call safeMath_safeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[L1872]        COND FALSE  !(revert)
[L1877]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1767]                    assume msgsender_MSG != null;
[L1768]                    __tmp__Balance[this] := 0;
[L1769]                    __tmp__admin_EPXCrowdsale[this] := null;
[L1770]                    __tmp__initialTokenSupply_EPXCrowdsale[this] := 0;
[L1771]                    __tmp__tokensRemaining_EPXCrowdsale[this] := 0;
[L1772]                    __tmp__beneficiaryWallet_EPXCrowdsale[this] := null;
[L1773]                    __tmp__amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1774]                    __tmp__fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1775]                    __tmp__CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1776]                    __tmp__fundingStartBlock_EPXCrowdsale[this] := 0;
[L1777]                    __tmp__fundingEndBlock_EPXCrowdsale[this] := 0;
[L1778]                    __tmp__isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1779]                    __tmp__areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1780]                    __tmp__isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1781]        CALL        call __var_1 := FreshRefGenerator__fail();
[L1088]                    havoc newRef;
[L1089]                    assume __tmp__Alloc[newRef] == false;
[L1090]                    __tmp__Alloc[newRef] := true;
[L1091]                    assume newRef != null;
[L1781]        RET         call __var_1 := FreshRefGenerator__fail();
[L1782]        COND FALSE  !(revert)
[L1787]                    __tmp__balancesArray_EPXCrowdsale[this] := __var_1;
[L1788]                    __tmp__M_Ref_int_balancesArray0[__tmp__balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1789]                    __tmp__sum_balancesArray0[__tmp__balancesArray_EPXCrowdsale[this]] := 0;
[L1790]        CALL        call __var_2 := FreshRefGenerator__fail();
[L1088]                    havoc newRef;
[L1089]                    assume __tmp__Alloc[newRef] == false;
[L1090]                    __tmp__Alloc[newRef] := true;
[L1091]                    assume newRef != null;
[L1790]        RET         call __var_2 := FreshRefGenerator__fail();
[L1791]        COND FALSE  !(revert)
[L1796]                    __tmp__usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1797]                    __tmp__M_Ref_int_usersEPXfundValue1[__tmp__usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1798]                    __tmp__sum_usersEPXfundValue1[__tmp__usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1799]        CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3333]                    gas := gas - 828;
[L3334]        COND FALSE  !(!(msgsender_MSG == __tmp__owner_owned[this]))
[L1799]        RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L1800]        COND FALSE  !(revert)
[L1805]                    __tmp__admin_EPXCrowdsale[this] := msgsender_MSG;
[L1806]                    __tmp__CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1877]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1878]        COND FALSE  !(revert)
[L371]         RET         call EPXCrowdsale_EPXCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L372]                     assume revert || gas < 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]              havoc msgsender_MSG;
[L3542]              havoc msgvalue_MSG;
[L3543]              havoc choice;
[L3544]              havoc initialEPXtokenCount_s286;
[L3545]              havoc remainingEPXtokenCount_s299;
[L3546]              havoc _fundingStartBlock_s391;
[L3547]              havoc _fundingEndBlock_s391;
[L3548]              havoc response_s391;
[L3549]              havoc _amount_s558;
[L3550]              havoc tmpNow;
[L3551]              havoc gas;
[L3552]              assume gas > 4000000 && gas <= 8000000;
[L3553]              tmpNow := now;
[L3554]              havoc now;
[L3555]              assume now > tmpNow;
[L3556]              assume msgsender_MSG != null;
[L3557]              assume DType[msgsender_MSG] != owned;
[L3558]              assume DType[msgsender_MSG] != safeMath;
[L3559]              assume DType[msgsender_MSG] != StandardToken;
[L3560]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]              Alloc[msgsender_MSG] := true;
[L3562]  COND TRUE   choice == 7
[L3564]              gas := gas - 21000;
[L3565]  COND FALSE  !(gas >= 0)
[L3644]  RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:10:06,182 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:10:06,182 INFO  L82        PathProgramCache]: Analyzing trace with hash -1088094662, now seen corresponding path program 1 times
[2020-05-30 20:10:06,182 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:10:06,196 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:10:06,242 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-30 20:10:06,242 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:10:06,242 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-30 20:10:06,243 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:10:06,243 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 20:10:06,243 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-05-30 20:10:06,243 INFO  L87              Difference]: Start difference. First operand 3722 states and 4093 transitions. cyclomatic complexity: 374 Second operand 4 states.
[2020-05-30 20:10:06,405 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:10:06,405 INFO  L93              Difference]: Finished difference Result 4345 states and 4943 transitions.
[2020-05-30 20:10:06,405 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-30 20:10:06,405 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4345 states and 4943 transitions.
[2020-05-30 20:10:06,412 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-05-30 20:10:06,424 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4345 states to 4233 states and 4829 transitions.
[2020-05-30 20:10:06,424 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 826
[2020-05-30 20:10:06,425 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 826
[2020-05-30 20:10:06,425 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4233 states and 4829 transitions.
[2020-05-30 20:10:06,428 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:10:06,428 INFO  L728         BuchiCegarLoop]: Abstraction has 4233 states and 4829 transitions.
[2020-05-30 20:10:06,430 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4233 states and 4829 transitions.
[2020-05-30 20:10:06,450 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4233 to 3610.
[2020-05-30 20:10:06,450 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3610 states.
[2020-05-30 20:10:06,453 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3610 states to 3610 states and 3978 transitions.
[2020-05-30 20:10:06,453 INFO  L751         BuchiCegarLoop]: Abstraction has 3610 states and 3978 transitions.
[2020-05-30 20:10:06,453 INFO  L631         BuchiCegarLoop]: Abstraction has 3610 states and 3978 transitions.
[2020-05-30 20:10:06,453 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-05-30 20:10:06,453 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3610 states and 3978 transitions.
[2020-05-30 20:10:06,457 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:10:06,457 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:10:06,457 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:10:06,458 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:10:06,458 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := 855885808;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]              havoc msgsender_MSG;
[L3542]              havoc msgvalue_MSG;
[L3543]              havoc choice;
[L3544]              havoc initialEPXtokenCount_s286;
[L3545]              havoc remainingEPXtokenCount_s299;
[L3546]              havoc _fundingStartBlock_s391;
[L3547]              havoc _fundingEndBlock_s391;
[L3548]              havoc response_s391;
[L3549]              havoc _amount_s558;
[L3550]              havoc tmpNow;
[L3551]              havoc gas;
[L3552]              assume gas > 4000000 && gas <= 8000000;
[L3553]              tmpNow := now;
[L3554]              havoc now;
[L3555]              assume now > tmpNow;
[L3556]              assume msgsender_MSG != null;
[L3557]              assume DType[msgsender_MSG] != owned;
[L3558]              assume DType[msgsender_MSG] != safeMath;
[L3559]              assume DType[msgsender_MSG] != StandardToken;
[L3560]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]              Alloc[msgsender_MSG] := true;
[L3562]  COND TRUE   choice == 7
[L3564]              gas := gas - 21000;
[L3565]  COND FALSE  !(gas >= 0)
[L3644]  RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:10:06,461 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:10:06,461 INFO  L82        PathProgramCache]: Analyzing trace with hash 1992744626, now seen corresponding path program 1 times
[2020-05-30 20:10:06,462 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:10:06,479 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:10:06,549 INFO  L134       CoverageAnalysis]: Checked inductivity of 114 backedges. 58 proven. 0 refuted. 0 times theorem prover too weak. 56 trivial. 0 not checked.
[2020-05-30 20:10:06,549 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:10:06,549 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-05-30 20:10:06,549 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:10:06,550 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-30 20:10:06,550 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-05-30 20:10:06,550 INFO  L87              Difference]: Start difference. First operand 3610 states and 3978 transitions. cyclomatic complexity: 371 Second operand 10 states.
[2020-05-30 20:10:07,548 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:10:07,548 INFO  L93              Difference]: Finished difference Result 4037 states and 4477 transitions.
[2020-05-30 20:10:07,548 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 20:10:07,548 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4037 states and 4477 transitions.
[2020-05-30 20:10:07,554 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 20:10:07,561 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4037 states to 4037 states and 4477 transitions.
[2020-05-30 20:10:07,561 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 797
[2020-05-30 20:10:07,561 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 797
[2020-05-30 20:10:07,561 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4037 states and 4477 transitions.
[2020-05-30 20:10:07,563 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:10:07,563 INFO  L728         BuchiCegarLoop]: Abstraction has 4037 states and 4477 transitions.
[2020-05-30 20:10:07,565 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4037 states and 4477 transitions.
[2020-05-30 20:10:07,582 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4037 to 3970.
[2020-05-30 20:10:07,582 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3970 states.
[2020-05-30 20:10:07,586 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3970 states to 3970 states and 4410 transitions.
[2020-05-30 20:10:07,586 INFO  L751         BuchiCegarLoop]: Abstraction has 3970 states and 4410 transitions.
[2020-05-30 20:10:07,586 INFO  L631         BuchiCegarLoop]: Abstraction has 3970 states and 4410 transitions.
[2020-05-30 20:10:07,586 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-05-30 20:10:07,586 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3970 states and 4410 transitions.
[2020-05-30 20:10:07,589 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 20:10:07,589 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:10:07,589 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:10:07,590 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:10:07,590 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -693742297;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]              havoc msgsender_MSG;
[L3542]              havoc msgvalue_MSG;
[L3543]              havoc choice;
[L3544]              havoc initialEPXtokenCount_s286;
[L3545]              havoc remainingEPXtokenCount_s299;
[L3546]              havoc _fundingStartBlock_s391;
[L3547]              havoc _fundingEndBlock_s391;
[L3548]              havoc response_s391;
[L3549]              havoc _amount_s558;
[L3550]              havoc tmpNow;
[L3551]              havoc gas;
[L3552]              assume gas > 4000000 && gas <= 8000000;
[L3553]              tmpNow := now;
[L3554]              havoc now;
[L3555]              assume now > tmpNow;
[L3556]              assume msgsender_MSG != null;
[L3557]              assume DType[msgsender_MSG] != owned;
[L3558]              assume DType[msgsender_MSG] != safeMath;
[L3559]              assume DType[msgsender_MSG] != StandardToken;
[L3560]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]              Alloc[msgsender_MSG] := true;
[L3562]  COND TRUE   choice == 7
[L3564]              gas := gas - 21000;
[L3565]  COND FALSE  !(gas >= 0)
[L3644]  RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:10:07,593 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:10:07,594 INFO  L82        PathProgramCache]: Analyzing trace with hash -822109647, now seen corresponding path program 1 times
[2020-05-30 20:10:07,594 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:10:07,611 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:10:07,708 INFO  L134       CoverageAnalysis]: Checked inductivity of 114 backedges. 27 proven. 0 refuted. 0 times theorem prover too weak. 87 trivial. 0 not checked.
[2020-05-30 20:10:07,708 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:10:07,709 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-05-30 20:10:07,709 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:10:07,709 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 20:10:07,709 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=35, Invalid=75, Unknown=0, NotChecked=0, Total=110
[2020-05-30 20:10:07,710 INFO  L87              Difference]: Start difference. First operand 3970 states and 4410 transitions. cyclomatic complexity: 443 Second operand 11 states.
[2020-05-30 20:10:08,287 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:10:08,287 INFO  L93              Difference]: Finished difference Result 4572 states and 5077 transitions.
[2020-05-30 20:10:08,287 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-30 20:10:08,287 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4572 states and 5077 transitions.
[2020-05-30 20:10:08,295 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-05-30 20:10:08,304 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4572 states to 4464 states and 4939 transitions.
[2020-05-30 20:10:08,304 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 959
[2020-05-30 20:10:08,305 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 959
[2020-05-30 20:10:08,305 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4464 states and 4939 transitions.
[2020-05-30 20:10:08,308 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:10:08,308 INFO  L728         BuchiCegarLoop]: Abstraction has 4464 states and 4939 transitions.
[2020-05-30 20:10:08,310 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4464 states and 4939 transitions.
[2020-05-30 20:10:08,333 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4464 to 3970.
[2020-05-30 20:10:08,333 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3970 states.
[2020-05-30 20:10:08,337 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3970 states to 3970 states and 4360 transitions.
[2020-05-30 20:10:08,337 INFO  L751         BuchiCegarLoop]: Abstraction has 3970 states and 4360 transitions.
[2020-05-30 20:10:08,337 INFO  L631         BuchiCegarLoop]: Abstraction has 3970 states and 4360 transitions.
[2020-05-30 20:10:08,337 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-05-30 20:10:08,337 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3970 states and 4360 transitions.
[2020-05-30 20:10:08,341 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 20:10:08,341 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:10:08,341 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:10:08,342 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:10:08,342 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -693742297;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -693742297;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:10:08,346 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:10:08,346 INFO  L82        PathProgramCache]: Analyzing trace with hash 480044844, now seen corresponding path program 1 times
[2020-05-30 20:10:08,346 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:10:08,366 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:10:08,478 INFO  L134       CoverageAnalysis]: Checked inductivity of 114 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 114 trivial. 0 not checked.
[2020-05-30 20:10:08,478 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:10:08,479 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-05-30 20:10:08,479 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:10:08,479 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 20:10:08,479 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=107, Unknown=0, NotChecked=0, Total=132
[2020-05-30 20:10:08,479 INFO  L87              Difference]: Start difference. First operand 3970 states and 4360 transitions. cyclomatic complexity: 393 Second operand 12 states.
[2020-05-30 20:10:09,449 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:10:09,449 INFO  L93              Difference]: Finished difference Result 4062 states and 4480 transitions.
[2020-05-30 20:10:09,449 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-05-30 20:10:09,449 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4062 states and 4480 transitions.
[2020-05-30 20:10:09,455 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 20:10:09,461 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4062 states to 4062 states and 4480 transitions.
[2020-05-30 20:10:09,461 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 808
[2020-05-30 20:10:09,462 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 808
[2020-05-30 20:10:09,462 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4062 states and 4480 transitions.
[2020-05-30 20:10:09,463 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:10:09,463 INFO  L728         BuchiCegarLoop]: Abstraction has 4062 states and 4480 transitions.
[2020-05-30 20:10:09,465 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4062 states and 4480 transitions.
[2020-05-30 20:10:09,479 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4062 to 4015.
[2020-05-30 20:10:09,479 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4015 states.
[2020-05-30 20:10:09,483 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4015 states to 4015 states and 4428 transitions.
[2020-05-30 20:10:09,483 INFO  L751         BuchiCegarLoop]: Abstraction has 4015 states and 4428 transitions.
[2020-05-30 20:10:09,483 INFO  L631         BuchiCegarLoop]: Abstraction has 4015 states and 4428 transitions.
[2020-05-30 20:10:09,483 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-05-30 20:10:09,483 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4015 states and 4428 transitions.
[2020-05-30 20:10:09,486 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 20:10:09,486 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:10:09,486 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:10:09,488 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:10:09,488 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -693742297;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND FALSE  !(DType[this] == EPXCrowdsale)
[L1267]        COND TRUE   DType[this] == StandardToken
[L1269]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1269]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1270]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND FALSE  !(DType[this] == EPXCrowdsale)
[L1535]        COND TRUE   DType[this] == StandardToken
[L1537]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1537]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1538]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:10:09,492 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:10:09,493 INFO  L82        PathProgramCache]: Analyzing trace with hash -273348535, now seen corresponding path program 1 times
[2020-05-30 20:10:09,493 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:10:09,512 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:10:09,681 INFO  L134       CoverageAnalysis]: Checked inductivity of 246 backedges. 9 proven. 0 refuted. 0 times theorem prover too weak. 237 trivial. 0 not checked.
[2020-05-30 20:10:09,681 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:10:09,682 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-05-30 20:10:09,682 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:10:09,682 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-30 20:10:09,682 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-05-30 20:10:09,682 INFO  L87              Difference]: Start difference. First operand 4015 states and 4428 transitions. cyclomatic complexity: 418 Second operand 7 states.
[2020-05-30 20:10:09,741 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:10:09,741 INFO  L93              Difference]: Finished difference Result 4045 states and 4456 transitions.
[2020-05-30 20:10:09,741 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-30 20:10:09,741 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4045 states and 4456 transitions.
[2020-05-30 20:10:09,747 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 20:10:09,754 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4045 states to 3995 states and 4400 transitions.
[2020-05-30 20:10:09,754 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 767
[2020-05-30 20:10:09,754 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 767
[2020-05-30 20:10:09,754 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3995 states and 4400 transitions.
[2020-05-30 20:10:09,756 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:10:09,756 INFO  L728         BuchiCegarLoop]: Abstraction has 3995 states and 4400 transitions.
[2020-05-30 20:10:09,758 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3995 states and 4400 transitions.
[2020-05-30 20:10:09,773 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3995 to 3995.
[2020-05-30 20:10:09,773 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3995 states.
[2020-05-30 20:10:09,776 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3995 states to 3995 states and 4400 transitions.
[2020-05-30 20:10:09,777 INFO  L751         BuchiCegarLoop]: Abstraction has 3995 states and 4400 transitions.
[2020-05-30 20:10:09,777 INFO  L631         BuchiCegarLoop]: Abstraction has 3995 states and 4400 transitions.
[2020-05-30 20:10:09,777 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-05-30 20:10:09,777 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3995 states and 4400 transitions.
[2020-05-30 20:10:09,780 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 20:10:09,780 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:10:09,780 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:10:09,782 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:10:09,782 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -693742297;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND FALSE  !(DType[this] == EPXCrowdsale)
[L1535]        COND FALSE  !(DType[this] == StandardToken)
[L1543]        COND TRUE   DType[this] == safeMath
[L1545]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1545]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1546]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:10:09,787 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:10:09,787 INFO  L82        PathProgramCache]: Analyzing trace with hash 94020420, now seen corresponding path program 1 times
[2020-05-30 20:10:09,788 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:10:09,806 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:10:09,928 INFO  L134       CoverageAnalysis]: Checked inductivity of 246 backedges. 9 proven. 0 refuted. 0 times theorem prover too weak. 237 trivial. 0 not checked.
[2020-05-30 20:10:09,929 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:10:09,929 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-05-30 20:10:09,929 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:10:09,929 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-30 20:10:09,930 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-05-30 20:10:09,930 INFO  L87              Difference]: Start difference. First operand 3995 states and 4400 transitions. cyclomatic complexity: 410 Second operand 7 states.
[2020-05-30 20:10:09,980 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:10:09,980 INFO  L93              Difference]: Finished difference Result 4033 states and 4436 transitions.
[2020-05-30 20:10:09,980 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-30 20:10:09,980 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4033 states and 4436 transitions.
[2020-05-30 20:10:09,986 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 20:10:09,992 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4033 states to 3975 states and 4372 transitions.
[2020-05-30 20:10:09,992 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 767
[2020-05-30 20:10:09,992 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 767
[2020-05-30 20:10:09,992 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3975 states and 4372 transitions.
[2020-05-30 20:10:09,993 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:10:09,993 INFO  L728         BuchiCegarLoop]: Abstraction has 3975 states and 4372 transitions.
[2020-05-30 20:10:09,995 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3975 states and 4372 transitions.
[2020-05-30 20:10:10,012 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3975 to 3975.
[2020-05-30 20:10:10,012 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3975 states.
[2020-05-30 20:10:10,016 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3975 states to 3975 states and 4372 transitions.
[2020-05-30 20:10:10,016 INFO  L751         BuchiCegarLoop]: Abstraction has 3975 states and 4372 transitions.
[2020-05-30 20:10:10,016 INFO  L631         BuchiCegarLoop]: Abstraction has 3975 states and 4372 transitions.
[2020-05-30 20:10:10,016 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-05-30 20:10:10,016 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3975 states and 4372 transitions.
[2020-05-30 20:10:10,019 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 20:10:10,019 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:10:10,019 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:10:10,021 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:10:10,021 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -693742297;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND FALSE  !(DType[this] == EPXCrowdsale)
[L1645]        COND FALSE  !(DType[this] == StandardToken)
[L1653]        COND TRUE   DType[this] == safeMath
[L1655]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1655]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1656]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND FALSE  !(DType[this] == EPXCrowdsale)
[L1645]        COND FALSE  !(DType[this] == StandardToken)
[L1653]        COND TRUE   DType[this] == safeMath
[L1655]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1655]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1656]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]              havoc msgsender_MSG;
[L3542]              havoc msgvalue_MSG;
[L3543]              havoc choice;
[L3544]              havoc initialEPXtokenCount_s286;
[L3545]              havoc remainingEPXtokenCount_s299;
[L3546]              havoc _fundingStartBlock_s391;
[L3547]              havoc _fundingEndBlock_s391;
[L3548]              havoc response_s391;
[L3549]              havoc _amount_s558;
[L3550]              havoc tmpNow;
[L3551]              havoc gas;
[L3552]              assume gas > 4000000 && gas <= 8000000;
[L3553]              tmpNow := now;
[L3554]              havoc now;
[L3555]              assume now > tmpNow;
[L3556]              assume msgsender_MSG != null;
[L3557]              assume DType[msgsender_MSG] != owned;
[L3558]              assume DType[msgsender_MSG] != safeMath;
[L3559]              assume DType[msgsender_MSG] != StandardToken;
[L3560]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]              Alloc[msgsender_MSG] := true;
[L3562]  COND FALSE  !(choice == 7)
[L3571]  COND FALSE  !(choice == 6)
[L3580]  COND FALSE  !(choice == 5)
[L3589]  COND FALSE  !(choice == 4)
[L3598]  COND FALSE  !(choice == 3)
[L3607]  COND FALSE  !(choice == 2)
[L3616]  COND FALSE  !(choice == 1)
[L3644]  RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:10:10,025 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:10:10,026 INFO  L82        PathProgramCache]: Analyzing trace with hash -583183942, now seen corresponding path program 1 times
[2020-05-30 20:10:10,026 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:10:10,045 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:10:10,178 INFO  L134       CoverageAnalysis]: Checked inductivity of 248 backedges. 9 proven. 10 refuted. 0 times theorem prover too weak. 229 trivial. 0 not checked.
[2020-05-30 20:10:10,178 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:10:10,178 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-05-30 20:10:10,179 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:10:10,179 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-30 20:10:10,180 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-05-30 20:10:10,180 INFO  L87              Difference]: Start difference. First operand 3975 states and 4372 transitions. cyclomatic complexity: 402 Second operand 7 states.
[2020-05-30 20:10:10,234 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:10:10,234 INFO  L93              Difference]: Finished difference Result 4061 states and 4462 transitions.
[2020-05-30 20:10:10,234 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-05-30 20:10:10,234 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4061 states and 4462 transitions.
[2020-05-30 20:10:10,240 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 20:10:10,245 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4061 states to 4003 states and 4400 transitions.
[2020-05-30 20:10:10,245 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 776
[2020-05-30 20:10:10,246 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 785
[2020-05-30 20:10:10,246 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4003 states and 4400 transitions.
[2020-05-30 20:10:10,247 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:10:10,247 INFO  L728         BuchiCegarLoop]: Abstraction has 4003 states and 4400 transitions.
[2020-05-30 20:10:10,249 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4003 states and 4400 transitions.
[2020-05-30 20:10:10,263 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4003 to 4003.
[2020-05-30 20:10:10,263 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4003 states.
[2020-05-30 20:10:10,267 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4003 states to 4003 states and 4400 transitions.
[2020-05-30 20:10:10,267 INFO  L751         BuchiCegarLoop]: Abstraction has 4003 states and 4400 transitions.
[2020-05-30 20:10:10,267 INFO  L631         BuchiCegarLoop]: Abstraction has 4003 states and 4400 transitions.
[2020-05-30 20:10:10,267 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-05-30 20:10:10,267 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4003 states and 4400 transitions.
[2020-05-30 20:10:10,270 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 20:10:10,270 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:10:10,270 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:10:10,271 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:10:10,271 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -693742297;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:10:10,275 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:10:10,276 INFO  L82        PathProgramCache]: Analyzing trace with hash -1062971148, now seen corresponding path program 1 times
[2020-05-30 20:10:10,276 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:10:10,299 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:10:10,492 INFO  L134       CoverageAnalysis]: Checked inductivity of 246 backedges. 88 proven. 56 refuted. 0 times theorem prover too weak. 102 trivial. 0 not checked.
[2020-05-30 20:10:10,492 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:10:10,492 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [14] total 14
[2020-05-30 20:10:10,493 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:10:10,493 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-05-30 20:10:10,493 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=152, Unknown=0, NotChecked=0, Total=182
[2020-05-30 20:10:10,493 INFO  L87              Difference]: Start difference. First operand 4003 states and 4400 transitions. cyclomatic complexity: 402 Second operand 14 states.
[2020-05-30 20:10:12,141 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:10:12,141 INFO  L93              Difference]: Finished difference Result 4128 states and 4582 transitions.
[2020-05-30 20:10:12,142 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-30 20:10:12,142 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4128 states and 4582 transitions.
[2020-05-30 20:10:12,147 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 10
[2020-05-30 20:10:12,153 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4128 states to 4128 states and 4582 transitions.
[2020-05-30 20:10:12,153 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 818
[2020-05-30 20:10:12,154 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 818
[2020-05-30 20:10:12,154 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4128 states and 4582 transitions.
[2020-05-30 20:10:12,155 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:10:12,155 INFO  L728         BuchiCegarLoop]: Abstraction has 4128 states and 4582 transitions.
[2020-05-30 20:10:12,157 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4128 states and 4582 transitions.
[2020-05-30 20:10:12,175 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4128 to 4045.
[2020-05-30 20:10:12,175 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4045 states.
[2020-05-30 20:10:12,179 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4045 states to 4045 states and 4497 transitions.
[2020-05-30 20:10:12,179 INFO  L751         BuchiCegarLoop]: Abstraction has 4045 states and 4497 transitions.
[2020-05-30 20:10:12,179 INFO  L631         BuchiCegarLoop]: Abstraction has 4045 states and 4497 transitions.
[2020-05-30 20:10:12,179 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-05-30 20:10:12,179 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4045 states and 4497 transitions.
[2020-05-30 20:10:12,183 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 10
[2020-05-30 20:10:12,183 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:10:12,183 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:10:12,184 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:10:12,184 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1845164479;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:10:12,189 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:10:12,189 INFO  L82        PathProgramCache]: Analyzing trace with hash 374934232, now seen corresponding path program 1 times
[2020-05-30 20:10:12,190 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:10:12,208 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:10:12,381 INFO  L134       CoverageAnalysis]: Checked inductivity of 246 backedges. 32 proven. 60 refuted. 0 times theorem prover too weak. 154 trivial. 0 not checked.
[2020-05-30 20:10:12,381 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:10:12,381 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-30 20:10:12,382 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:10:12,382 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 20:10:12,382 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=20, Invalid=90, Unknown=0, NotChecked=0, Total=110
[2020-05-30 20:10:12,383 INFO  L87              Difference]: Start difference. First operand 4045 states and 4497 transitions. cyclomatic complexity: 457 Second operand 11 states.
[2020-05-30 20:10:13,723 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:10:13,723 INFO  L93              Difference]: Finished difference Result 4991 states and 5626 transitions.
[2020-05-30 20:10:13,723 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-30 20:10:13,723 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4991 states and 5626 transitions.
[2020-05-30 20:10:13,731 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 18
[2020-05-30 20:10:13,741 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4991 states to 4991 states and 5624 transitions.
[2020-05-30 20:10:13,741 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1053
[2020-05-30 20:10:13,742 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1053
[2020-05-30 20:10:13,742 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4991 states and 5624 transitions.
[2020-05-30 20:10:13,744 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:10:13,744 INFO  L728         BuchiCegarLoop]: Abstraction has 4991 states and 5624 transitions.
[2020-05-30 20:10:13,745 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4991 states and 5624 transitions.
[2020-05-30 20:10:13,767 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4991 to 4968.
[2020-05-30 20:10:13,767 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4968 states.
[2020-05-30 20:10:13,773 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4968 states to 4968 states and 5585 transitions.
[2020-05-30 20:10:13,773 INFO  L751         BuchiCegarLoop]: Abstraction has 4968 states and 5585 transitions.
[2020-05-30 20:10:13,773 INFO  L631         BuchiCegarLoop]: Abstraction has 4968 states and 5585 transitions.
[2020-05-30 20:10:13,773 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-05-30 20:10:13,773 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4968 states and 5585 transitions.
[2020-05-30 20:10:13,777 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 18
[2020-05-30 20:10:13,777 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:10:13,777 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:10:13,779 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:10:13,779 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1845164479;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:10:13,782 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:10:13,782 INFO  L82        PathProgramCache]: Analyzing trace with hash -1922823336, now seen corresponding path program 2 times
[2020-05-30 20:10:13,783 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:10:13,804 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:10:14,073 INFO  L134       CoverageAnalysis]: Checked inductivity of 246 backedges. 136 proven. 4 refuted. 0 times theorem prover too weak. 106 trivial. 0 not checked.
[2020-05-30 20:10:14,073 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:10:14,073 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [18] total 18
[2020-05-30 20:10:14,073 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:10:14,074 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-05-30 20:10:14,074 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=43, Invalid=299, Unknown=0, NotChecked=0, Total=342
[2020-05-30 20:10:14,074 INFO  L87              Difference]: Start difference. First operand 4968 states and 5585 transitions. cyclomatic complexity: 622 Second operand 19 states.
[2020-05-30 20:10:16,613 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:10:16,613 INFO  L93              Difference]: Finished difference Result 5909 states and 6733 transitions.
[2020-05-30 20:10:16,613 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 29 states. 
[2020-05-30 20:10:16,613 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5909 states and 6733 transitions.
[2020-05-30 20:10:16,622 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 26
[2020-05-30 20:10:16,634 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5909 states to 5879 states and 6703 transitions.
[2020-05-30 20:10:16,634 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1229
[2020-05-30 20:10:16,635 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1229
[2020-05-30 20:10:16,635 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5879 states and 6703 transitions.
[2020-05-30 20:10:16,638 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:10:16,638 INFO  L728         BuchiCegarLoop]: Abstraction has 5879 states and 6703 transitions.
[2020-05-30 20:10:16,640 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5879 states and 6703 transitions.
[2020-05-30 20:10:16,663 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5879 to 5848.
[2020-05-30 20:10:16,664 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5848 states.
[2020-05-30 20:10:16,671 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5848 states to 5848 states and 6667 transitions.
[2020-05-30 20:10:16,671 INFO  L751         BuchiCegarLoop]: Abstraction has 5848 states and 6667 transitions.
[2020-05-30 20:10:16,671 INFO  L631         BuchiCegarLoop]: Abstraction has 5848 states and 6667 transitions.
[2020-05-30 20:10:16,671 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-05-30 20:10:16,671 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5848 states and 6667 transitions.
[2020-05-30 20:10:16,678 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 26
[2020-05-30 20:10:16,678 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:10:16,678 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:10:16,679 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:10:16,679 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -693742297;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND TRUE   DType[to] == EPXCrowdsale
[L3111]        CALL        call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L2307]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2308]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2309]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2310]                    gas := gas - 4;
[L2311]        CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L2311]        RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2312]        COND FALSE  !(revert)
[L3111]        RET         call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L3112]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]              havoc msgsender_MSG;
[L3542]              havoc msgvalue_MSG;
[L3543]              havoc choice;
[L3544]              havoc initialEPXtokenCount_s286;
[L3545]              havoc remainingEPXtokenCount_s299;
[L3546]              havoc _fundingStartBlock_s391;
[L3547]              havoc _fundingEndBlock_s391;
[L3548]              havoc response_s391;
[L3549]              havoc _amount_s558;
[L3550]              havoc tmpNow;
[L3551]              havoc gas;
[L3552]              assume gas > 4000000 && gas <= 8000000;
[L3553]              tmpNow := now;
[L3554]              havoc now;
[L3555]              assume now > tmpNow;
[L3556]              assume msgsender_MSG != null;
[L3557]              assume DType[msgsender_MSG] != owned;
[L3558]              assume DType[msgsender_MSG] != safeMath;
[L3559]              assume DType[msgsender_MSG] != StandardToken;
[L3560]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]              Alloc[msgsender_MSG] := true;
[L3562]  COND FALSE  !(choice == 7)
[L3571]  COND FALSE  !(choice == 6)
[L3580]  COND FALSE  !(choice == 5)
[L3589]  COND FALSE  !(choice == 4)
[L3598]  COND FALSE  !(choice == 3)
[L3607]  COND FALSE  !(choice == 2)
[L3616]  COND FALSE  !(choice == 1)
[L3644]  RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:10:16,683 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:10:16,683 INFO  L82        PathProgramCache]: Analyzing trace with hash -1732606510, now seen corresponding path program 1 times
[2020-05-30 20:10:16,684 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:10:16,706 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:10:16,841 INFO  L134       CoverageAnalysis]: Checked inductivity of 277 backedges. 64 proven. 29 refuted. 0 times theorem prover too weak. 184 trivial. 0 not checked.
[2020-05-30 20:10:16,841 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:10:16,841 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-05-30 20:10:16,841 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:10:16,842 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-30 20:10:16,842 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-05-30 20:10:16,842 INFO  L87              Difference]: Start difference. First operand 5848 states and 6667 transitions. cyclomatic complexity: 824 Second operand 10 states.
[2020-05-30 20:10:17,830 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:10:17,831 INFO  L93              Difference]: Finished difference Result 7718 states and 8971 transitions.
[2020-05-30 20:10:17,831 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 20:10:17,831 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7718 states and 8971 transitions.
[2020-05-30 20:10:17,846 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 42
[2020-05-30 20:10:17,865 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7718 states to 7712 states and 8963 transitions.
[2020-05-30 20:10:17,865 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1671
[2020-05-30 20:10:17,866 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1671
[2020-05-30 20:10:17,866 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7712 states and 8963 transitions.
[2020-05-30 20:10:17,870 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:10:17,871 INFO  L728         BuchiCegarLoop]: Abstraction has 7712 states and 8963 transitions.
[2020-05-30 20:10:17,873 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7712 states and 8963 transitions.
[2020-05-30 20:10:17,908 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7712 to 7643.
[2020-05-30 20:10:17,908 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7643 states.
[2020-05-30 20:10:17,918 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7643 states to 7643 states and 8873 transitions.
[2020-05-30 20:10:17,918 INFO  L751         BuchiCegarLoop]: Abstraction has 7643 states and 8873 transitions.
[2020-05-30 20:10:17,918 INFO  L631         BuchiCegarLoop]: Abstraction has 7643 states and 8873 transitions.
[2020-05-30 20:10:17,918 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-05-30 20:10:17,918 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7643 states and 8873 transitions.
[2020-05-30 20:10:17,926 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 42
[2020-05-30 20:10:17,926 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:10:17,926 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:10:17,927 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:10:17,928 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -693742297;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -693742297;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -693742297;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:10:17,932 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:10:17,932 INFO  L82        PathProgramCache]: Analyzing trace with hash 1855550888, now seen corresponding path program 2 times
[2020-05-30 20:10:17,933 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:10:17,955 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:10:18,179 INFO  L134       CoverageAnalysis]: Checked inductivity of 645 backedges. 131 proven. 118 refuted. 0 times theorem prover too weak. 396 trivial. 0 not checked.
[2020-05-30 20:10:18,180 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:10:18,180 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-30 20:10:18,180 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:10:18,180 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 20:10:18,180 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-05-30 20:10:18,181 INFO  L87              Difference]: Start difference. First operand 7643 states and 8873 transitions. cyclomatic complexity: 1236 Second operand 11 states.
[2020-05-30 20:10:19,224 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:10:19,224 INFO  L93              Difference]: Finished difference Result 7197 states and 8289 transitions.
[2020-05-30 20:10:19,225 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-05-30 20:10:19,225 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7197 states and 8289 transitions.
[2020-05-30 20:10:19,239 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 32
[2020-05-30 20:10:19,255 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7197 states to 7029 states and 8112 transitions.
[2020-05-30 20:10:19,255 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1370
[2020-05-30 20:10:19,256 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1370
[2020-05-30 20:10:19,256 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7029 states and 8112 transitions.
[2020-05-30 20:10:19,260 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:10:19,260 INFO  L728         BuchiCegarLoop]: Abstraction has 7029 states and 8112 transitions.
[2020-05-30 20:10:19,262 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7029 states and 8112 transitions.
[2020-05-30 20:10:19,292 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7029 to 7016.
[2020-05-30 20:10:19,292 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7016 states.
[2020-05-30 20:10:19,301 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7016 states to 7016 states and 8091 transitions.
[2020-05-30 20:10:19,301 INFO  L751         BuchiCegarLoop]: Abstraction has 7016 states and 8091 transitions.
[2020-05-30 20:10:19,301 INFO  L631         BuchiCegarLoop]: Abstraction has 7016 states and 8091 transitions.
[2020-05-30 20:10:19,301 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-05-30 20:10:19,301 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7016 states and 8091 transitions.
[2020-05-30 20:10:19,308 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 32
[2020-05-30 20:10:19,308 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:10:19,308 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:10:19,309 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:10:19,309 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := 855885808;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -693742297;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:10:19,313 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:10:19,314 INFO  L82        PathProgramCache]: Analyzing trace with hash -656628740, now seen corresponding path program 1 times
[2020-05-30 20:10:19,314 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:10:19,340 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:10:19,756 INFO  L134       CoverageAnalysis]: Checked inductivity of 409 backedges. 2 proven. 14 refuted. 0 times theorem prover too weak. 393 trivial. 0 not checked.
[2020-05-30 20:10:19,756 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:10:19,756 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [20] total 20
[2020-05-30 20:10:19,757 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:10:19,757 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 21 interpolants.
[2020-05-30 20:10:19,757 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=61, Invalid=359, Unknown=0, NotChecked=0, Total=420
[2020-05-30 20:10:19,757 INFO  L87              Difference]: Start difference. First operand 7016 states and 8091 transitions. cyclomatic complexity: 1090 Second operand 21 states.
[2020-05-30 20:10:22,117 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:10:22,118 INFO  L93              Difference]: Finished difference Result 7128 states and 8359 transitions.
[2020-05-30 20:10:22,118 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-05-30 20:10:22,118 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7128 states and 8359 transitions.
[2020-05-30 20:10:22,131 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 32
[2020-05-30 20:10:22,146 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7128 states to 7128 states and 8359 transitions.
[2020-05-30 20:10:22,147 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1399
[2020-05-30 20:10:22,147 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1399
[2020-05-30 20:10:22,147 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7128 states and 8359 transitions.
[2020-05-30 20:10:22,152 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:10:22,152 INFO  L728         BuchiCegarLoop]: Abstraction has 7128 states and 8359 transitions.
[2020-05-30 20:10:22,154 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7128 states and 8359 transitions.
[2020-05-30 20:10:22,186 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7128 to 7082.
[2020-05-30 20:10:22,186 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7082 states.
[2020-05-30 20:10:22,195 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7082 states to 7082 states and 8250 transitions.
[2020-05-30 20:10:22,195 INFO  L751         BuchiCegarLoop]: Abstraction has 7082 states and 8250 transitions.
[2020-05-30 20:10:22,195 INFO  L631         BuchiCegarLoop]: Abstraction has 7082 states and 8250 transitions.
[2020-05-30 20:10:22,195 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-05-30 20:10:22,195 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7082 states and 8250 transitions.
[2020-05-30 20:10:22,202 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 32
[2020-05-30 20:10:22,202 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:10:22,203 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:10:22,204 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:10:22,204 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume msgsender_MSG == user;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -693742297;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND TRUE   DType[to] == EPXCrowdsale
[L3111]        CALL        call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L2307]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2308]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2309]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2310]                    gas := gas - 4;
[L2311]        CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L2311]        RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2312]        COND FALSE  !(revert)
[L3111]        RET         call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L3112]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:10:22,209 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:10:22,209 INFO  L82        PathProgramCache]: Analyzing trace with hash 1349310485, now seen corresponding path program 1 times
[2020-05-30 20:10:22,209 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:10:22,237 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:10:22,775 INFO  L134       CoverageAnalysis]: Checked inductivity of 246 backedges. 117 proven. 10 refuted. 0 times theorem prover too weak. 119 trivial. 0 not checked.
[2020-05-30 20:10:22,775 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:10:22,775 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [36] total 36
[2020-05-30 20:10:22,776 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:10:22,776 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 37 interpolants.
[2020-05-30 20:10:22,776 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=97, Invalid=1235, Unknown=0, NotChecked=0, Total=1332
[2020-05-30 20:10:22,777 INFO  L87              Difference]: Start difference. First operand 7082 states and 8250 transitions. cyclomatic complexity: 1192 Second operand 37 states.
[2020-05-30 20:10:32,492 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:10:32,493 INFO  L93              Difference]: Finished difference Result 15181 states and 17944 transitions.
[2020-05-30 20:10:32,493 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 58 states. 
[2020-05-30 20:10:32,493 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 15181 states and 17944 transitions.
[2020-05-30 20:10:32,531 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 64
[2020-05-30 20:10:32,578 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 15181 states to 15181 states and 17940 transitions.
[2020-05-30 20:10:32,578 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2833
[2020-05-30 20:10:32,580 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2833
[2020-05-30 20:10:32,580 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 15181 states and 17940 transitions.
[2020-05-30 20:10:32,591 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:10:32,591 INFO  L728         BuchiCegarLoop]: Abstraction has 15181 states and 17940 transitions.
[2020-05-30 20:10:32,595 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 15181 states and 17940 transitions.
[2020-05-30 20:10:32,677 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 15181 to 15064.
[2020-05-30 20:10:32,677 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 15064 states.
[2020-05-30 20:10:32,701 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 15064 states to 15064 states and 17778 transitions.
[2020-05-30 20:10:32,701 INFO  L751         BuchiCegarLoop]: Abstraction has 15064 states and 17778 transitions.
[2020-05-30 20:10:32,701 INFO  L631         BuchiCegarLoop]: Abstraction has 15064 states and 17778 transitions.
[2020-05-30 20:10:32,701 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-05-30 20:10:32,701 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 15064 states and 17778 transitions.
[2020-05-30 20:10:32,718 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 64
[2020-05-30 20:10:32,718 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:10:32,718 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:10:32,720 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:10:32,721 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := 855885808;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume msgsender_MSG == user;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -693742297;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND TRUE   DType[to] == EPXCrowdsale
[L3111]        CALL        call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L2307]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2308]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2309]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2310]                    gas := gas - 4;
[L2311]        CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L2311]        RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2312]        COND FALSE  !(revert)
[L3111]        RET         call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L3112]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND TRUE   DType[to] == EPXCrowdsale
[L3111]        CALL        call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L2307]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2308]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2309]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2310]                    gas := gas - 4;
[L2311]        CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L2311]        RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2312]        COND FALSE  !(revert)
[L3111]        RET         call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L3112]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(msgsender_MSG == user);
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:10:32,726 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:10:32,726 INFO  L82        PathProgramCache]: Analyzing trace with hash 2039325402, now seen corresponding path program 1 times
[2020-05-30 20:10:32,727 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:10:32,756 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:10:32,989 INFO  L134       CoverageAnalysis]: Checked inductivity of 729 backedges. 23 proven. 0 refuted. 0 times theorem prover too weak. 706 trivial. 0 not checked.
[2020-05-30 20:10:32,989 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:10:32,990 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-05-30 20:10:32,990 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:10:32,990 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-30 20:10:32,990 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-05-30 20:10:32,990 INFO  L87              Difference]: Start difference. First operand 15064 states and 17778 transitions. cyclomatic complexity: 2764 Second operand 7 states.
[2020-05-30 20:10:33,128 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:10:33,128 INFO  L93              Difference]: Finished difference Result 15043 states and 17709 transitions.
[2020-05-30 20:10:33,128 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-05-30 20:10:33,128 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 15043 states and 17709 transitions.
[2020-05-30 20:10:33,160 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 64
[2020-05-30 20:10:33,204 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 15043 states to 14970 states and 17633 transitions.
[2020-05-30 20:10:33,204 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2718
[2020-05-30 20:10:33,205 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2718
[2020-05-30 20:10:33,205 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 14970 states and 17633 transitions.
[2020-05-30 20:10:33,216 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:10:33,216 INFO  L728         BuchiCegarLoop]: Abstraction has 14970 states and 17633 transitions.
[2020-05-30 20:10:33,221 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 14970 states and 17633 transitions.
[2020-05-30 20:10:33,298 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 14970 to 14970.
[2020-05-30 20:10:33,299 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 14970 states.
[2020-05-30 20:10:33,323 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 14970 states to 14970 states and 17633 transitions.
[2020-05-30 20:10:33,323 INFO  L751         BuchiCegarLoop]: Abstraction has 14970 states and 17633 transitions.
[2020-05-30 20:10:33,323 INFO  L631         BuchiCegarLoop]: Abstraction has 14970 states and 17633 transitions.
[2020-05-30 20:10:33,323 INFO  L445         BuchiCegarLoop]: ======== Iteration 25============
[2020-05-30 20:10:33,323 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 14970 states and 17633 transitions.
[2020-05-30 20:10:33,341 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 64
[2020-05-30 20:10:33,341 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:10:33,341 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:10:33,342 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:10:33,342 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume msgsender_MSG == user;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -693742297;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(msgsender_MSG == user);
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]              havoc msgsender_MSG;
[L3542]              havoc msgvalue_MSG;
[L3543]              havoc choice;
[L3544]              havoc initialEPXtokenCount_s286;
[L3545]              havoc remainingEPXtokenCount_s299;
[L3546]              havoc _fundingStartBlock_s391;
[L3547]              havoc _fundingEndBlock_s391;
[L3548]              havoc response_s391;
[L3549]              havoc _amount_s558;
[L3550]              havoc tmpNow;
[L3551]              havoc gas;
[L3552]              assume gas > 4000000 && gas <= 8000000;
[L3553]              tmpNow := now;
[L3554]              havoc now;
[L3555]              assume now > tmpNow;
[L3556]              assume msgsender_MSG != null;
[L3557]              assume DType[msgsender_MSG] != owned;
[L3558]              assume DType[msgsender_MSG] != safeMath;
[L3559]              assume DType[msgsender_MSG] != StandardToken;
[L3560]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]              Alloc[msgsender_MSG] := true;
[L3562]  COND FALSE  !(choice == 7)
[L3571]  COND FALSE  !(choice == 6)
[L3580]  COND FALSE  !(choice == 5)
[L3589]  COND FALSE  !(choice == 4)
[L3598]  COND FALSE  !(choice == 3)
[L3607]  COND FALSE  !(choice == 2)
[L3616]  COND FALSE  !(choice == 1)
[L3644]  RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:10:33,347 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:10:33,347 INFO  L82        PathProgramCache]: Analyzing trace with hash -893063496, now seen corresponding path program 1 times
[2020-05-30 20:10:33,347 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:10:33,363 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:10:33,531 INFO  L134       CoverageAnalysis]: Checked inductivity of 447 backedges. 4 proven. 109 refuted. 0 times theorem prover too weak. 334 trivial. 0 not checked.
[2020-05-30 20:10:33,531 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:10:33,531 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-30 20:10:33,531 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:10:33,531 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 20:10:33,532 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=20, Invalid=90, Unknown=0, NotChecked=0, Total=110
[2020-05-30 20:10:33,532 INFO  L87              Difference]: Start difference. First operand 14970 states and 17633 transitions. cyclomatic complexity: 2713 Second operand 11 states.
[2020-05-30 20:10:34,350 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:10:34,350 INFO  L93              Difference]: Finished difference Result 14915 states and 17555 transitions.
[2020-05-30 20:10:34,350 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-05-30 20:10:34,351 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 14915 states and 17555 transitions.
[2020-05-30 20:10:34,386 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 64
[2020-05-30 20:10:34,432 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 14915 states to 14915 states and 17555 transitions.
[2020-05-30 20:10:34,432 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2718
[2020-05-30 20:10:34,434 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2718
[2020-05-30 20:10:34,434 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 14915 states and 17555 transitions.
[2020-05-30 20:10:34,444 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:10:34,444 INFO  L728         BuchiCegarLoop]: Abstraction has 14915 states and 17555 transitions.
[2020-05-30 20:10:34,449 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 14915 states and 17555 transitions.
[2020-05-30 20:10:34,581 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 14915 to 14893.
[2020-05-30 20:10:34,581 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 14893 states.
[2020-05-30 20:10:34,606 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 14893 states to 14893 states and 17524 transitions.
[2020-05-30 20:10:34,607 INFO  L751         BuchiCegarLoop]: Abstraction has 14893 states and 17524 transitions.
[2020-05-30 20:10:34,607 INFO  L631         BuchiCegarLoop]: Abstraction has 14893 states and 17524 transitions.
[2020-05-30 20:10:34,607 INFO  L445         BuchiCegarLoop]: ======== Iteration 26============
[2020-05-30 20:10:34,607 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 14893 states and 17524 transitions.
[2020-05-30 20:10:34,624 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 64
[2020-05-30 20:10:34,624 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:10:34,624 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:10:34,625 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:10:34,625 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := 855885808;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume msgsender_MSG == user;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -693742297;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(msgsender_MSG == user);
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]              havoc msgsender_MSG;
[L3542]              havoc msgvalue_MSG;
[L3543]              havoc choice;
[L3544]              havoc initialEPXtokenCount_s286;
[L3545]              havoc remainingEPXtokenCount_s299;
[L3546]              havoc _fundingStartBlock_s391;
[L3547]              havoc _fundingEndBlock_s391;
[L3548]              havoc response_s391;
[L3549]              havoc _amount_s558;
[L3550]              havoc tmpNow;
[L3551]              havoc gas;
[L3552]              assume gas > 4000000 && gas <= 8000000;
[L3553]              tmpNow := now;
[L3554]              havoc now;
[L3555]              assume now > tmpNow;
[L3556]              assume msgsender_MSG != null;
[L3557]              assume DType[msgsender_MSG] != owned;
[L3558]              assume DType[msgsender_MSG] != safeMath;
[L3559]              assume DType[msgsender_MSG] != StandardToken;
[L3560]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]              Alloc[msgsender_MSG] := true;
[L3562]  COND FALSE  !(choice == 7)
[L3571]  COND FALSE  !(choice == 6)
[L3580]  COND FALSE  !(choice == 5)
[L3589]  COND FALSE  !(choice == 4)
[L3598]  COND FALSE  !(choice == 3)
[L3607]  COND FALSE  !(choice == 2)
[L3616]  COND FALSE  !(choice == 1)
[L3644]  RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:10:34,630 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:10:34,631 INFO  L82        PathProgramCache]: Analyzing trace with hash 851189684, now seen corresponding path program 1 times
[2020-05-30 20:10:34,631 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:10:34,664 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:10:35,077 INFO  L134       CoverageAnalysis]: Checked inductivity of 642 backedges. 11 proven. 208 refuted. 0 times theorem prover too weak. 423 trivial. 0 not checked.
[2020-05-30 20:10:35,078 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:10:35,078 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [21] total 21
[2020-05-30 20:10:35,078 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:10:35,078 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 21 interpolants.
[2020-05-30 20:10:35,079 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=61, Invalid=359, Unknown=0, NotChecked=0, Total=420
[2020-05-30 20:10:35,079 INFO  L87              Difference]: Start difference. First operand 14893 states and 17524 transitions. cyclomatic complexity: 2679 Second operand 21 states.
[2020-05-30 20:10:37,867 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:10:37,868 INFO  L93              Difference]: Finished difference Result 14971 states and 17744 transitions.
[2020-05-30 20:10:37,868 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-05-30 20:10:37,868 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 14971 states and 17744 transitions.
[2020-05-30 20:10:37,905 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 64
[2020-05-30 20:10:37,951 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 14971 states to 14892 states and 17640 transitions.
[2020-05-30 20:10:37,951 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2736
[2020-05-30 20:10:37,953 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2736
[2020-05-30 20:10:37,953 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 14892 states and 17640 transitions.
[2020-05-30 20:10:37,963 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:10:37,963 INFO  L728         BuchiCegarLoop]: Abstraction has 14892 states and 17640 transitions.
[2020-05-30 20:10:37,968 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 14892 states and 17640 transitions.
[2020-05-30 20:10:38,051 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 14892 to 14856.
[2020-05-30 20:10:38,052 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 14856 states.
[2020-05-30 20:10:38,077 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 14856 states to 14856 states and 17573 transitions.
[2020-05-30 20:10:38,077 INFO  L751         BuchiCegarLoop]: Abstraction has 14856 states and 17573 transitions.
[2020-05-30 20:10:38,077 INFO  L631         BuchiCegarLoop]: Abstraction has 14856 states and 17573 transitions.
[2020-05-30 20:10:38,077 INFO  L445         BuchiCegarLoop]: ======== Iteration 27============
[2020-05-30 20:10:38,077 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 14856 states and 17573 transitions.
[2020-05-30 20:10:38,094 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 64
[2020-05-30 20:10:38,094 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:10:38,094 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:10:38,096 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:10:38,096 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1845164479;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND TRUE   DType[to] == EPXCrowdsale
[L3111]        CALL        call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L2307]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2308]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2309]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2310]                    gas := gas - 4;
[L2311]        CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L2311]        RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2312]        COND FALSE  !(revert)
[L3111]        RET         call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L3112]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:10:38,101 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:10:38,101 INFO  L82        PathProgramCache]: Analyzing trace with hash -345262304, now seen corresponding path program 3 times
[2020-05-30 20:10:38,102 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:10:38,132 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:10:38,572 INFO  L134       CoverageAnalysis]: Checked inductivity of 698 backedges. 306 proven. 22 refuted. 0 times theorem prover too weak. 370 trivial. 0 not checked.
[2020-05-30 20:10:38,572 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:10:38,572 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-05-30 20:10:38,573 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:10:38,573 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-05-30 20:10:38,573 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=76, Invalid=574, Unknown=0, NotChecked=0, Total=650
[2020-05-30 20:10:38,573 INFO  L87              Difference]: Start difference. First operand 14856 states and 17573 transitions. cyclomatic complexity: 2771 Second operand 26 states.
[2020-05-30 20:10:41,819 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:10:41,819 INFO  L93              Difference]: Finished difference Result 17782 states and 21148 transitions.
[2020-05-30 20:10:41,819 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 30 states. 
[2020-05-30 20:10:41,819 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 17782 states and 21148 transitions.
[2020-05-30 20:10:41,859 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 84
[2020-05-30 20:10:41,915 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 17782 states to 17782 states and 21148 transitions.
[2020-05-30 20:10:41,915 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3446
[2020-05-30 20:10:41,916 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3446
[2020-05-30 20:10:41,916 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 17782 states and 21148 transitions.
[2020-05-30 20:10:41,929 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:10:41,929 INFO  L728         BuchiCegarLoop]: Abstraction has 17782 states and 21148 transitions.
[2020-05-30 20:10:41,935 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 17782 states and 21148 transitions.
[2020-05-30 20:10:42,033 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 17782 to 16648.
[2020-05-30 20:10:42,033 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 16648 states.
[2020-05-30 20:10:42,061 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 16648 states to 16648 states and 19710 transitions.
[2020-05-30 20:10:42,061 INFO  L751         BuchiCegarLoop]: Abstraction has 16648 states and 19710 transitions.
[2020-05-30 20:10:42,061 INFO  L631         BuchiCegarLoop]: Abstraction has 16648 states and 19710 transitions.
[2020-05-30 20:10:42,061 INFO  L445         BuchiCegarLoop]: ======== Iteration 28============
[2020-05-30 20:10:42,061 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 16648 states and 19710 transitions.
[2020-05-30 20:10:42,080 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 72
[2020-05-30 20:10:42,080 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:10:42,080 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:10:42,082 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:10:42,082 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0)
[L2913]                    gas := gas - 876;
[L2914]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2915]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2916]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2917]                    assume now >= 0;
[L2918]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2919-L2921]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0 && now <= fundingEndBlock_EPXCrowdsale[this])
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume msgsender_MSG == user;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -693742297;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -693742297;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:10:42,087 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:10:42,087 INFO  L82        PathProgramCache]: Analyzing trace with hash -656531787, now seen corresponding path program 1 times
[2020-05-30 20:10:42,088 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:10:42,111 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:10:42,466 INFO  L134       CoverageAnalysis]: Checked inductivity of 903 backedges. 38 proven. 145 refuted. 0 times theorem prover too weak. 720 trivial. 0 not checked.
[2020-05-30 20:10:42,466 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:10:42,467 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [14] total 14
[2020-05-30 20:10:42,467 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:10:42,467 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-05-30 20:10:42,467 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=152, Unknown=0, NotChecked=0, Total=182
[2020-05-30 20:10:42,467 INFO  L87              Difference]: Start difference. First operand 16648 states and 19710 transitions. cyclomatic complexity: 3117 Second operand 14 states.
[2020-05-30 20:10:44,820 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:10:44,821 INFO  L93              Difference]: Finished difference Result 16787 states and 19779 transitions.
[2020-05-30 20:10:44,821 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-30 20:10:44,821 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 16787 states and 19779 transitions.
[2020-05-30 20:10:44,866 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 72
[2020-05-30 20:10:44,920 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 16787 states to 16787 states and 19779 transitions.
[2020-05-30 20:10:44,920 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3236
[2020-05-30 20:10:44,922 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3236
[2020-05-30 20:10:44,922 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 16787 states and 19779 transitions.
[2020-05-30 20:10:44,934 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:10:44,934 INFO  L728         BuchiCegarLoop]: Abstraction has 16787 states and 19779 transitions.
[2020-05-30 20:10:44,940 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 16787 states and 19779 transitions.
[2020-05-30 20:10:45,037 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 16787 to 16454.
[2020-05-30 20:10:45,037 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 16454 states.
[2020-05-30 20:10:45,066 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 16454 states to 16454 states and 19404 transitions.
[2020-05-30 20:10:45,066 INFO  L751         BuchiCegarLoop]: Abstraction has 16454 states and 19404 transitions.
[2020-05-30 20:10:45,066 INFO  L631         BuchiCegarLoop]: Abstraction has 16454 states and 19404 transitions.
[2020-05-30 20:10:45,066 INFO  L445         BuchiCegarLoop]: ======== Iteration 29============
[2020-05-30 20:10:45,066 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 16454 states and 19404 transitions.
[2020-05-30 20:10:45,128 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 72
[2020-05-30 20:10:45,128 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:10:45,128 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:10:45,130 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:10:45,130 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume msgsender_MSG == user;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -693742297;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]              havoc msgsender_MSG;
[L3542]              havoc msgvalue_MSG;
[L3543]              havoc choice;
[L3544]              havoc initialEPXtokenCount_s286;
[L3545]              havoc remainingEPXtokenCount_s299;
[L3546]              havoc _fundingStartBlock_s391;
[L3547]              havoc _fundingEndBlock_s391;
[L3548]              havoc response_s391;
[L3549]              havoc _amount_s558;
[L3550]              havoc tmpNow;
[L3551]              havoc gas;
[L3552]              assume gas > 4000000 && gas <= 8000000;
[L3553]              tmpNow := now;
[L3554]              havoc now;
[L3555]              assume now > tmpNow;
[L3556]              assume msgsender_MSG != null;
[L3557]              assume DType[msgsender_MSG] != owned;
[L3558]              assume DType[msgsender_MSG] != safeMath;
[L3559]              assume DType[msgsender_MSG] != StandardToken;
[L3560]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]              Alloc[msgsender_MSG] := true;
[L3562]  COND FALSE  !(choice == 7)
[L3571]  COND FALSE  !(choice == 6)
[L3580]  COND FALSE  !(choice == 5)
[L3589]  COND FALSE  !(choice == 4)
[L3598]  COND FALSE  !(choice == 3)
[L3607]  COND FALSE  !(choice == 2)
[L3616]  COND FALSE  !(choice == 1)
[L3644]  RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:10:45,140 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:10:45,141 INFO  L82        PathProgramCache]: Analyzing trace with hash -1307514787, now seen corresponding path program 1 times
[2020-05-30 20:10:45,141 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:10:45,196 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:10:45,766 INFO  L134       CoverageAnalysis]: Checked inductivity of 698 backedges. 46 proven. 34 refuted. 0 times theorem prover too weak. 618 trivial. 0 not checked.
[2020-05-30 20:10:45,766 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:10:45,766 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [33] total 33
[2020-05-30 20:10:45,767 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:10:45,767 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 34 interpolants.
[2020-05-30 20:10:45,767 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=99, Invalid=1023, Unknown=0, NotChecked=0, Total=1122
[2020-05-30 20:10:45,767 INFO  L87              Difference]: Start difference. First operand 16454 states and 19404 transitions. cyclomatic complexity: 2998 Second operand 34 states.
[2020-05-30 20:10:52,887 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:10:52,888 INFO  L93              Difference]: Finished difference Result 16718 states and 20079 transitions.
[2020-05-30 20:10:52,888 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 49 states. 
[2020-05-30 20:10:52,888 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 16718 states and 20079 transitions.
[2020-05-30 20:10:52,924 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 72
[2020-05-30 20:10:52,976 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 16718 states to 16624 states and 19964 transitions.
[2020-05-30 20:10:52,977 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3121
[2020-05-30 20:10:52,978 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3121
[2020-05-30 20:10:52,978 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 16624 states and 19964 transitions.
[2020-05-30 20:10:52,990 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:10:52,990 INFO  L728         BuchiCegarLoop]: Abstraction has 16624 states and 19964 transitions.
[2020-05-30 20:10:52,995 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 16624 states and 19964 transitions.
[2020-05-30 20:10:53,081 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 16624 to 16497.
[2020-05-30 20:10:53,081 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 16497 states.
[2020-05-30 20:10:53,109 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 16497 states to 16497 states and 19565 transitions.
[2020-05-30 20:10:53,109 INFO  L751         BuchiCegarLoop]: Abstraction has 16497 states and 19565 transitions.
[2020-05-30 20:10:53,109 INFO  L631         BuchiCegarLoop]: Abstraction has 16497 states and 19565 transitions.
[2020-05-30 20:10:53,109 INFO  L445         BuchiCegarLoop]: ======== Iteration 30============
[2020-05-30 20:10:53,109 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 16497 states and 19565 transitions.
[2020-05-30 20:10:53,129 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 72
[2020-05-30 20:10:53,129 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:10:53,129 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:10:53,131 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:10:53,131 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1845164479;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND TRUE   DType[to] == EPXCrowdsale
[L3111]        CALL        call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L2307]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2308]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2309]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2310]                    gas := gas - 4;
[L2311]        CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L2311]        RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2312]        COND FALSE  !(revert)
[L3111]        RET         call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L3112]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:10:53,137 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:10:53,137 INFO  L82        PathProgramCache]: Analyzing trace with hash -284106458, now seen corresponding path program 1 times
[2020-05-30 20:10:53,137 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:10:53,170 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:10:53,444 INFO  L134       CoverageAnalysis]: Checked inductivity of 713 backedges. 287 proven. 17 refuted. 0 times theorem prover too weak. 409 trivial. 0 not checked.
[2020-05-30 20:10:53,444 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:10:53,444 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [32] total 32
[2020-05-30 20:10:53,445 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:10:53,445 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-05-30 20:10:53,445 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=412, Invalid=580, Unknown=0, NotChecked=0, Total=992
[2020-05-30 20:10:53,445 INFO  L87              Difference]: Start difference. First operand 16497 states and 19565 transitions. cyclomatic complexity: 3127 Second operand 32 states.
[2020-05-30 20:10:54,849 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:10:54,849 INFO  L93              Difference]: Finished difference Result 18675 states and 22568 transitions.
[2020-05-30 20:10:54,849 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 59 states. 
[2020-05-30 20:10:54,850 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 18675 states and 22568 transitions.
[2020-05-30 20:10:54,901 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 64
[2020-05-30 20:10:54,946 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 18675 states to 13859 states and 16268 transitions.
[2020-05-30 20:10:54,946 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3148
[2020-05-30 20:10:54,947 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3192
[2020-05-30 20:10:54,947 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 13859 states and 16268 transitions.
[2020-05-30 20:10:54,957 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:10:54,957 INFO  L728         BuchiCegarLoop]: Abstraction has 13859 states and 16268 transitions.
[2020-05-30 20:10:54,962 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 13859 states and 16268 transitions.
[2020-05-30 20:10:55,034 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 13859 to 11536.
[2020-05-30 20:10:55,034 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11536 states.
[2020-05-30 20:10:55,050 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11536 states to 11536 states and 13068 transitions.
[2020-05-30 20:10:55,051 INFO  L751         BuchiCegarLoop]: Abstraction has 11536 states and 13068 transitions.
[2020-05-30 20:10:55,051 INFO  L631         BuchiCegarLoop]: Abstraction has 11536 states and 13068 transitions.
[2020-05-30 20:10:55,051 INFO  L445         BuchiCegarLoop]: ======== Iteration 31============
[2020-05-30 20:10:55,051 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11536 states and 13068 transitions.
[2020-05-30 20:10:55,063 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 32
[2020-05-30 20:10:55,063 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:10:55,063 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:10:55,064 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:10:55,065 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -693742297;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(msgsender_MSG == user);
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:10:55,069 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:10:55,069 INFO  L82        PathProgramCache]: Analyzing trace with hash -600862419, now seen corresponding path program 1 times
[2020-05-30 20:10:55,069 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:10:55,104 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:10:55,527 INFO  L134       CoverageAnalysis]: Checked inductivity of 447 backedges. 15 proven. 64 refuted. 0 times theorem prover too weak. 368 trivial. 0 not checked.
[2020-05-30 20:10:55,527 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:10:55,527 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [21] total 21
[2020-05-30 20:10:55,527 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:10:55,528 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 22 interpolants.
[2020-05-30 20:10:55,528 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=62, Invalid=400, Unknown=0, NotChecked=0, Total=462
[2020-05-30 20:10:55,528 INFO  L87              Difference]: Start difference. First operand 11536 states and 13068 transitions. cyclomatic complexity: 1580 Second operand 22 states.
[2020-05-30 20:10:58,339 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:10:58,339 INFO  L93              Difference]: Finished difference Result 11595 states and 13217 transitions.
[2020-05-30 20:10:58,339 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-05-30 20:10:58,340 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11595 states and 13217 transitions.
[2020-05-30 20:10:58,360 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 32
[2020-05-30 20:10:58,384 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11595 states to 11595 states and 13217 transitions.
[2020-05-30 20:10:58,384 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2310
[2020-05-30 20:10:58,385 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2310
[2020-05-30 20:10:58,385 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11595 states and 13217 transitions.
[2020-05-30 20:10:58,391 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:10:58,391 INFO  L728         BuchiCegarLoop]: Abstraction has 11595 states and 13217 transitions.
[2020-05-30 20:10:58,394 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11595 states and 13217 transitions.
[2020-05-30 20:10:58,446 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11595 to 11557.
[2020-05-30 20:10:58,446 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11557 states.
[2020-05-30 20:10:58,462 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11557 states to 11557 states and 13128 transitions.
[2020-05-30 20:10:58,462 INFO  L751         BuchiCegarLoop]: Abstraction has 11557 states and 13128 transitions.
[2020-05-30 20:10:58,462 INFO  L631         BuchiCegarLoop]: Abstraction has 11557 states and 13128 transitions.
[2020-05-30 20:10:58,462 INFO  L445         BuchiCegarLoop]: ======== Iteration 32============
[2020-05-30 20:10:58,462 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11557 states and 13128 transitions.
[2020-05-30 20:10:58,474 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 32
[2020-05-30 20:10:58,474 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:10:58,474 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:10:58,476 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:10:58,476 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := 855885808;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume msgsender_MSG == user;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -693742297;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(msgsender_MSG == user);
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -693742297;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:10:58,481 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:10:58,481 INFO  L82        PathProgramCache]: Analyzing trace with hash 336953452, now seen corresponding path program 1 times
[2020-05-30 20:10:58,481 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:10:58,546 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:10:59,258 INFO  L134       CoverageAnalysis]: Checked inductivity of 1154 backedges. 57 proven. 105 refuted. 0 times theorem prover too weak. 992 trivial. 0 not checked.
[2020-05-30 20:10:59,258 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:10:59,258 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [33] total 33
[2020-05-30 20:10:59,259 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:10:59,259 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 34 interpolants.
[2020-05-30 20:10:59,259 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=97, Invalid=1025, Unknown=0, NotChecked=0, Total=1122
[2020-05-30 20:10:59,259 INFO  L87              Difference]: Start difference. First operand 11557 states and 13128 transitions. cyclomatic complexity: 1626 Second operand 34 states.
[2020-05-30 20:11:04,880 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:11:04,880 INFO  L93              Difference]: Finished difference Result 8899 states and 10186 transitions.
[2020-05-30 20:11:04,880 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 46 states. 
[2020-05-30 20:11:04,880 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8899 states and 10186 transitions.
[2020-05-30 20:11:04,901 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 16
[2020-05-30 20:11:04,921 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8899 states to 8497 states and 9673 transitions.
[2020-05-30 20:11:04,922 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1137
[2020-05-30 20:11:04,922 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1137
[2020-05-30 20:11:04,922 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8497 states and 9673 transitions.
[2020-05-30 20:11:04,927 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:11:04,927 INFO  L728         BuchiCegarLoop]: Abstraction has 8497 states and 9673 transitions.
[2020-05-30 20:11:04,930 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8497 states and 9673 transitions.
[2020-05-30 20:11:04,967 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8497 to 8490.
[2020-05-30 20:11:04,967 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8490 states.
[2020-05-30 20:11:04,977 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8490 states to 8490 states and 9666 transitions.
[2020-05-30 20:11:04,977 INFO  L751         BuchiCegarLoop]: Abstraction has 8490 states and 9666 transitions.
[2020-05-30 20:11:04,977 INFO  L631         BuchiCegarLoop]: Abstraction has 8490 states and 9666 transitions.
[2020-05-30 20:11:04,977 INFO  L445         BuchiCegarLoop]: ======== Iteration 33============
[2020-05-30 20:11:04,977 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8490 states and 9666 transitions.
[2020-05-30 20:11:04,985 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 16
[2020-05-30 20:11:04,985 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:11:04,985 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:11:04,986 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:11:04,986 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume msgsender_MSG == user;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume msgsender_MSG == user;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -693742297;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:11:04,991 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:11:04,991 INFO  L82        PathProgramCache]: Analyzing trace with hash 1296026828, now seen corresponding path program 2 times
[2020-05-30 20:11:04,991 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:11:05,042 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:11:05,959 INFO  L134       CoverageAnalysis]: Checked inductivity of 699 backedges. 218 proven. 115 refuted. 0 times theorem prover too weak. 366 trivial. 0 not checked.
[2020-05-30 20:11:05,959 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:11:05,959 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [48] total 48
[2020-05-30 20:11:05,960 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:11:05,960 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 49 interpolants.
[2020-05-30 20:11:05,961 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=133, Invalid=2219, Unknown=0, NotChecked=0, Total=2352
[2020-05-30 20:11:05,961 INFO  L87              Difference]: Start difference. First operand 8490 states and 9666 transitions. cyclomatic complexity: 1226 Second operand 49 states.
[2020-05-30 20:11:18,336 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:11:18,336 INFO  L93              Difference]: Finished difference Result 8538 states and 9757 transitions.
[2020-05-30 20:11:18,337 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 57 states. 
[2020-05-30 20:11:18,337 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8538 states and 9757 transitions.
[2020-05-30 20:11:18,353 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 16
[2020-05-30 20:11:18,370 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8538 states to 8530 states and 9734 transitions.
[2020-05-30 20:11:18,370 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1153
[2020-05-30 20:11:18,371 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1153
[2020-05-30 20:11:18,371 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8530 states and 9734 transitions.
[2020-05-30 20:11:18,375 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:11:18,375 INFO  L728         BuchiCegarLoop]: Abstraction has 8530 states and 9734 transitions.
[2020-05-30 20:11:18,377 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8530 states and 9734 transitions.
[2020-05-30 20:11:18,414 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8530 to 8500.
[2020-05-30 20:11:18,415 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8500 states.
[2020-05-30 20:11:18,425 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8500 states to 8500 states and 9700 transitions.
[2020-05-30 20:11:18,425 INFO  L751         BuchiCegarLoop]: Abstraction has 8500 states and 9700 transitions.
[2020-05-30 20:11:18,425 INFO  L631         BuchiCegarLoop]: Abstraction has 8500 states and 9700 transitions.
[2020-05-30 20:11:18,425 INFO  L445         BuchiCegarLoop]: ======== Iteration 34============
[2020-05-30 20:11:18,425 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8500 states and 9700 transitions.
[2020-05-30 20:11:18,432 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 16
[2020-05-30 20:11:18,432 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:11:18,432 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:11:18,434 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:11:18,434 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume msgsender_MSG == user;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume msgsender_MSG == user;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -693742297;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:11:18,438 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:11:18,439 INFO  L82        PathProgramCache]: Analyzing trace with hash -2039700393, now seen corresponding path program 1 times
[2020-05-30 20:11:18,439 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:11:18,462 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:11:18,747 INFO  L134       CoverageAnalysis]: Checked inductivity of 888 backedges. 14 proven. 218 refuted. 0 times theorem prover too weak. 656 trivial. 0 not checked.
[2020-05-30 20:11:18,748 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:11:18,748 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-05-30 20:11:18,748 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:11:18,748 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-30 20:11:18,748 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-05-30 20:11:18,748 INFO  L87              Difference]: Start difference. First operand 8500 states and 9700 transitions. cyclomatic complexity: 1255 Second operand 10 states.
[2020-05-30 20:11:19,639 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:11:19,639 INFO  L93              Difference]: Finished difference Result 8559 states and 9714 transitions.
[2020-05-30 20:11:19,639 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-05-30 20:11:19,640 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8559 states and 9714 transitions.
[2020-05-30 20:11:19,655 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 16
[2020-05-30 20:11:19,672 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8559 states to 8313 states and 9446 transitions.
[2020-05-30 20:11:19,672 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1154
[2020-05-30 20:11:19,672 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1154
[2020-05-30 20:11:19,673 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8313 states and 9446 transitions.
[2020-05-30 20:11:19,677 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:11:19,677 INFO  L728         BuchiCegarLoop]: Abstraction has 8313 states and 9446 transitions.
[2020-05-30 20:11:19,679 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8313 states and 9446 transitions.
[2020-05-30 20:11:19,714 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8313 to 8268.
[2020-05-30 20:11:19,715 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8268 states.
[2020-05-30 20:11:19,724 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8268 states to 8268 states and 9379 transitions.
[2020-05-30 20:11:19,724 INFO  L751         BuchiCegarLoop]: Abstraction has 8268 states and 9379 transitions.
[2020-05-30 20:11:19,724 INFO  L631         BuchiCegarLoop]: Abstraction has 8268 states and 9379 transitions.
[2020-05-30 20:11:19,724 INFO  L445         BuchiCegarLoop]: ======== Iteration 35============
[2020-05-30 20:11:19,724 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8268 states and 9379 transitions.
[2020-05-30 20:11:19,731 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 16
[2020-05-30 20:11:19,731 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:11:19,732 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:11:19,733 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:11:19,733 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume msgsender_MSG == user;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume msgsender_MSG == user;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -693742297;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -693742297;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:11:19,738 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:11:19,738 INFO  L82        PathProgramCache]: Analyzing trace with hash -1336112764, now seen corresponding path program 2 times
[2020-05-30 20:11:19,738 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:11:19,796 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:11:20,560 INFO  L134       CoverageAnalysis]: Checked inductivity of 1471 backedges. 119 proven. 112 refuted. 0 times theorem prover too weak. 1240 trivial. 0 not checked.
[2020-05-30 20:11:20,560 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:11:20,560 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [41] total 41
[2020-05-30 20:11:20,561 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:11:20,561 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 42 interpolants.
[2020-05-30 20:11:20,561 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=109, Invalid=1613, Unknown=0, NotChecked=0, Total=1722
[2020-05-30 20:11:20,561 INFO  L87              Difference]: Start difference. First operand 8268 states and 9379 transitions. cyclomatic complexity: 1158 Second operand 42 states.
[2020-05-30 20:11:29,217 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:11:29,217 INFO  L93              Difference]: Finished difference Result 8283 states and 9402 transitions.
[2020-05-30 20:11:29,218 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 41 states. 
[2020-05-30 20:11:29,218 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8283 states and 9402 transitions.
[2020-05-30 20:11:29,235 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 16
[2020-05-30 20:11:29,251 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8283 states to 8275 states and 9379 transitions.
[2020-05-30 20:11:29,251 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1137
[2020-05-30 20:11:29,251 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1137
[2020-05-30 20:11:29,252 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8275 states and 9379 transitions.
[2020-05-30 20:11:29,256 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:11:29,256 INFO  L728         BuchiCegarLoop]: Abstraction has 8275 states and 9379 transitions.
[2020-05-30 20:11:29,258 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8275 states and 9379 transitions.
[2020-05-30 20:11:29,293 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8275 to 8240.
[2020-05-30 20:11:29,293 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8240 states.
[2020-05-30 20:11:29,303 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8240 states to 8240 states and 9285 transitions.
[2020-05-30 20:11:29,303 INFO  L751         BuchiCegarLoop]: Abstraction has 8240 states and 9285 transitions.
[2020-05-30 20:11:29,303 INFO  L631         BuchiCegarLoop]: Abstraction has 8240 states and 9285 transitions.
[2020-05-30 20:11:29,303 INFO  L445         BuchiCegarLoop]: ======== Iteration 36============
[2020-05-30 20:11:29,303 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8240 states and 9285 transitions.
[2020-05-30 20:11:29,310 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 16
[2020-05-30 20:11:29,310 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:11:29,310 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:11:29,312 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:11:29,312 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume msgsender_MSG == user;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -693742297;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(msgsender_MSG == user);
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:11:29,317 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:11:29,317 INFO  L82        PathProgramCache]: Analyzing trace with hash -1562901236, now seen corresponding path program 1 times
[2020-05-30 20:11:29,318 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:11:29,450 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:11:30,390 INFO  L134       CoverageAnalysis]: Checked inductivity of 1731 backedges. 87 proven. 125 refuted. 0 times theorem prover too weak. 1519 trivial. 0 not checked.
[2020-05-30 20:11:30,391 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:11:30,391 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [34] total 34
[2020-05-30 20:11:30,391 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:11:30,392 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 35 interpolants.
[2020-05-30 20:11:30,392 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=103, Invalid=1087, Unknown=0, NotChecked=0, Total=1190
[2020-05-30 20:11:30,392 INFO  L87              Difference]: Start difference. First operand 8240 states and 9285 transitions. cyclomatic complexity: 1081 Second operand 35 states.
[2020-05-30 20:11:36,248 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:11:36,249 INFO  L93              Difference]: Finished difference Result 8283 states and 9399 transitions.
[2020-05-30 20:11:36,249 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 39 states. 
[2020-05-30 20:11:36,249 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8283 states and 9399 transitions.
[2020-05-30 20:11:36,267 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 16
[2020-05-30 20:11:36,286 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8283 states to 8267 states and 9354 transitions.
[2020-05-30 20:11:36,286 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1137
[2020-05-30 20:11:36,286 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1137
[2020-05-30 20:11:36,286 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8267 states and 9354 transitions.
[2020-05-30 20:11:36,290 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:11:36,290 INFO  L728         BuchiCegarLoop]: Abstraction has 8267 states and 9354 transitions.
[2020-05-30 20:11:36,293 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8267 states and 9354 transitions.
[2020-05-30 20:11:36,327 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8267 to 8250.
[2020-05-30 20:11:36,327 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8250 states.
[2020-05-30 20:11:36,336 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8250 states to 8250 states and 9316 transitions.
[2020-05-30 20:11:36,337 INFO  L751         BuchiCegarLoop]: Abstraction has 8250 states and 9316 transitions.
[2020-05-30 20:11:36,337 INFO  L631         BuchiCegarLoop]: Abstraction has 8250 states and 9316 transitions.
[2020-05-30 20:11:36,337 INFO  L445         BuchiCegarLoop]: ======== Iteration 37============
[2020-05-30 20:11:36,337 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8250 states and 9316 transitions.
[2020-05-30 20:11:36,344 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 16
[2020-05-30 20:11:36,344 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:11:36,344 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:11:36,346 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:11:36,346 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := 855885808;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume !(msgsender_MSG == user);
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume msgsender_MSG == user;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       assume msgsender_MSG == user;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -693742297;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(msgsender_MSG == user);
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_buy_EPXCrowdsale_2_0);
[L7]                       revert := revert_hold;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume msgsender_MSG == user;
[L7]                       success_refund_EPXCrowdsale0 := true;
[L7]                       success_refund_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:11:36,351 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:11:36,351 INFO  L82        PathProgramCache]: Analyzing trace with hash -788080523, now seen corresponding path program 2 times
[2020-05-30 20:11:36,352 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:11:36,438 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:11:37,513 INFO  L134       CoverageAnalysis]: Checked inductivity of 1987 backedges. 130 proven. 185 refuted. 0 times theorem prover too weak. 1672 trivial. 0 not checked.
[2020-05-30 20:11:37,513 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:11:37,513 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [44] total 44
[2020-05-30 20:11:37,513 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:11:37,514 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 45 interpolants.
[2020-05-30 20:11:37,514 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=127, Invalid=1853, Unknown=0, NotChecked=0, Total=1980
[2020-05-30 20:11:37,514 INFO  L87              Difference]: Start difference. First operand 8250 states and 9316 transitions. cyclomatic complexity: 1107 Second operand 45 states.
[2020-05-30 20:11:42,689 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:11:42,689 INFO  L93              Difference]: Finished difference Result 5558 states and 6288 transitions.
[2020-05-30 20:11:42,689 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 42 states. 
[2020-05-30 20:11:42,689 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5558 states and 6288 transitions.
[2020-05-30 20:11:42,701 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-05-30 20:11:42,701 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5558 states to 0 states and 0 transitions.
[2020-05-30 20:11:42,701 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-05-30 20:11:42,701 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-05-30 20:11:42,701 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-05-30 20:11:42,701 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:11:42,701 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-30 20:11:42,701 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-30 20:11:42,701 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-30 20:11:42,701 INFO  L445         BuchiCegarLoop]: ======== Iteration 38============
[2020-05-30 20:11:42,702 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-05-30 20:11:42,702 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-05-30 20:11:42,702 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-05-30 20:11:42,705 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 30.05 08:11:42 BasicIcfg
[2020-05-30 20:11:42,706 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-05-30 20:11:42,706 INFO  L168              Benchmark]: Toolchain (without parser) took 104806.15 ms. Allocated memory was 514.9 MB in the beginning and 4.0 GB in the end (delta: 3.5 GB). Free memory was 457.5 MB in the beginning and 2.2 GB in the end (delta: -1.8 GB). Peak memory consumption was 1.7 GB. Max. memory is 15.3 GB.
[2020-05-30 20:11:42,707 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.12 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-05-30 20:11:42,707 INFO  L168              Benchmark]: Boogie Preprocessor took 73.41 ms. Allocated memory is still 514.9 MB. Free memory was 457.5 MB in the beginning and 449.4 MB in the end (delta: 8.1 MB). Peak memory consumption was 8.1 MB. Max. memory is 15.3 GB.
[2020-05-30 20:11:42,708 INFO  L168              Benchmark]: UtopiaSpecLang took 44.38 ms. Allocated memory is still 514.9 MB. Free memory was 449.4 MB in the beginning and 444.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-05-30 20:11:42,708 INFO  L168              Benchmark]: Boogie Printer took 13.48 ms. Allocated memory is still 514.9 MB. Free memory was 444.0 MB in the beginning and 442.6 MB in the end (delta: 1.4 MB). Peak memory consumption was 1.4 MB. Max. memory is 15.3 GB.
[2020-05-30 20:11:42,708 INFO  L168              Benchmark]: RCFGBuilder took 576.93 ms. Allocated memory is still 514.9 MB. Free memory was 442.6 MB in the beginning and 467.1 MB in the end (delta: -24.5 MB). Peak memory consumption was 100.0 MB. Max. memory is 15.3 GB.
[2020-05-30 20:11:42,709 INFO  L168              Benchmark]: UtopiaLTL2Aut took 44.03 ms. Allocated memory is still 514.9 MB. Free memory was 467.1 MB in the beginning and 463.1 MB in the end (delta: 4.0 MB). Peak memory consumption was 4.0 MB. Max. memory is 15.3 GB.
[2020-05-30 20:11:42,709 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1253.39 ms. Allocated memory was 514.9 MB in the beginning and 582.5 MB in the end (delta: 67.6 MB). Free memory was 463.1 MB in the beginning and 465.3 MB in the end (delta: -2.2 MB). Peak memory consumption was 228.9 MB. Max. memory is 15.3 GB.
[2020-05-30 20:11:42,709 INFO  L168              Benchmark]: BlockEncodingV2 took 117.75 ms. Allocated memory is still 582.5 MB. Free memory was 465.3 MB in the beginning and 423.9 MB in the end (delta: 41.4 MB). Peak memory consumption was 41.4 MB. Max. memory is 15.3 GB.
[2020-05-30 20:11:42,710 INFO  L168              Benchmark]: BuchiAutomizer took 102678.96 ms. Allocated memory was 582.5 MB in the beginning and 4.0 GB in the end (delta: 3.4 GB). Free memory was 423.9 MB in the beginning and 2.2 GB in the end (delta: -1.8 GB). Peak memory consumption was 1.6 GB. Max. memory is 15.3 GB.
[2020-05-30 20:11:42,714 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    3851 locations, 6476 edges
  - StatisticsResult: Encoded RCFG
    3777 locations, 6273 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.12 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 73.41 ms. Allocated memory is still 514.9 MB. Free memory was 457.5 MB in the beginning and 449.4 MB in the end (delta: 8.1 MB). Peak memory consumption was 8.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 44.38 ms. Allocated memory is still 514.9 MB. Free memory was 449.4 MB in the beginning and 444.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 13.48 ms. Allocated memory is still 514.9 MB. Free memory was 444.0 MB in the beginning and 442.6 MB in the end (delta: 1.4 MB). Peak memory consumption was 1.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 576.93 ms. Allocated memory is still 514.9 MB. Free memory was 442.6 MB in the beginning and 467.1 MB in the end (delta: -24.5 MB). Peak memory consumption was 100.0 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 44.03 ms. Allocated memory is still 514.9 MB. Free memory was 467.1 MB in the beginning and 463.1 MB in the end (delta: 4.0 MB). Peak memory consumption was 4.0 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1253.39 ms. Allocated memory was 514.9 MB in the beginning and 582.5 MB in the end (delta: 67.6 MB). Free memory was 463.1 MB in the beginning and 465.3 MB in the end (delta: -2.2 MB). Peak memory consumption was 228.9 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 117.75 ms. Allocated memory is still 582.5 MB. Free memory was 465.3 MB in the beginning and 423.9 MB in the end (delta: 41.4 MB). Peak memory consumption was 41.4 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 102678.96 ms. Allocated memory was 582.5 MB in the beginning and 4.0 GB in the end (delta: 3.4 GB). Free memory was 423.9 MB in the beginning and 2.2 GB in the end (delta: -1.8 GB). Peak memory consumption was 1.6 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1683 locations, 2067 edges
  - StatisticsResult: BuchiProgram size
    3851 locations, 6476 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 37 terminating modules (37 trivial, 0 deterministic, 0 nondeterministic). 37 modules have a trivial ranking function, the largest among these consists of 49 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 102.6s and 38 iterations.  TraceHistogramMax:12. Analysis of lassos took 12.0s. Construction of modules took 65.0s. BÃ¼chi inclusion checks took 21.2s. Highest rank in rank-based complementation 0. Minimization of det autom 37. Minimization of nondet autom 0. Automata minimization 2.0s AutomataMinimizationTime, 36 MinimizatonAttempts, 6516 StatesRemovedByMinimization, 29 NontrivialMinimizations. Non-live state removal took 1.3s Buchi closure took 0.0s. Biggest automaton had 16648 states and ocurred in iteration 27.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 118639 SDtfs, 285957 SDslu, 273482 SDs, 0 SdLazy, 939738 SolverSat, 33721 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 65.0s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU37 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ( <>(success_refund_EPXCrowdsale0) )&& ! ( ( <>(success_send__success0) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
