This is Ultimate 0.1.24-9993c5c-m
[2020-05-30 19:59:46,725 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-05-30 19:59:46,726 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-05-30 19:59:46,737 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-05-30 19:59:46,737 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-05-30 19:59:46,738 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-05-30 19:59:46,739 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-05-30 19:59:46,741 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-05-30 19:59:46,743 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-05-30 19:59:46,744 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-05-30 19:59:46,745 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-05-30 19:59:46,745 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-05-30 19:59:46,746 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-05-30 19:59:46,748 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-05-30 19:59:46,749 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-05-30 19:59:46,750 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-05-30 19:59:46,751 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-05-30 19:59:46,753 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-05-30 19:59:46,754 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-05-30 19:59:46,755 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-05-30 19:59:46,756 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-05-30 19:59:46,757 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-05-30 19:59:46,759 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-05-30 19:59:46,759 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-05-30 19:59:46,759 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-05-30 19:59:46,760 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-05-30 19:59:46,760 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-05-30 19:59:46,762 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-05-30 19:59:46,762 INFO  L174        SettingsManager]: Resetting UtopiaLiveness preferences to default values
[2020-05-30 19:59:46,762 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-05-30 19:59:46,762 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-05-30 19:59:46,763 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-05-30 19:59:46,764 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-05-30 19:59:46,765 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-05-30 19:59:46,766 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-05-30 19:59:46,767 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-05-30 19:59:46,768 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-05-30 19:59:46,769 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-05-30 19:59:46,769 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-05-30 19:59:46,769 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-05-30 19:59:46,770 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-05-30 19:59:46,771 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-05-30 19:59:46,771 INFO  L98         SettingsManager]: Beginning loading settings from /Users/jon/Documents/Research/masterUltimate/SmartPulse/settings.epf
[2020-05-30 19:59:46,782 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-05-30 19:59:46,812 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-05-30 19:59:46,813 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-05-30 19:59:46,813 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-05-30 19:59:46,814 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/Users/jon/Documents/Research/devUltimate/ltl2ba
[2020-05-30 19:59:46,814 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-05-30 19:59:46,814 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-05-30 19:59:46,814 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-05-30 19:59:46,814 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-05-30 19:59:46,814 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-05-30 19:59:46,814 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-05-30 19:59:46,814 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-05-30 19:59:46,814 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-05-30 19:59:46,814 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-05-30 19:59:46,815 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-05-30 19:59:46,815 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-05-30 19:59:46,815 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-05-30 19:59:46,815 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-05-30 19:59:46,815 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-05-30 19:59:46,815 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-05-30 19:59:46,815 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-05-30 19:59:46,815 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-05-30 19:59:46,815 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-05-30 19:59:46,815 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-05-30 19:59:46,815 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-05-30 19:59:46,815 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-05-30 19:59:46,835 INFO  L81    nceAwareModelManager]: Repository-Root is: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T
[2020-05-30 19:59:46,845 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-05-30 19:59:46,847 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-05-30 19:59:46,848 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-05-30 19:59:46,848 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-05-30 19:59:46,849 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/EPXCrowdsale/no-callback/L2-EPXCrowdsale.bpl
[2020-05-30 19:59:46,849 INFO  L111           BoogieParser]: Parsing: '/Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/EPXCrowdsale/no-callback/L2-EPXCrowdsale.bpl'
[2020-05-30 19:59:46,906 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-05-30 19:59:46,908 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-05-30 19:59:46,908 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-05-30 19:59:46,908 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-05-30 19:59:46,908 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-05-30 19:59:46,921 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 07:59:46" (1/1) ...
[2020-05-30 19:59:46,922 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 07:59:46" (1/1) ...
[2020-05-30 19:59:46,946 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 07:59:46" (1/1) ...
[2020-05-30 19:59:46,946 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 07:59:46" (1/1) ...
[2020-05-30 19:59:46,960 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 07:59:46" (1/1) ...
[2020-05-30 19:59:46,967 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 07:59:46" (1/1) ...
[2020-05-30 19:59:46,973 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 07:59:46" (1/1) ...
[2020-05-30 19:59:46,980 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-05-30 19:59:46,980 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-05-30 19:59:46,981 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-05-30 19:59:46,982 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-05-30 19:59:46,985 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 07:59:46" (1/1) ...
[2020-05-30 19:59:47,000 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: <>(finished(*, (areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum(EPXCrowdsale.buy, 2) == fsum(send(from, to, amt), 2, to == ben))))
[2020-05-30 19:59:47,005 INFO  L979   opiaSpecLangObserver]: Successfully lexed: <>(finished(*, (areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum(EPXCrowdsale.buy, 2) == fsum(send(from, to, amt), 2, to == ben))))
[2020-05-30 19:59:47,012 INFO  L981   opiaSpecLangObserver]: Successfully parsed: <>(finished(*, (areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum(EPXCrowdsale.buy, 2) == fsum(send(from, to, amt), 2, to == ben))))
[2020-05-30 19:59:47,015 INFO  L599   opiaSpecLangObserver]: Parsed to==ben to BinaryExpression[COMPEQ,IdentifierExpression[to,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[ben,GLOBAL]]
[2020-05-30 19:59:47,017 INFO  L599   opiaSpecLangObserver]: Parsed (( areFundsReleasedToBeneficiary_EPXCrowdsale[this]==true && fsum_buy_EPXCrowdsale_2_0==fsum_send__success_2_0 )) && !revert to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[areFundsReleasedToBeneficiary_EPXCrowdsale,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,CorralChoice_EPXCrowdsale>]]],BooleanLiteral[true]],BinaryExpression[COMPEQ,IdentifierExpression[fsum_buy_EPXCrowdsale_2_0,GLOBAL],IdentifierExpression[fsum_send__success_2_0,GLOBAL]]],UnaryExpression[LOGICNEG,IdentifierExpression[revert,GLOBAL]]]
[2020-05-30 19:59:47,017 INFO  L968   opiaSpecLangObserver]: Compiling: <>(finished(*, (areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum(EPXCrowdsale.buy, 2) == fsum(send(from, to, amt), 2, to == ben))))
[2020-05-30 19:59:47,018 INFO  L970   opiaSpecLangObserver]: Compiled to ( <>AP(success_CorralChoice_EPXCrowdsale0) )
[2020-05-30 19:59:47,018 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(*, areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true) ==> <>(finished(EPXCrowdsale.beneficiaryMultiSigWithdraw(amt), amt == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]))) && <>(finished(*, areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true))
[2020-05-30 19:59:47,018 INFO  L979   opiaSpecLangObserver]: Successfully lexed: [](started(*, areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true) ==> <>(finished(EPXCrowdsale.beneficiaryMultiSigWithdraw(amt), amt == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]))) && <>(finished(*, areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true))
[2020-05-30 19:59:47,019 INFO  L981   opiaSpecLangObserver]: Successfully parsed: [](started(*, areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true) ==> <>(finished(EPXCrowdsale.beneficiaryMultiSigWithdraw(amt), amt == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]))) && <>(finished(*, areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true))
[2020-05-30 19:59:47,020 INFO  L599   opiaSpecLangObserver]: Parsed ( _amount_s558==( old(Balance[this]) ) && ben==beneficiaryWallet_EPXCrowdsale[this] ) to BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[_amount_s558,<IMPLEMENTATION_INPARAM,beneficiaryMultiSigWithdraw_EPXCrowdsale>],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[Balance,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,beneficiaryMultiSigWithdraw_EPXCrowdsale>]]]]],BinaryExpression[COMPEQ,IdentifierExpression[ben,GLOBAL],ArrayAccessExpression[IdentifierExpression[beneficiaryWallet_EPXCrowdsale,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,beneficiaryMultiSigWithdraw_EPXCrowdsale>]]]]]
[2020-05-30 19:59:47,022 INFO  L599   opiaSpecLangObserver]: Parsed areFundsReleasedToBeneficiary_EPXCrowdsale[this]==true to BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[areFundsReleasedToBeneficiary_EPXCrowdsale,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,CorralChoice_EPXCrowdsale>]]],BooleanLiteral[true]]
[2020-05-30 19:59:47,023 INFO  L599   opiaSpecLangObserver]: Parsed (areFundsReleasedToBeneficiary_EPXCrowdsale[this]==true) && !revert to BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[areFundsReleasedToBeneficiary_EPXCrowdsale,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,CorralChoice_EPXCrowdsale>]]],BooleanLiteral[true]],UnaryExpression[LOGICNEG,IdentifierExpression[revert,GLOBAL]]]
[2020-05-30 19:59:47,023 INFO  L968   opiaSpecLangObserver]: Compiling: [](started(*, areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true) ==> <>(finished(EPXCrowdsale.beneficiaryMultiSigWithdraw(amt), amt == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]))) && <>(finished(*, areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true))
[2020-05-30 19:59:47,023 INFO  L970   opiaSpecLangObserver]: Compiled to ( ( []( AP(call_CorralChoice_EPXCrowdsale1) ==> ( <>AP(success_beneficiaryMultiSigWithdraw_EPXCrowdsale0) ) ) ) && ( <>AP(success_CorralChoice_EPXCrowdsale2) ) )
Executed UtopiaSpecLang
[2020-05-30 19:59:47,030 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 07:59:47 PropertyContainer
[2020-05-30 19:59:47,030 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-05-30 19:59:47,030 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-05-30 19:59:47,030 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-05-30 19:59:47,030 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-05-30 19:59:47,031 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 07:59:46" (1/2) ...
[2020-05-30 19:59:47,032 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-30 19:59:47,032 INFO  L120   oogiePrinterObserver]: Writing to file /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-30 19:59:47,043 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 07:59:47" (2/2) ...
[2020-05-30 19:59:47,043 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-05-30 19:59:47,043 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-05-30 19:59:47,044 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-05-30 19:59:47,044 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-05-30 19:59:47,044 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 07:59:46" (1/2) ...
[2020-05-30 19:59:47,087 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-05-30 19:59:47,087 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned_NoBaseCtor__success
[2020-05-30 19:59:47,087 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned
[2020-05-30 19:59:47,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned
[2020-05-30 19:59:47,087 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMath_safeMath_NoBaseCtor__success
[2020-05-30 19:59:47,087 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMath_safeMath
[2020-05-30 19:59:47,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMath_safeMath
[2020-05-30 19:59:47,088 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul_safeMath__success
[2020-05-30 19:59:47,088 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv_safeMath__success
[2020-05-30 19:59:47,088 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub_safeMath__success
[2020-05-30 19:59:47,089 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd_safeMath__success
[2020-05-30 19:59:47,089 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAssert_safeMath__success
[2020-05-30 19:59:47,089 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-05-30 19:59:47,089 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-05-30 19:59:47,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-05-30 19:59:47,089 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf_StandardToken
[2020-05-30 19:59:47,089 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer_StandardToken
[2020-05-30 19:59:47,089 INFO  L130     BoogieDeclarations]: Found specification of procedure EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success
[2020-05-30 19:59:47,089 INFO  L130     BoogieDeclarations]: Found specification of procedure EPXCrowdsale_EPXCrowdsale
[2020-05-30 19:59:47,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure EPXCrowdsale_EPXCrowdsale
[2020-05-30 19:59:47,089 INFO  L130     BoogieDeclarations]: Found specification of procedure initialEPXSupply_EPXCrowdsale
[2020-05-30 19:59:47,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialEPXSupply_EPXCrowdsale
[2020-05-30 19:59:47,090 INFO  L130     BoogieDeclarations]: Found specification of procedure remainingEPXSupply_EPXCrowdsale
[2020-05-30 19:59:47,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure remainingEPXSupply_EPXCrowdsale
[2020-05-30 19:59:47,090 INFO  L130     BoogieDeclarations]: Found specification of procedure SetupCrowdsale_EPXCrowdsale
[2020-05-30 19:59:47,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure SetupCrowdsale_EPXCrowdsale
[2020-05-30 19:59:47,090 INFO  L130     BoogieDeclarations]: Found specification of procedure checkPrice_EPXCrowdsale__success
[2020-05-30 19:59:47,090 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_EPXCrowdsale__success
[2020-05-30 19:59:47,090 INFO  L130     BoogieDeclarations]: Found specification of procedure buy_EPXCrowdsale
[2020-05-30 19:59:47,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure buy_EPXCrowdsale
[2020-05-30 19:59:47,090 INFO  L130     BoogieDeclarations]: Found specification of procedure beneficiaryMultiSigWithdraw_EPXCrowdsale
[2020-05-30 19:59:47,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure beneficiaryMultiSigWithdraw_EPXCrowdsale
[2020-05-30 19:59:47,091 INFO  L130     BoogieDeclarations]: Found specification of procedure checkGoalReached_EPXCrowdsale
[2020-05-30 19:59:47,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure checkGoalReached_EPXCrowdsale
[2020-05-30 19:59:47,091 INFO  L130     BoogieDeclarations]: Found specification of procedure refund_EPXCrowdsale
[2020-05-30 19:59:47,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure refund_EPXCrowdsale
[2020-05-30 19:59:47,091 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-05-30 19:59:47,091 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-05-30 19:59:47,091 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-05-30 19:59:47,091 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-05-30 19:59:47,091 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_owned
[2020-05-30 19:59:47,091 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_owned
[2020-05-30 19:59:47,091 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_safeMath
[2020-05-30 19:59:47,091 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_safeMath
[2020-05-30 19:59:47,091 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-05-30 19:59:47,092 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-05-30 19:59:47,092 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_EPXCrowdsale
[2020-05-30 19:59:47,092 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-05-30 19:59:47,092 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-05-30 19:59:47,092 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned_NoBaseCtor__fail
[2020-05-30 19:59:47,092 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned__success
[2020-05-30 19:59:47,092 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned__fail
[2020-05-30 19:59:47,092 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMath_safeMath_NoBaseCtor__fail
[2020-05-30 19:59:47,092 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMath_safeMath__success
[2020-05-30 19:59:47,092 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMath_safeMath__fail
[2020-05-30 19:59:47,092 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul_safeMath__fail
[2020-05-30 19:59:47,092 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv_safeMath__fail
[2020-05-30 19:59:47,092 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub_safeMath__fail
[2020-05-30 19:59:47,093 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd_safeMath__fail
[2020-05-30 19:59:47,093 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAssert_safeMath__fail
[2020-05-30 19:59:47,093 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-05-30 19:59:47,093 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-05-30 19:59:47,093 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-05-30 19:59:47,093 INFO  L130     BoogieDeclarations]: Found specification of procedure EPXCrowdsale_EPXCrowdsale_NoBaseCtor__fail
[2020-05-30 19:59:47,093 INFO  L130     BoogieDeclarations]: Found specification of procedure EPXCrowdsale_EPXCrowdsale__success
[2020-05-30 19:59:47,093 INFO  L130     BoogieDeclarations]: Found specification of procedure EPXCrowdsale_EPXCrowdsale__fail
[2020-05-30 19:59:47,093 INFO  L130     BoogieDeclarations]: Found specification of procedure initialEPXSupply_EPXCrowdsale__success
[2020-05-30 19:59:47,093 INFO  L130     BoogieDeclarations]: Found specification of procedure initialEPXSupply_EPXCrowdsale__fail
[2020-05-30 19:59:47,093 INFO  L130     BoogieDeclarations]: Found specification of procedure remainingEPXSupply_EPXCrowdsale__success
[2020-05-30 19:59:47,093 INFO  L130     BoogieDeclarations]: Found specification of procedure remainingEPXSupply_EPXCrowdsale__fail
[2020-05-30 19:59:47,094 INFO  L130     BoogieDeclarations]: Found specification of procedure SetupCrowdsale_EPXCrowdsale__success
[2020-05-30 19:59:47,094 INFO  L130     BoogieDeclarations]: Found specification of procedure SetupCrowdsale_EPXCrowdsale__fail
[2020-05-30 19:59:47,094 INFO  L130     BoogieDeclarations]: Found specification of procedure checkPrice_EPXCrowdsale__fail
[2020-05-30 19:59:47,094 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_EPXCrowdsale__fail
[2020-05-30 19:59:47,094 INFO  L130     BoogieDeclarations]: Found specification of procedure buy_EPXCrowdsale__success
[2020-05-30 19:59:47,094 INFO  L130     BoogieDeclarations]: Found specification of procedure buy_EPXCrowdsale__fail
[2020-05-30 19:59:47,094 INFO  L130     BoogieDeclarations]: Found specification of procedure beneficiaryMultiSigWithdraw_EPXCrowdsale__success
[2020-05-30 19:59:47,094 INFO  L130     BoogieDeclarations]: Found specification of procedure beneficiaryMultiSigWithdraw_EPXCrowdsale__fail
[2020-05-30 19:59:47,094 INFO  L130     BoogieDeclarations]: Found specification of procedure checkGoalReached_EPXCrowdsale__success
[2020-05-30 19:59:47,094 INFO  L130     BoogieDeclarations]: Found specification of procedure checkGoalReached_EPXCrowdsale__fail
[2020-05-30 19:59:47,094 INFO  L130     BoogieDeclarations]: Found specification of procedure refund_EPXCrowdsale__success
[2020-05-30 19:59:47,094 INFO  L130     BoogieDeclarations]: Found specification of procedure refund_EPXCrowdsale__fail
[2020-05-30 19:59:47,095 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-05-30 19:59:47,095 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-05-30 19:59:47,095 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-05-30 19:59:47,095 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-05-30 19:59:47,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-05-30 19:59:47,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-05-30 19:59:47,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned_NoBaseCtor__fail
[2020-05-30 19:59:47,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned_NoBaseCtor__success
[2020-05-30 19:59:47,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned__fail
[2020-05-30 19:59:47,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned__success
[2020-05-30 19:59:47,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMath_safeMath_NoBaseCtor__fail
[2020-05-30 19:59:47,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMath_safeMath_NoBaseCtor__success
[2020-05-30 19:59:47,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMath_safeMath__fail
[2020-05-30 19:59:47,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMath_safeMath__success
[2020-05-30 19:59:47,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul_safeMath__fail
[2020-05-30 19:59:47,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul_safeMath__success
[2020-05-30 19:59:47,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv_safeMath__fail
[2020-05-30 19:59:47,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv_safeMath__success
[2020-05-30 19:59:47,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub_safeMath__fail
[2020-05-30 19:59:47,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub_safeMath__success
[2020-05-30 19:59:47,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd_safeMath__fail
[2020-05-30 19:59:47,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd_safeMath__success
[2020-05-30 19:59:47,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAssert_safeMath__fail
[2020-05-30 19:59:47,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAssert_safeMath__success
[2020-05-30 19:59:47,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-05-30 19:59:47,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-05-30 19:59:47,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-05-30 19:59:47,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-05-30 19:59:47,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure EPXCrowdsale_EPXCrowdsale_NoBaseCtor__fail
[2020-05-30 19:59:47,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success
[2020-05-30 19:59:47,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure EPXCrowdsale_EPXCrowdsale__fail
[2020-05-30 19:59:47,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure EPXCrowdsale_EPXCrowdsale__success
[2020-05-30 19:59:47,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialEPXSupply_EPXCrowdsale__fail
[2020-05-30 19:59:47,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialEPXSupply_EPXCrowdsale__success
[2020-05-30 19:59:47,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure remainingEPXSupply_EPXCrowdsale__fail
[2020-05-30 19:59:47,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure remainingEPXSupply_EPXCrowdsale__success
[2020-05-30 19:59:47,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure SetupCrowdsale_EPXCrowdsale__fail
[2020-05-30 19:59:47,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure SetupCrowdsale_EPXCrowdsale__success
[2020-05-30 19:59:47,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure checkPrice_EPXCrowdsale__fail
[2020-05-30 19:59:47,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure checkPrice_EPXCrowdsale__success
[2020-05-30 19:59:47,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_EPXCrowdsale__fail
[2020-05-30 19:59:47,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_EPXCrowdsale__success
[2020-05-30 19:59:47,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure buy_EPXCrowdsale__fail
[2020-05-30 19:59:47,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure buy_EPXCrowdsale__success
[2020-05-30 19:59:47,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure beneficiaryMultiSigWithdraw_EPXCrowdsale__fail
[2020-05-30 19:59:47,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure beneficiaryMultiSigWithdraw_EPXCrowdsale__success
[2020-05-30 19:59:47,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure checkGoalReached_EPXCrowdsale__fail
[2020-05-30 19:59:47,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure checkGoalReached_EPXCrowdsale__success
[2020-05-30 19:59:47,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure refund_EPXCrowdsale__fail
[2020-05-30 19:59:47,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure refund_EPXCrowdsale__success
[2020-05-30 19:59:47,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-05-30 19:59:47,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-05-30 19:59:47,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-05-30 19:59:47,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-05-30 19:59:47,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-05-30 19:59:47,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-05-30 19:59:47,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-05-30 19:59:47,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-05-30 19:59:47,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_owned
[2020-05-30 19:59:47,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_owned
[2020-05-30 19:59:47,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_safeMath
[2020-05-30 19:59:47,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_safeMath
[2020-05-30 19:59:47,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-05-30 19:59:47,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-05-30 19:59:47,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_EPXCrowdsale
[2020-05-30 19:59:47,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-05-30 19:59:47,101 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-05-30 19:59:47,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-05-30 19:59:47,266 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 19:59:47,278 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 19:59:47,305 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 19:59:47,401 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 19:59:47,402 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 19:59:47,402 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 19:59:47,618 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-05-30 19:59:47,619 INFO  L286             CfgBuilder]: Removed 4 assue(true) statements.
[2020-05-30 19:59:47,620 INFO  L202        PluginConnector]: Adding new model L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 07:59:47 BoogieIcfgContainer
[2020-05-30 19:59:47,620 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 07:59:47" (2/2) ...
[2020-05-30 19:59:47,620 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-05-30 19:59:47,621 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@600960a4 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 07:59:47, skipping insertion in model container
[2020-05-30 19:59:47,621 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-05-30 19:59:47,621 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-05-30 19:59:47,621 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-05-30 19:59:47,622 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-05-30 19:59:47,622 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 07:59:46" (1/3) ...
[2020-05-30 19:59:47,622 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@f1d45d4 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 07:59:47, skipping insertion in model container
[2020-05-30 19:59:47,623 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 07:59:47" (2/3) ...
No working directory specified, using /Users/jon/Documents/Research/devUltimate/ltl2ba
Starting monitored process 1 with /Users/jon/Documents/Research/devUltimate/ltl2ba -f  ( ( [] ( a -> ( <>b ) ) ) && ( <>c ) ) && ! ( ( <>d ) )  (exit command is null, workingDir is null)
[2020-05-30 19:59:47,669 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 07:59:47 NWAContainer
[2020-05-30 19:59:47,669 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-05-30 19:59:47,669 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-05-30 19:59:47,669 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-05-30 19:59:47,670 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-05-30 19:59:47,671 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 07:59:47" (3/4) ...
[2020-05-30 19:59:47,671 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@6e806aea and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 07:59:47, skipping insertion in model container
[2020-05-30 19:59:47,672 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 07:59:47" (4/4) ...
[2020-05-30 19:59:47,675 INFO  L104   BuchiProductObserver]: Initial property automaton 6 locations, 20 edges
[2020-05-30 19:59:47,677 INFO  L110   BuchiProductObserver]: Initial RCFG 1699 locations, 2085 edges
[2020-05-30 19:59:47,677 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-05-30 19:59:47,686 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-05-30 19:59:53,812 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-05-30 19:59:53,828 INFO  L110   BuchiProductObserver]: BuchiProgram size 9687 locations, 34449 edges
[2020-05-30 19:59:53,828 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 07:59:53 BoogieIcfgContainer
[2020-05-30 19:59:53,828 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-05-30 19:59:53,828 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-05-30 19:59:53,828 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-05-30 19:59:53,830 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-05-30 19:59:53,830 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 07:59:53" (1/1) ...
[2020-05-30 19:59:54,278 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call EPXCrowdsale_EPXCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,278 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,278 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[2020-05-30 19:59:54,278 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[2020-05-30 19:59:54,278 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[2020-05-30 19:59:54,279 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,279 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call initialEPXtokenCount_s286 := initialEPXSupply_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,279 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[2020-05-30 19:59:54,279 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[2020-05-30 19:59:54,279 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,279 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,279 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[2020-05-30 19:59:54,280 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,280 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[2020-05-30 19:59:54,280 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call CorralChoice_safeMath(this);
[2020-05-30 19:59:54,280 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[2020-05-30 19:59:54,280 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[2020-05-30 19:59:54,281 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,281 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,281 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[2020-05-30 19:59:54,281 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,281 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_5 := safeDiv_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__tokensRemaining_EPXCrowdsale[this], 10000);
[2020-05-30 19:59:54,282 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,282 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 19:59:54,282 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 19:59:54,282 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 19:59:54,282 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 19:59:54,282 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 19:59:54,282 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 19:59:54,282 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 19:59:54,283 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_11 := checkPrice_EPXCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,283 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,283 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 19:59:54,283 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,283 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,283 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,284 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,284 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call remainingEPXtokenCount_s299 := remainingEPXSupply_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,284 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 19:59:54,284 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_2 := FreshRefGenerator__success();
[2020-05-30 19:59:54,284 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,284 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 19:59:54,284 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 19:59:54,284 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 19:59:54,285 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 19:59:54,285 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call remainingEPXtokenCount_s299 := remainingEPXSupply_EPXCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,285 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call refund_EPXCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,285 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_1 := FreshRefGenerator__success();
[2020-05-30 19:59:54,285 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,285 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,285 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call beneficiaryMultiSigWithdraw_EPXCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[2020-05-30 19:59:54,285 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,286 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call initialEPXtokenCount_s286 := initialEPXSupply_EPXCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,286 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call CorralChoice_EPXCrowdsale(this);
[2020-05-30 19:59:54,286 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[2020-05-30 19:59:54,286 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,286 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,286 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call FallbackDispatch__fail(from, to, amount);
[2020-05-30 19:59:54,286 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call FallbackDispatch__fail(from, to, amount);
[2020-05-30 19:59:54,286 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call FallbackDispatch__fail(from, to, amount);
[2020-05-30 19:59:54,287 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call owned_owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,287 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call CorralChoice_StandardToken(this);
[2020-05-30 19:59:54,287 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,287 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call FallbackDispatch__success(from, to, amount);
[2020-05-30 19:59:54,287 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, b_s90 > 0);
[2020-05-30 19:59:54,287 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,287 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,287 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,288 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,288 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, b_s90 > 0);
[2020-05-30 19:59:54,288 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s90 == nonlinearMul(b_s90, c_s89) + nonlinearMod(a_s90, b_s90));
[2020-05-30 19:59:54,288 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,288 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[2020-05-30 19:59:54,288 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,289 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,289 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s90 == nonlinearMul(b_s90, c_s89) + nonlinearMod(a_s90, b_s90));
[2020-05-30 19:59:54,289 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,289 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s90 == nonlinearMul(b_s90, c_s89) + nonlinearMod(a_s90, b_s90));
[2020-05-30 19:59:54,289 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,290 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,290 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,290 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,290 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call buy_EPXCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,290 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Fallback_UnknownType__fail(from, to, amount);
[2020-05-30 19:59:54,290 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call checkGoalReached_EPXCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,290 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_19 := send__fail(this, msgsender_MSG, ethRefund_s797);
[2020-05-30 19:59:54,290 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call buy_EPXCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,291 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_17 := send__fail(this, __tmp__beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[2020-05-30 19:59:54,291 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_9 := safeAdd_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[2020-05-30 19:59:54,291 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,291 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s90 > 0);
[2020-05-30 19:59:54,292 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,292 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call response_s391 := SetupCrowdsale_EPXCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[2020-05-30 19:59:54,292 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_2 := FreshRefGenerator__fail();
[2020-05-30 19:59:54,292 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,292 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_1 := FreshRefGenerator__fail();
[2020-05-30 19:59:54,292 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[2020-05-30 19:59:54,292 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,292 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_15 := safeAdd_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__M_Ref_int_usersEPXfundValue1[__tmp__usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[2020-05-30 19:59:54,292 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s90 > 0);
[2020-05-30 19:59:54,293 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[2020-05-30 19:59:54,293 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s90 == nonlinearMul(b_s90, c_s89) + nonlinearMod(a_s90, b_s90));
[2020-05-30 19:59:54,293 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Fallback_UnknownType__success(from, to, amount);
[2020-05-30 19:59:54,293 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s90 > 0);
[2020-05-30 19:59:54,293 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call remainingEPXtokenCount_s299 := remainingEPXSupply_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,293 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[2020-05-30 19:59:54,294 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s90 == nonlinearMul(b_s90, c_s89) + nonlinearMod(a_s90, b_s90));
[2020-05-30 19:59:54,294 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[2020-05-30 19:59:54,294 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[2020-05-30 19:59:54,294 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[2020-05-30 19:59:54,294 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_3 := safeDiv_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__initialTokenSupply_EPXCrowdsale[this], 10000);
[2020-05-30 19:59:54,294 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[2020-05-30 19:59:54,294 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s90 == nonlinearMul(b_s90, c_s89) + nonlinearMod(a_s90, b_s90));
[2020-05-30 19:59:54,295 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[2020-05-30 19:59:54,295 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[2020-05-30 19:59:54,295 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[2020-05-30 19:59:54,295 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call FallbackMethod_EPXCrowdsale__fail(to, from, amount);
[2020-05-30 19:59:54,295 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[2020-05-30 19:59:54,295 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, b_s90 > 0);
[2020-05-30 19:59:54,296 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,296 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_10 := safeMul_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[2020-05-30 19:59:54,296 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,296 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,296 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,296 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[2020-05-30 19:59:54,297 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[2020-05-30 19:59:54,297 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,297 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,297 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,297 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,297 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[2020-05-30 19:59:54,297 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,298 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,298 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,298 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call owned_owned(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,298 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,298 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[2020-05-30 19:59:54,299 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call initialEPXtokenCount_s286 := initialEPXSupply_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,300 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[2020-05-30 19:59:54,300 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,300 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,301 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_12 := safeSub_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[2020-05-30 19:59:54,302 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call CorralChoice_owned(this);
[2020-05-30 19:59:54,302 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_5 := safeDiv_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], 10000);
[2020-05-30 19:59:54,302 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_3 := safeDiv_safeMath__success(this, msgsender_MSG, msgvalue_MSG, initialTokenSupply_EPXCrowdsale[this], 10000);
[2020-05-30 19:59:54,303 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[2020-05-30 19:59:54,304 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,304 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,304 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,304 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,307 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:59:54,323 INFO  L313           BlockEncoder]: Initial Icfg 9687 locations, 34449 edges
[2020-05-30 19:59:54,323 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-05-30 19:59:54,324 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-05-30 19:59:54,324 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-05-30 19:59:54,324 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-05-30 19:59:54,349 INFO  L70    emoveInfeasibleEdges]: Removed 592 edges and 30 locations because of local infeasibility
[2020-05-30 19:59:54,365 INFO  L70        RemoveSinkStates]: Removed 368 edges and 115 locations by removing sink states
[2020-05-30 19:59:54,393 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-05-30 19:59:54,401 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-05-30 19:59:54,409 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-05-30 19:59:54,410 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-05-30 19:59:54,417 INFO  L313           BlockEncoder]: Encoded RCFG 9502 locations, 33372 edges
[2020-05-30 19:59:54,417 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 30.05 07:59:54 BasicIcfg
[2020-05-30 19:59:54,417 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-05-30 19:59:54,418 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-05-30 19:59:54,418 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-05-30 19:59:54,420 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-05-30 19:59:54,420 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 19:59:54,420 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 07:59:46" (1/6) ...
[2020-05-30 19:59:54,421 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2ee96f45 and model type L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 30.05 07:59:54, skipping insertion in model container
[2020-05-30 19:59:54,421 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 19:59:54,421 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 07:59:47" (2/6) ...
[2020-05-30 19:59:54,421 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2ee96f45 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 30.05 07:59:54, skipping insertion in model container
[2020-05-30 19:59:54,422 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 19:59:54,422 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 07:59:47" (3/6) ...
[2020-05-30 19:59:54,422 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2ee96f45 and model type L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 30.05 07:59:54, skipping insertion in model container
[2020-05-30 19:59:54,422 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 19:59:54,422 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 07:59:47" (4/6) ...
[2020-05-30 19:59:54,422 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2ee96f45 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 30.05 07:59:54, skipping insertion in model container
[2020-05-30 19:59:54,422 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 19:59:54,422 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 07:59:53" (5/6) ...
[2020-05-30 19:59:54,422 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2ee96f45 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 30.05 07:59:54, skipping insertion in model container
[2020-05-30 19:59:54,422 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 19:59:54,423 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 30.05 07:59:54" (6/6) ...
[2020-05-30 19:59:54,423 INFO  L404   chiAutomizerObserver]: Analyzing ICFG L2-EPXCrowdsale.bpl_BEv2
[2020-05-30 19:59:54,453 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-05-30 19:59:54,453 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-05-30 19:59:54,453 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-05-30 19:59:54,453 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-05-30 19:59:54,453 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-05-30 19:59:54,453 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-05-30 19:59:54,453 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-05-30 19:59:54,454 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-05-30 19:59:54,454 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-05-30 19:59:54,529 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9502 states.
[2020-05-30 19:59:54,651 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 19:59:54,651 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:59:54,652 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:59:54,665 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:59:54,665 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:59:54,665 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-05-30 19:59:54,665 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9502 states.
[2020-05-30 19:59:54,733 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 19:59:54,733 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:59:54,733 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:59:54,736 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:59:54,736 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_CorralChoice_EPXCrowdsale2 := false;
[L7]                 success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                 call_CorralChoice_EPXCrowdsale1 := false;
[L7]                 fsum_send__success_2_0 := 0;
[L7]                 fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                 success_CorralChoice_EPXCrowdsale0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L3635]              assume null == 0;
[L3636]  CALL        call this := FreshRefGenerator__success();
[L1098]              havoc newRef;
[L1099]              assume Alloc[newRef] == false;
[L1100]              Alloc[newRef] := true;
[L1101]              assume newRef != null;
[L3636]  RET         call this := FreshRefGenerator__success();
[L3637]              assume now >= 0;
[L3638]              assume DType[this] == EPXCrowdsale;
[L3639]              gas := gas - 53000;
[L3640]  CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]               havoc __exception;
[L342]               revert := false;
[L343]   COND FALSE  !(__exception)
[L376]   CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]              assume msgsender_MSG != null;
[L1119]              Balance[this] := 0;
[L1120]              owner_owned[this] := null;
[L1121]              owner_owned[this] := msgsender_MSG;
[L1139]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]  COND FALSE  !(revert)
[L1891]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]  COND TRUE   revert
[L376]   RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]               assume !revert && gas >= 0;
[L3640]  RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]              assume !revert && gas >= 0;
[L3644]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]              havoc msgsender_MSG;
[L3542]              havoc msgvalue_MSG;
[L3543]              havoc choice;
[L3544]              havoc initialEPXtokenCount_s286;
[L3545]              havoc remainingEPXtokenCount_s299;
[L3546]              havoc _fundingStartBlock_s391;
[L3547]              havoc _fundingEndBlock_s391;
[L3548]              havoc response_s391;
[L3549]              havoc _amount_s558;
[L3550]              havoc tmpNow;
[L3551]              havoc gas;
[L3552]              assume gas > 4000000 && gas <= 8000000;
[L3553]              tmpNow := now;
[L3554]              havoc now;
[L3555]              assume now > tmpNow;
[L3556]              assume msgsender_MSG != null;
[L3557]              assume DType[msgsender_MSG] != owned;
[L3558]              assume DType[msgsender_MSG] != safeMath;
[L3559]              assume DType[msgsender_MSG] != StandardToken;
[L3560]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]              Alloc[msgsender_MSG] := true;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                 revert := revert_hold;
[L3562]  COND TRUE   choice == 7
[L3564]              gas := gas - 21000;
[L3565]  COND FALSE  !(gas >= 0)
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                 revert := revert_hold;
[L3644]  RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]              havoc msgsender_MSG;
[L3542]              havoc msgvalue_MSG;
[L3543]              havoc choice;
[L3544]              havoc initialEPXtokenCount_s286;
[L3545]              havoc remainingEPXtokenCount_s299;
[L3546]              havoc _fundingStartBlock_s391;
[L3547]              havoc _fundingEndBlock_s391;
[L3548]              havoc response_s391;
[L3549]              havoc _amount_s558;
[L3550]              havoc tmpNow;
[L3551]              havoc gas;
[L3552]              assume gas > 4000000 && gas <= 8000000;
[L3553]              tmpNow := now;
[L3554]              havoc now;
[L3555]              assume now > tmpNow;
[L3556]              assume msgsender_MSG != null;
[L3557]              assume DType[msgsender_MSG] != owned;
[L3558]              assume DType[msgsender_MSG] != safeMath;
[L3559]              assume DType[msgsender_MSG] != StandardToken;
[L3560]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]              Alloc[msgsender_MSG] := true;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                 revert := revert_hold;
[L3562]  COND TRUE   choice == 7
[L3564]              gas := gas - 21000;
[L3565]  COND FALSE  !(gas >= 0)
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                 revert := revert_hold;
[L3644]  RET         call CorralChoice_EPXCrowdsale(this);
[L3644]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]              havoc msgsender_MSG;
[L3542]              havoc msgvalue_MSG;
[L3543]              havoc choice;
[L3544]              havoc initialEPXtokenCount_s286;
[L3545]              havoc remainingEPXtokenCount_s299;
[L3546]              havoc _fundingStartBlock_s391;
[L3547]              havoc _fundingEndBlock_s391;
[L3548]              havoc response_s391;
[L3549]              havoc _amount_s558;
[L3550]              havoc tmpNow;
[L3551]              havoc gas;
[L3552]              assume gas > 4000000 && gas <= 8000000;
[L3553]              tmpNow := now;
[L3554]              havoc now;
[L3555]              assume now > tmpNow;
[L3556]              assume msgsender_MSG != null;
[L3557]              assume DType[msgsender_MSG] != owned;
[L3558]              assume DType[msgsender_MSG] != safeMath;
[L3559]              assume DType[msgsender_MSG] != StandardToken;
[L3560]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]              Alloc[msgsender_MSG] := true;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                 call_CorralChoice_EPXCrowdsale1 := true;
[L7]                 call_CorralChoice_EPXCrowdsale1 := false;
[L7]                 revert := revert_hold;
[L3562]  COND TRUE   choice == 7
[L3564]              gas := gas - 21000;
[L3565]  COND FALSE  !(gas >= 0)
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                 revert := revert_hold;
[L3644]  RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:59:54,753 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:59:54,753 INFO  L82        PathProgramCache]: Analyzing trace with hash -391116457, now seen corresponding path program 1 times
[2020-05-30 19:59:54,757 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:59:54,782 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:59:54,836 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-30 19:59:54,838 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 19:59:54,838 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 19:59:55,582 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:59:55,603 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 19:59:55,603 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 19:59:55,605 INFO  L87              Difference]: Start difference. First operand 9502 states. Second operand 3 states.
[2020-05-30 19:59:56,605 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:59:56,606 INFO  L93              Difference]: Finished difference Result 8170 states and 17590 transitions.
[2020-05-30 19:59:56,606 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 19:59:56,607 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8170 states and 17590 transitions.
[2020-05-30 19:59:56,656 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 19:59:56,729 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8170 states to 8170 states and 17590 transitions.
[2020-05-30 19:59:56,730 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 8
[2020-05-30 19:59:56,730 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 10
[2020-05-30 19:59:56,730 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8170 states and 17590 transitions.
[2020-05-30 19:59:56,768 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:59:56,769 INFO  L728         BuchiCegarLoop]: Abstraction has 8170 states and 17590 transitions.
[2020-05-30 19:59:56,798 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8170 states and 17590 transitions.
[2020-05-30 19:59:56,929 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8170 to 8170.
[2020-05-30 19:59:56,930 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8170 states.
[2020-05-30 19:59:56,956 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8170 states to 8170 states and 17590 transitions.
[2020-05-30 19:59:56,957 INFO  L751         BuchiCegarLoop]: Abstraction has 8170 states and 17590 transitions.
[2020-05-30 19:59:56,958 INFO  L631         BuchiCegarLoop]: Abstraction has 8170 states and 17590 transitions.
[2020-05-30 19:59:56,958 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-05-30 19:59:56,958 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8170 states and 17590 transitions.
[2020-05-30 19:59:56,977 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 19:59:56,977 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:59:56,977 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:59:56,979 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:59:56,979 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_CorralChoice_EPXCrowdsale2 := false;
[L7]                 success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                 call_CorralChoice_EPXCrowdsale1 := false;
[L7]                 fsum_send__success_2_0 := 0;
[L7]                 fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                 success_CorralChoice_EPXCrowdsale0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L3635]              assume null == 0;
[L3636]  CALL        call this := FreshRefGenerator__success();
[L1098]              havoc newRef;
[L1099]              assume Alloc[newRef] == false;
[L1100]              Alloc[newRef] := true;
[L1101]              assume newRef != null;
[L3636]  RET         call this := FreshRefGenerator__success();
[L3637]              assume now >= 0;
[L3638]              assume DType[this] == EPXCrowdsale;
[L3639]              gas := gas - 53000;
[L3640]  CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]               havoc __exception;
[L342]               revert := false;
[L343]   COND FALSE  !(__exception)
[L376]   CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]              assume msgsender_MSG != null;
[L1119]              Balance[this] := 0;
[L1120]              owner_owned[this] := null;
[L1121]              owner_owned[this] := msgsender_MSG;
[L1139]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]  COND TRUE   revert
[L1891]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]  COND TRUE   revert
[L376]   RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]               assume !revert && gas >= 0;
[L3640]  RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]              assume !revert && gas >= 0;
[L3644]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]              havoc msgsender_MSG;
[L3542]              havoc msgvalue_MSG;
[L3543]              havoc choice;
[L3544]              havoc initialEPXtokenCount_s286;
[L3545]              havoc remainingEPXtokenCount_s299;
[L3546]              havoc _fundingStartBlock_s391;
[L3547]              havoc _fundingEndBlock_s391;
[L3548]              havoc response_s391;
[L3549]              havoc _amount_s558;
[L3550]              havoc tmpNow;
[L3551]              havoc gas;
[L3552]              assume gas > 4000000 && gas <= 8000000;
[L3553]              tmpNow := now;
[L3554]              havoc now;
[L3555]              assume now > tmpNow;
[L3556]              assume msgsender_MSG != null;
[L3557]              assume DType[msgsender_MSG] != owned;
[L3558]              assume DType[msgsender_MSG] != safeMath;
[L3559]              assume DType[msgsender_MSG] != StandardToken;
[L3560]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]              Alloc[msgsender_MSG] := true;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                 revert := revert_hold;
[L3562]  COND TRUE   choice == 7
[L3564]              gas := gas - 21000;
[L3565]  COND FALSE  !(gas >= 0)
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                 success_CorralChoice_EPXCrowdsale2 := true;
[L7]                 success_CorralChoice_EPXCrowdsale2 := false;
[L7]                 revert := revert_hold;
[L3644]  RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]              havoc msgsender_MSG;
[L3542]              havoc msgvalue_MSG;
[L3543]              havoc choice;
[L3544]              havoc initialEPXtokenCount_s286;
[L3545]              havoc remainingEPXtokenCount_s299;
[L3546]              havoc _fundingStartBlock_s391;
[L3547]              havoc _fundingEndBlock_s391;
[L3548]              havoc response_s391;
[L3549]              havoc _amount_s558;
[L3550]              havoc tmpNow;
[L3551]              havoc gas;
[L3552]              assume gas > 4000000 && gas <= 8000000;
[L3553]              tmpNow := now;
[L3554]              havoc now;
[L3555]              assume now > tmpNow;
[L3556]              assume msgsender_MSG != null;
[L3557]              assume DType[msgsender_MSG] != owned;
[L3558]              assume DType[msgsender_MSG] != safeMath;
[L3559]              assume DType[msgsender_MSG] != StandardToken;
[L3560]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]              Alloc[msgsender_MSG] := true;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                 revert := revert_hold;
[L3562]  COND TRUE   choice == 7
[L3564]              gas := gas - 21000;
[L3565]  COND FALSE  !(gas >= 0)
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                 success_CorralChoice_EPXCrowdsale2 := true;
[L7]                 success_CorralChoice_EPXCrowdsale2 := false;
[L7]                 revert := revert_hold;
[L3644]  RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:59:56,982 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:59:56,982 INFO  L82        PathProgramCache]: Analyzing trace with hash -1099092711, now seen corresponding path program 1 times
[2020-05-30 19:59:56,983 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:59:56,990 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:59:57,005 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-30 19:59:57,005 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 19:59:57,006 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-05-30 19:59:57,007 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:59:57,007 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-05-30 19:59:57,007 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=8, Invalid=12, Unknown=0, NotChecked=0, Total=20
[2020-05-30 19:59:57,007 INFO  L87              Difference]: Start difference. First operand 8170 states and 17590 transitions. cyclomatic complexity: 9423 Second operand 5 states.
[2020-05-30 19:59:59,016 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:59:59,016 INFO  L93              Difference]: Finished difference Result 8168 states and 12507 transitions.
[2020-05-30 19:59:59,016 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-30 19:59:59,017 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8168 states and 12507 transitions.
[2020-05-30 19:59:59,043 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 19:59:59,086 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8168 states to 8168 states and 12507 transitions.
[2020-05-30 19:59:59,086 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 9
[2020-05-30 19:59:59,087 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 9
[2020-05-30 19:59:59,087 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8168 states and 12507 transitions.
[2020-05-30 19:59:59,099 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:59:59,100 INFO  L728         BuchiCegarLoop]: Abstraction has 8168 states and 12507 transitions.
[2020-05-30 19:59:59,113 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8168 states and 12507 transitions.
[2020-05-30 19:59:59,219 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8168 to 8168.
[2020-05-30 19:59:59,219 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8168 states.
[2020-05-30 19:59:59,243 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8168 states to 8168 states and 12507 transitions.
[2020-05-30 19:59:59,244 INFO  L751         BuchiCegarLoop]: Abstraction has 8168 states and 12507 transitions.
[2020-05-30 19:59:59,244 INFO  L631         BuchiCegarLoop]: Abstraction has 8168 states and 12507 transitions.
[2020-05-30 19:59:59,244 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-05-30 19:59:59,244 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8168 states and 12507 transitions.
[2020-05-30 19:59:59,260 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 19:59:59,260 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:59:59,260 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:59:59,261 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:59:59,261 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_CorralChoice_EPXCrowdsale2 := false;
[L7]                 success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                 call_CorralChoice_EPXCrowdsale1 := false;
[L7]                 fsum_send__success_2_0 := 0;
[L7]                 fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                 success_CorralChoice_EPXCrowdsale0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L3635]              assume null == 0;
[L3636]  CALL        call this := FreshRefGenerator__success();
[L1098]              havoc newRef;
[L1099]              assume Alloc[newRef] == false;
[L1100]              Alloc[newRef] := true;
[L1101]              assume newRef != null;
[L3636]  RET         call this := FreshRefGenerator__success();
[L3637]              assume now >= 0;
[L3638]              assume DType[this] == EPXCrowdsale;
[L3639]              gas := gas - 53000;
[L3640]  CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]               havoc __exception;
[L342]               revert := false;
[L343]   COND FALSE  !(__exception)
[L376]   CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]              assume msgsender_MSG != null;
[L1119]              Balance[this] := 0;
[L1120]              owner_owned[this] := null;
[L1121]              owner_owned[this] := msgsender_MSG;
[L1139]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]  COND FALSE  !(revert)
[L1891]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]  COND TRUE   revert
[L376]   RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]               assume !revert && gas >= 0;
[L3640]  RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]              assume !revert && gas >= 0;
[L3644]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]              havoc msgsender_MSG;
[L3542]              havoc msgvalue_MSG;
[L3543]              havoc choice;
[L3544]              havoc initialEPXtokenCount_s286;
[L3545]              havoc remainingEPXtokenCount_s299;
[L3546]              havoc _fundingStartBlock_s391;
[L3547]              havoc _fundingEndBlock_s391;
[L3548]              havoc response_s391;
[L3549]              havoc _amount_s558;
[L3550]              havoc tmpNow;
[L3551]              havoc gas;
[L3552]              assume gas > 4000000 && gas <= 8000000;
[L3553]              tmpNow := now;
[L3554]              havoc now;
[L3555]              assume now > tmpNow;
[L3556]              assume msgsender_MSG != null;
[L3557]              assume DType[msgsender_MSG] != owned;
[L3558]              assume DType[msgsender_MSG] != safeMath;
[L3559]              assume DType[msgsender_MSG] != StandardToken;
[L3560]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]              Alloc[msgsender_MSG] := true;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                 revert := revert_hold;
[L3562]  COND FALSE  !(choice == 7)
[L3571]  COND FALSE  !(choice == 6)
[L3580]  COND FALSE  !(choice == 5)
[L3589]  COND FALSE  !(choice == 4)
[L3598]  COND TRUE   choice == 3
[L3600]              gas := gas - 21000;
[L3601]  COND TRUE   gas >= 0
[L3603]              assume msgvalue_MSG == 0;
[L3604]  CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]               havoc __exception;
[L622]               revert := false;
[L623]   COND FALSE  !(__exception)
[L656]   CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]              gas := gas - 828;
[L3346]  COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]  COND TRUE   revert
[L656]   RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                 success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                 success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                 revert := revert_hold;
[L3604]  RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                 success_CorralChoice_EPXCrowdsale2 := true;
[L7]                 success_CorralChoice_EPXCrowdsale2 := false;
[L7]                 revert := revert_hold;
[L3644]  RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]              havoc msgsender_MSG;
[L3542]              havoc msgvalue_MSG;
[L3543]              havoc choice;
[L3544]              havoc initialEPXtokenCount_s286;
[L3545]              havoc remainingEPXtokenCount_s299;
[L3546]              havoc _fundingStartBlock_s391;
[L3547]              havoc _fundingEndBlock_s391;
[L3548]              havoc response_s391;
[L3549]              havoc _amount_s558;
[L3550]              havoc tmpNow;
[L3551]              havoc gas;
[L3552]              assume gas > 4000000 && gas <= 8000000;
[L3553]              tmpNow := now;
[L3554]              havoc now;
[L3555]              assume now > tmpNow;
[L3556]              assume msgsender_MSG != null;
[L3557]              assume DType[msgsender_MSG] != owned;
[L3558]              assume DType[msgsender_MSG] != safeMath;
[L3559]              assume DType[msgsender_MSG] != StandardToken;
[L3560]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]              Alloc[msgsender_MSG] := true;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                 revert := revert_hold;
[L3562]  COND TRUE   choice == 7
[L3564]              gas := gas - 21000;
[L3565]  COND FALSE  !(gas >= 0)
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                 success_CorralChoice_EPXCrowdsale2 := true;
[L7]                 success_CorralChoice_EPXCrowdsale2 := false;
[L7]                 revert := revert_hold;
[L3644]  RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:59:59,264 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:59:59,264 INFO  L82        PathProgramCache]: Analyzing trace with hash 830824693, now seen corresponding path program 1 times
[2020-05-30 19:59:59,265 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:59:59,279 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:59:59,309 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-30 19:59:59,309 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 19:59:59,310 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 19:59:59,310 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:59:59,310 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 19:59:59,310 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 19:59:59,310 INFO  L87              Difference]: Start difference. First operand 8168 states and 12507 transitions. cyclomatic complexity: 4342 Second operand 3 states.
[2020-05-30 19:59:59,655 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:59:59,655 INFO  L93              Difference]: Finished difference Result 9608 states and 14571 transitions.
[2020-05-30 19:59:59,655 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 19:59:59,655 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9608 states and 14571 transitions.
[2020-05-30 19:59:59,678 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 19:59:59,720 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9608 states to 9608 states and 14571 transitions.
[2020-05-30 19:59:59,720 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 9
[2020-05-30 19:59:59,720 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 9
[2020-05-30 19:59:59,720 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9608 states and 14571 transitions.
[2020-05-30 19:59:59,728 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:59:59,728 INFO  L728         BuchiCegarLoop]: Abstraction has 9608 states and 14571 transitions.
[2020-05-30 19:59:59,737 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9608 states and 14571 transitions.
[2020-05-30 19:59:59,827 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9608 to 8920.
[2020-05-30 19:59:59,827 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8920 states.
[2020-05-30 19:59:59,843 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8920 states to 8920 states and 13643 transitions.
[2020-05-30 19:59:59,843 INFO  L751         BuchiCegarLoop]: Abstraction has 8920 states and 13643 transitions.
[2020-05-30 19:59:59,843 INFO  L631         BuchiCegarLoop]: Abstraction has 8920 states and 13643 transitions.
[2020-05-30 19:59:59,843 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-05-30 19:59:59,843 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8920 states and 13643 transitions.
[2020-05-30 19:59:59,854 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 19:59:59,854 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:59:59,854 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:59:59,856 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:59:59,856 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND TRUE   !(msgsender_MSG == owner_owned[this])
[L3348]                    revert := true;
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND TRUE   revert
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND TRUE   revert
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND TRUE   !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this])
[L2645]                    revert := true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND TRUE   choice == 7
[L3564]                    gas := gas - 21000;
[L3565]        COND FALSE  !(gas >= 0)
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND TRUE   !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this])
[L2645]                    revert := true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:59:59,858 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:59:59,859 INFO  L82        PathProgramCache]: Analyzing trace with hash -1456981146, now seen corresponding path program 1 times
[2020-05-30 19:59:59,859 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:59:59,873 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:59:59,904 INFO  L134       CoverageAnalysis]: Checked inductivity of 14 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 12 trivial. 0 not checked.
[2020-05-30 19:59:59,904 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 19:59:59,904 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [3] total 3
[2020-05-30 19:59:59,905 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:59:59,905 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 19:59:59,905 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 19:59:59,905 INFO  L87              Difference]: Start difference. First operand 8920 states and 13643 transitions. cyclomatic complexity: 4726 Second operand 3 states.
[2020-05-30 20:00:00,064 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:00:00,064 INFO  L93              Difference]: Finished difference Result 9539 states and 14017 transitions.
[2020-05-30 20:00:00,064 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 20:00:00,064 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9539 states and 14017 transitions.
[2020-05-30 20:00:00,086 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:00:00,128 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9539 states to 8912 states and 13088 transitions.
[2020-05-30 20:00:00,128 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 9
[2020-05-30 20:00:00,128 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 9
[2020-05-30 20:00:00,128 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8912 states and 13088 transitions.
[2020-05-30 20:00:00,138 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:00:00,138 INFO  L728         BuchiCegarLoop]: Abstraction has 8912 states and 13088 transitions.
[2020-05-30 20:00:00,149 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8912 states and 13088 transitions.
[2020-05-30 20:00:00,227 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8912 to 8497.
[2020-05-30 20:00:00,227 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8497 states.
[2020-05-30 20:00:00,244 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8497 states to 8497 states and 12539 transitions.
[2020-05-30 20:00:00,244 INFO  L751         BuchiCegarLoop]: Abstraction has 8497 states and 12539 transitions.
[2020-05-30 20:00:00,244 INFO  L631         BuchiCegarLoop]: Abstraction has 8497 states and 12539 transitions.
[2020-05-30 20:00:00,244 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-05-30 20:00:00,244 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8497 states and 12539 transitions.
[2020-05-30 20:00:00,257 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:00:00,258 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:00:00,258 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:00:00,260 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:00:00,260 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND FALSE  !(Balance[from] >= amount)
[L3322]                    success := false;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND TRUE   choice == 7
[L3564]                    gas := gas - 21000;
[L3565]        COND FALSE  !(gas >= 0)
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND FALSE  !(Balance[from] >= amount)
[L3322]                    success := false;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:00:00,265 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:00:00,265 INFO  L82        PathProgramCache]: Analyzing trace with hash 1804259654, now seen corresponding path program 1 times
[2020-05-30 20:00:00,266 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:00:00,280 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:00:00,321 INFO  L134       CoverageAnalysis]: Checked inductivity of 14 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 14 trivial. 0 not checked.
[2020-05-30 20:00:00,321 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:00:00,321 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 20:00:00,321 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:00:00,321 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 20:00:00,321 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 20:00:00,322 INFO  L87              Difference]: Start difference. First operand 8497 states and 12539 transitions. cyclomatic complexity: 4045 Second operand 3 states.
[2020-05-30 20:00:00,455 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:00:00,455 INFO  L93              Difference]: Finished difference Result 8675 states and 12809 transitions.
[2020-05-30 20:00:00,455 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 20:00:00,455 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8675 states and 12809 transitions.
[2020-05-30 20:00:00,476 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:00:00,512 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8675 states to 8675 states and 12809 transitions.
[2020-05-30 20:00:00,513 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 12
[2020-05-30 20:00:00,513 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 12
[2020-05-30 20:00:00,513 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8675 states and 12809 transitions.
[2020-05-30 20:00:00,521 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:00:00,522 INFO  L728         BuchiCegarLoop]: Abstraction has 8675 states and 12809 transitions.
[2020-05-30 20:00:00,530 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8675 states and 12809 transitions.
[2020-05-30 20:00:00,601 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8675 to 8660.
[2020-05-30 20:00:00,601 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8660 states.
[2020-05-30 20:00:00,614 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8660 states to 8660 states and 12785 transitions.
[2020-05-30 20:00:00,614 INFO  L751         BuchiCegarLoop]: Abstraction has 8660 states and 12785 transitions.
[2020-05-30 20:00:00,614 INFO  L631         BuchiCegarLoop]: Abstraction has 8660 states and 12785 transitions.
[2020-05-30 20:00:00,614 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-05-30 20:00:00,614 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8660 states and 12785 transitions.
[2020-05-30 20:00:00,624 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:00:00,624 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:00:00,624 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:00:00,626 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:00:00,626 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND FALSE  !(Balance[from] >= amount)
[L3322]                    success := false;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND TRUE   choice == 7
[L3564]                    gas := gas - 21000;
[L3565]        COND FALSE  !(gas >= 0)
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND FALSE  !(Balance[from] >= amount)
[L3322]                    success := false;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:00:00,630 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:00:00,630 INFO  L82        PathProgramCache]: Analyzing trace with hash -1997027333, now seen corresponding path program 1 times
[2020-05-30 20:00:00,630 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:00:00,643 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:00:00,670 INFO  L134       CoverageAnalysis]: Checked inductivity of 14 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 14 trivial. 0 not checked.
[2020-05-30 20:00:00,670 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:00:00,670 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-30 20:00:00,671 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:00:00,671 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 20:00:00,671 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-30 20:00:00,671 INFO  L87              Difference]: Start difference. First operand 8660 states and 12785 transitions. cyclomatic complexity: 4128 Second operand 4 states.
[2020-05-30 20:00:00,765 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:00:00,765 INFO  L93              Difference]: Finished difference Result 8695 states and 12839 transitions.
[2020-05-30 20:00:00,765 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-30 20:00:00,765 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8695 states and 12839 transitions.
[2020-05-30 20:00:00,786 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:00:00,821 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8695 states to 8685 states and 12827 transitions.
[2020-05-30 20:00:00,822 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 12
[2020-05-30 20:00:00,822 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 12
[2020-05-30 20:00:00,822 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8685 states and 12827 transitions.
[2020-05-30 20:00:00,832 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:00:00,832 INFO  L728         BuchiCegarLoop]: Abstraction has 8685 states and 12827 transitions.
[2020-05-30 20:00:00,841 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8685 states and 12827 transitions.
[2020-05-30 20:00:00,908 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8685 to 8685.
[2020-05-30 20:00:00,908 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8685 states.
[2020-05-30 20:00:00,921 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8685 states to 8685 states and 12827 transitions.
[2020-05-30 20:00:00,921 INFO  L751         BuchiCegarLoop]: Abstraction has 8685 states and 12827 transitions.
[2020-05-30 20:00:00,921 INFO  L631         BuchiCegarLoop]: Abstraction has 8685 states and 12827 transitions.
[2020-05-30 20:00:00,921 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-05-30 20:00:00,922 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8685 states and 12827 transitions.
[2020-05-30 20:00:00,931 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:00:00,931 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:00:00,931 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:00:00,932 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:00:00,932 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_CorralChoice_EPXCrowdsale2 := false;
[L7]                 success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                 call_CorralChoice_EPXCrowdsale1 := false;
[L7]                 fsum_send__success_2_0 := 0;
[L7]                 fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                 success_CorralChoice_EPXCrowdsale0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L3635]              assume null == 0;
[L3636]  CALL        call this := FreshRefGenerator__success();
[L1098]              havoc newRef;
[L1099]              assume Alloc[newRef] == false;
[L1100]              Alloc[newRef] := true;
[L1101]              assume newRef != null;
[L3636]  RET         call this := FreshRefGenerator__success();
[L3637]              assume now >= 0;
[L3638]              assume DType[this] == EPXCrowdsale;
[L3639]              gas := gas - 53000;
[L3640]  CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]               havoc __exception;
[L342]               revert := false;
[L343]   COND FALSE  !(__exception)
[L376]   CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]              assume msgsender_MSG != null;
[L1119]              Balance[this] := 0;
[L1120]              owner_owned[this] := null;
[L1121]              owner_owned[this] := msgsender_MSG;
[L1139]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]  COND FALSE  !(revert)
[L1891]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]  COND FALSE  !(revert)
[L1897]  CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]  CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]              assume msgsender_MSG != null;
[L1159]              Balance[this] := 0;
[L1177]  RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]  COND FALSE  !(revert)
[L1897]  RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]  COND FALSE  !(revert)
[L1903]  CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]              assume msgsender_MSG != null;
[L1817]              Balance[this] := 0;
[L1818]              admin_EPXCrowdsale[this] := null;
[L1819]              initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]              tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]              beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]              amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]              fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]              CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]              fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]              fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]              isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]              areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]              isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]  CALL        call __var_1 := FreshRefGenerator__success();
[L1098]              havoc newRef;
[L1099]              assume Alloc[newRef] == false;
[L1100]              Alloc[newRef] := true;
[L1101]              assume newRef != null;
[L1830]  RET         call __var_1 := FreshRefGenerator__success();
[L1831]  COND FALSE  !(revert)
[L1836]              balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]              M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]  CALL        call __var_2 := FreshRefGenerator__success();
[L1098]              havoc newRef;
[L1099]              assume Alloc[newRef] == false;
[L1100]              Alloc[newRef] := true;
[L1101]              assume newRef != null;
[L1839]  RET         call __var_2 := FreshRefGenerator__success();
[L1840]  COND FALSE  !(revert)
[L1845]              usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]              M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]              gas := gas - 828;
[L3346]  COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  COND FALSE  !(revert)
[L1854]              admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]              CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]  RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  COND FALSE  !(revert)
[L376]   RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]               assume !revert && gas >= 0;
[L3640]  RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]              assume !revert && gas >= 0;
[L3644]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]              havoc msgsender_MSG;
[L3542]              havoc msgvalue_MSG;
[L3543]              havoc choice;
[L3544]              havoc initialEPXtokenCount_s286;
[L3545]              havoc remainingEPXtokenCount_s299;
[L3546]              havoc _fundingStartBlock_s391;
[L3547]              havoc _fundingEndBlock_s391;
[L3548]              havoc response_s391;
[L3549]              havoc _amount_s558;
[L3550]              havoc tmpNow;
[L3551]              havoc gas;
[L3552]              assume gas > 4000000 && gas <= 8000000;
[L3553]              tmpNow := now;
[L3554]              havoc now;
[L3555]              assume now > tmpNow;
[L3556]              assume msgsender_MSG != null;
[L3557]              assume DType[msgsender_MSG] != owned;
[L3558]              assume DType[msgsender_MSG] != safeMath;
[L3559]              assume DType[msgsender_MSG] != StandardToken;
[L3560]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]              Alloc[msgsender_MSG] := true;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                 call_CorralChoice_EPXCrowdsale1 := true;
[L7]                 call_CorralChoice_EPXCrowdsale1 := false;
[L7]                 revert := revert_hold;
[L3562]  COND TRUE   choice == 7
[L3564]              gas := gas - 21000;
[L3565]  COND FALSE  !(gas >= 0)
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                 success_CorralChoice_EPXCrowdsale2 := true;
[L7]                 success_CorralChoice_EPXCrowdsale2 := false;
[L7]                 revert := revert_hold;
[L3644]  RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:00:00,935 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:00:00,935 INFO  L82        PathProgramCache]: Analyzing trace with hash -958285439, now seen corresponding path program 1 times
[2020-05-30 20:00:00,935 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:00:00,946 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:00:00,968 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-05-30 20:00:00,968 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:00:00,968 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-30 20:00:00,969 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:00:00,969 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 20:00:00,969 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-05-30 20:00:00,969 INFO  L87              Difference]: Start difference. First operand 8685 states and 12827 transitions. cyclomatic complexity: 4145 Second operand 4 states.
[2020-05-30 20:00:01,229 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:00:01,229 INFO  L93              Difference]: Finished difference Result 8885 states and 13063 transitions.
[2020-05-30 20:00:01,229 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-30 20:00:01,229 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8885 states and 13063 transitions.
[2020-05-30 20:00:01,253 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 20:00:01,285 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8885 states to 8885 states and 13063 transitions.
[2020-05-30 20:00:01,285 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 17
[2020-05-30 20:00:01,285 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 17
[2020-05-30 20:00:01,285 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8885 states and 13063 transitions.
[2020-05-30 20:00:01,293 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:00:01,293 INFO  L728         BuchiCegarLoop]: Abstraction has 8885 states and 13063 transitions.
[2020-05-30 20:00:01,304 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8885 states and 13063 transitions.
[2020-05-30 20:00:01,366 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8885 to 8718.
[2020-05-30 20:00:01,366 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8718 states.
[2020-05-30 20:00:01,379 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8718 states to 8718 states and 12811 transitions.
[2020-05-30 20:00:01,379 INFO  L751         BuchiCegarLoop]: Abstraction has 8718 states and 12811 transitions.
[2020-05-30 20:00:01,379 INFO  L631         BuchiCegarLoop]: Abstraction has 8718 states and 12811 transitions.
[2020-05-30 20:00:01,379 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-05-30 20:00:01,379 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8718 states and 12811 transitions.
[2020-05-30 20:00:01,388 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:00:01,389 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:00:01,389 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:00:01,390 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:00:01,390 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND FALSE  !(choice == 1)
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:00:01,394 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:00:01,394 INFO  L82        PathProgramCache]: Analyzing trace with hash -642519888, now seen corresponding path program 1 times
[2020-05-30 20:00:01,394 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:00:01,407 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:00:01,456 INFO  L134       CoverageAnalysis]: Checked inductivity of 14 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 14 trivial. 0 not checked.
[2020-05-30 20:00:01,456 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:00:01,456 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-05-30 20:00:01,457 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:00:01,457 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-05-30 20:00:01,457 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-05-30 20:00:01,457 INFO  L87              Difference]: Start difference. First operand 8718 states and 12811 transitions. cyclomatic complexity: 4096 Second operand 5 states.
[2020-05-30 20:00:01,594 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:00:01,595 INFO  L93              Difference]: Finished difference Result 8808 states and 12943 transitions.
[2020-05-30 20:00:01,595 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-30 20:00:01,595 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8808 states and 12943 transitions.
[2020-05-30 20:00:01,611 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:00:01,632 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8808 states to 8808 states and 12943 transitions.
[2020-05-30 20:00:01,632 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 16
[2020-05-30 20:00:01,633 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 16
[2020-05-30 20:00:01,633 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8808 states and 12943 transitions.
[2020-05-30 20:00:01,639 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:00:01,639 INFO  L728         BuchiCegarLoop]: Abstraction has 8808 states and 12943 transitions.
[2020-05-30 20:00:01,646 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8808 states and 12943 transitions.
[2020-05-30 20:00:01,695 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8808 to 8786.
[2020-05-30 20:00:01,695 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8786 states.
[2020-05-30 20:00:01,707 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8786 states to 8786 states and 12910 transitions.
[2020-05-30 20:00:01,707 INFO  L751         BuchiCegarLoop]: Abstraction has 8786 states and 12910 transitions.
[2020-05-30 20:00:01,707 INFO  L631         BuchiCegarLoop]: Abstraction has 8786 states and 12910 transitions.
[2020-05-30 20:00:01,707 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-05-30 20:00:01,708 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8786 states and 12910 transitions.
[2020-05-30 20:00:01,716 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:00:01,716 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:00:01,717 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:00:01,717 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:00:01,718 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_CorralChoice_EPXCrowdsale2 := false;
[L7]                 success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                 call_CorralChoice_EPXCrowdsale1 := false;
[L7]                 fsum_send__success_2_0 := 0;
[L7]                 fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                 success_CorralChoice_EPXCrowdsale0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L3635]              assume null == 0;
[L3636]  CALL        call this := FreshRefGenerator__success();
[L1098]              havoc newRef;
[L1099]              assume Alloc[newRef] == false;
[L1100]              Alloc[newRef] := true;
[L1101]              assume newRef != null;
[L3636]  RET         call this := FreshRefGenerator__success();
[L3637]              assume now >= 0;
[L3638]              assume DType[this] == EPXCrowdsale;
[L3639]              gas := gas - 53000;
[L3640]  CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]               havoc __exception;
[L342]               revert := false;
[L343]   COND FALSE  !(__exception)
[L376]   CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]              assume msgsender_MSG != null;
[L1119]              Balance[this] := 0;
[L1120]              owner_owned[this] := null;
[L1121]              owner_owned[this] := msgsender_MSG;
[L1139]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]  COND FALSE  !(revert)
[L1891]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]  COND FALSE  !(revert)
[L1897]  CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]  CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]              assume msgsender_MSG != null;
[L1159]              Balance[this] := 0;
[L1177]  RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]  COND FALSE  !(revert)
[L1897]  RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]  COND FALSE  !(revert)
[L1903]  CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]              assume msgsender_MSG != null;
[L1817]              Balance[this] := 0;
[L1818]              admin_EPXCrowdsale[this] := null;
[L1819]              initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]              tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]              beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]              amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]              fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]              CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]              fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]              fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]              isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]              areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]              isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]  CALL        call __var_1 := FreshRefGenerator__success();
[L1098]              havoc newRef;
[L1099]              assume Alloc[newRef] == false;
[L1100]              Alloc[newRef] := true;
[L1101]              assume newRef != null;
[L1830]  RET         call __var_1 := FreshRefGenerator__success();
[L1831]  COND FALSE  !(revert)
[L1836]              balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]              M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]  CALL        call __var_2 := FreshRefGenerator__success();
[L1098]              havoc newRef;
[L1099]              assume Alloc[newRef] == false;
[L1100]              Alloc[newRef] := true;
[L1101]              assume newRef != null;
[L1839]  RET         call __var_2 := FreshRefGenerator__success();
[L1840]  COND FALSE  !(revert)
[L1845]              usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]              M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]              gas := gas - 828;
[L3346]  COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  COND FALSE  !(revert)
[L1854]              admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]              CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]  RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  COND FALSE  !(revert)
[L376]   RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]               assume !revert && gas >= 0;
[L3640]  RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]              assume !revert && gas >= 0;
[L3644]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]              havoc msgsender_MSG;
[L3542]              havoc msgvalue_MSG;
[L3543]              havoc choice;
[L3544]              havoc initialEPXtokenCount_s286;
[L3545]              havoc remainingEPXtokenCount_s299;
[L3546]              havoc _fundingStartBlock_s391;
[L3547]              havoc _fundingEndBlock_s391;
[L3548]              havoc response_s391;
[L3549]              havoc _amount_s558;
[L3550]              havoc tmpNow;
[L3551]              havoc gas;
[L3552]              assume gas > 4000000 && gas <= 8000000;
[L3553]              tmpNow := now;
[L3554]              havoc now;
[L3555]              assume now > tmpNow;
[L3556]              assume msgsender_MSG != null;
[L3557]              assume DType[msgsender_MSG] != owned;
[L3558]              assume DType[msgsender_MSG] != safeMath;
[L3559]              assume DType[msgsender_MSG] != StandardToken;
[L3560]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]              Alloc[msgsender_MSG] := true;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                 call_CorralChoice_EPXCrowdsale1 := true;
[L7]                 call_CorralChoice_EPXCrowdsale1 := false;
[L7]                 revert := revert_hold;
[L3562]  COND FALSE  !(choice == 7)
[L3571]  COND FALSE  !(choice == 6)
[L3580]  COND FALSE  !(choice == 5)
[L3589]  COND FALSE  !(choice == 4)
[L3598]  COND FALSE  !(choice == 3)
[L3607]  COND FALSE  !(choice == 2)
[L3616]  COND FALSE  !(choice == 1)
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                 success_CorralChoice_EPXCrowdsale2 := true;
[L7]                 success_CorralChoice_EPXCrowdsale2 := false;
[L7]                 revert := revert_hold;
[L3644]  RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:00:01,720 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:00:01,720 INFO  L82        PathProgramCache]: Analyzing trace with hash -1925097875, now seen corresponding path program 1 times
[2020-05-30 20:00:01,720 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:00:01,745 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:00:01,778 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-05-30 20:00:01,778 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:00:01,778 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-30 20:00:01,778 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:00:01,779 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-05-30 20:00:01,779 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=55, Unknown=0, NotChecked=0, Total=72
[2020-05-30 20:00:01,779 INFO  L87              Difference]: Start difference. First operand 8786 states and 12910 transitions. cyclomatic complexity: 4127 Second operand 9 states.
[2020-05-30 20:00:07,092 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:00:07,092 INFO  L93              Difference]: Finished difference Result 9016 states and 13313 transitions.
[2020-05-30 20:00:07,092 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-05-30 20:00:07,092 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9016 states and 13313 transitions.
[2020-05-30 20:00:07,108 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-05-30 20:00:07,129 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9016 states to 9016 states and 13313 transitions.
[2020-05-30 20:00:07,129 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 25
[2020-05-30 20:00:07,129 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 25
[2020-05-30 20:00:07,129 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9016 states and 13313 transitions.
[2020-05-30 20:00:07,135 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:00:07,135 INFO  L728         BuchiCegarLoop]: Abstraction has 9016 states and 13313 transitions.
[2020-05-30 20:00:07,140 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9016 states and 13313 transitions.
[2020-05-30 20:00:07,182 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9016 to 8962.
[2020-05-30 20:00:07,182 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8962 states.
[2020-05-30 20:00:07,195 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8962 states to 8962 states and 13190 transitions.
[2020-05-30 20:00:07,195 INFO  L751         BuchiCegarLoop]: Abstraction has 8962 states and 13190 transitions.
[2020-05-30 20:00:07,195 INFO  L631         BuchiCegarLoop]: Abstraction has 8962 states and 13190 transitions.
[2020-05-30 20:00:07,196 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-05-30 20:00:07,196 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8962 states and 13190 transitions.
[2020-05-30 20:00:07,205 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:00:07,205 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:00:07,205 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:00:07,206 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:00:07,206 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := 855885808;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND FALSE  !(choice == 1)
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:00:07,209 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:00:07,209 INFO  L82        PathProgramCache]: Analyzing trace with hash 1847036629, now seen corresponding path program 1 times
[2020-05-30 20:00:07,210 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:00:07,221 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:00:07,254 INFO  L134       CoverageAnalysis]: Checked inductivity of 22 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 22 trivial. 0 not checked.
[2020-05-30 20:00:07,254 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:00:07,254 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-05-30 20:00:07,254 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:00:07,255 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-30 20:00:07,255 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-05-30 20:00:07,255 INFO  L87              Difference]: Start difference. First operand 8962 states and 13190 transitions. cyclomatic complexity: 4233 Second operand 10 states.
[2020-05-30 20:00:11,863 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:00:11,864 INFO  L93              Difference]: Finished difference Result 9228 states and 13659 transitions.
[2020-05-30 20:00:11,864 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-05-30 20:00:11,864 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9228 states and 13659 transitions.
[2020-05-30 20:00:11,881 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-05-30 20:00:11,902 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9228 states to 9228 states and 13659 transitions.
[2020-05-30 20:00:11,903 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 32
[2020-05-30 20:00:11,903 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 32
[2020-05-30 20:00:11,903 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9228 states and 13659 transitions.
[2020-05-30 20:00:11,909 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:00:11,909 INFO  L728         BuchiCegarLoop]: Abstraction has 9228 states and 13659 transitions.
[2020-05-30 20:00:11,914 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9228 states and 13659 transitions.
[2020-05-30 20:00:11,958 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9228 to 9086.
[2020-05-30 20:00:11,958 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9086 states.
[2020-05-30 20:00:11,969 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9086 states to 9086 states and 13395 transitions.
[2020-05-30 20:00:11,969 INFO  L751         BuchiCegarLoop]: Abstraction has 9086 states and 13395 transitions.
[2020-05-30 20:00:11,969 INFO  L631         BuchiCegarLoop]: Abstraction has 9086 states and 13395 transitions.
[2020-05-30 20:00:11,970 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-05-30 20:00:11,970 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9086 states and 13395 transitions.
[2020-05-30 20:00:11,978 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:00:11,978 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:00:11,978 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:00:11,979 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:00:11,979 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND TRUE   __exception
[L345]                     __tmp__Balance := Balance;
[L346]                     __tmp__DType := DType;
[L347]                     __tmp__Alloc := Alloc;
[L348]                     __tmp__balance_ADDR := balance_ADDR;
[L349]                     __tmp__M_Ref_int_balancesArray0 := M_Ref_int_balancesArray0;
[L350]                     __tmp__sum_balancesArray0 := sum_balancesArray0;
[L351]                     __tmp__M_Ref_int_usersEPXfundValue1 := M_Ref_int_usersEPXfundValue1;
[L352]                     __tmp__sum_usersEPXfundValue1 := sum_usersEPXfundValue1;
[L353]                     __tmp__Length := Length;
[L354]                     __tmp__now := now;
[L355]                     __tmp__owner_owned := owner_owned;
[L356]                     __tmp__admin_EPXCrowdsale := admin_EPXCrowdsale;
[L357]                     __tmp__tokenReward_EPXCrowdsale := tokenReward_EPXCrowdsale;
[L358]                     __tmp__initialTokenSupply_EPXCrowdsale := initialTokenSupply_EPXCrowdsale;
[L359]                     __tmp__tokensRemaining_EPXCrowdsale := tokensRemaining_EPXCrowdsale;
[L360]                     __tmp__beneficiaryWallet_EPXCrowdsale := beneficiaryWallet_EPXCrowdsale;
[L361]                     __tmp__amountRaisedInWei_EPXCrowdsale := amountRaisedInWei_EPXCrowdsale;
[L362]                     __tmp__fundingMinCapInWei_EPXCrowdsale := fundingMinCapInWei_EPXCrowdsale;
[L363]                     __tmp__CurrentStatus_EPXCrowdsale := CurrentStatus_EPXCrowdsale;
[L364]                     __tmp__fundingStartBlock_EPXCrowdsale := fundingStartBlock_EPXCrowdsale;
[L365]                     __tmp__fundingEndBlock_EPXCrowdsale := fundingEndBlock_EPXCrowdsale;
[L366]                     __tmp__isCrowdSaleClosed_EPXCrowdsale := isCrowdSaleClosed_EPXCrowdsale;
[L367]                     __tmp__areFundsReleasedToBeneficiary_EPXCrowdsale := areFundsReleasedToBeneficiary_EPXCrowdsale;
[L368]                     __tmp__isCrowdSaleSetup_EPXCrowdsale := isCrowdSaleSetup_EPXCrowdsale;
[L369]                     __tmp__balancesArray_EPXCrowdsale := balancesArray_EPXCrowdsale;
[L370]                     __tmp__usersEPXfundValue_EPXCrowdsale := usersEPXfundValue_EPXCrowdsale;
[L371]         CALL        call EPXCrowdsale_EPXCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L1865]        CALL        call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[L1128]        CALL        call owned_owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1108]                    assume msgsender_MSG != null;
[L1109]                    __tmp__Balance[this] := 0;
[L1110]                    __tmp__owner_owned[this] := null;
[L1111]                    __tmp__owner_owned[this] := msgsender_MSG;
[L1128]        RET         call owned_owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1129]        COND FALSE  !(revert)
[L1865]        RET         call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[L1866]        COND FALSE  !(revert)
[L1871]        CALL        call safeMath_safeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[L1166]        CALL        call safeMath_safeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1150]                    assume msgsender_MSG != null;
[L1151]                    __tmp__Balance[this] := 0;
[L1166]        RET         call safeMath_safeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1167]        COND FALSE  !(revert)
[L1871]        RET         call safeMath_safeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[L1872]        COND FALSE  !(revert)
[L1877]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1767]                    assume msgsender_MSG != null;
[L1768]                    __tmp__Balance[this] := 0;
[L1769]                    __tmp__admin_EPXCrowdsale[this] := null;
[L1770]                    __tmp__initialTokenSupply_EPXCrowdsale[this] := 0;
[L1771]                    __tmp__tokensRemaining_EPXCrowdsale[this] := 0;
[L1772]                    __tmp__beneficiaryWallet_EPXCrowdsale[this] := null;
[L1773]                    __tmp__amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1774]                    __tmp__fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1775]                    __tmp__CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1776]                    __tmp__fundingStartBlock_EPXCrowdsale[this] := 0;
[L1777]                    __tmp__fundingEndBlock_EPXCrowdsale[this] := 0;
[L1778]                    __tmp__isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1779]                    __tmp__areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1780]                    __tmp__isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1781]        CALL        call __var_1 := FreshRefGenerator__fail();
[L1088]                    havoc newRef;
[L1089]                    assume __tmp__Alloc[newRef] == false;
[L1090]                    __tmp__Alloc[newRef] := true;
[L1091]                    assume newRef != null;
[L1781]        RET         call __var_1 := FreshRefGenerator__fail();
[L1782]        COND FALSE  !(revert)
[L1787]                    __tmp__balancesArray_EPXCrowdsale[this] := __var_1;
[L1788]                    __tmp__M_Ref_int_balancesArray0[__tmp__balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1789]                    __tmp__sum_balancesArray0[__tmp__balancesArray_EPXCrowdsale[this]] := 0;
[L1790]        CALL        call __var_2 := FreshRefGenerator__fail();
[L1088]                    havoc newRef;
[L1089]                    assume __tmp__Alloc[newRef] == false;
[L1090]                    __tmp__Alloc[newRef] := true;
[L1091]                    assume newRef != null;
[L1790]        RET         call __var_2 := FreshRefGenerator__fail();
[L1791]        COND FALSE  !(revert)
[L1796]                    __tmp__usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1797]                    __tmp__M_Ref_int_usersEPXfundValue1[__tmp__usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1798]                    __tmp__sum_usersEPXfundValue1[__tmp__usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1799]        CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3333]                    gas := gas - 828;
[L3334]        COND FALSE  !(!(msgsender_MSG == __tmp__owner_owned[this]))
[L1799]        RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L1800]        COND FALSE  !(revert)
[L1805]                    __tmp__admin_EPXCrowdsale[this] := msgsender_MSG;
[L1806]                    __tmp__CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1877]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1878]        COND FALSE  !(revert)
[L371]         RET         call EPXCrowdsale_EPXCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L372]                     assume revert || gas < 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND FALSE  !(choice == 1)
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:00:11,982 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:00:11,982 INFO  L82        PathProgramCache]: Analyzing trace with hash -740119212, now seen corresponding path program 1 times
[2020-05-30 20:00:11,983 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:00:11,994 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:00:12,019 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-30 20:00:12,020 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:00:12,020 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-30 20:00:12,020 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:00:12,020 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 20:00:12,020 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-30 20:00:12,020 INFO  L87              Difference]: Start difference. First operand 9086 states and 13395 transitions. cyclomatic complexity: 4316 Second operand 4 states.
[2020-05-30 20:00:12,384 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:00:12,384 INFO  L93              Difference]: Finished difference Result 10097 states and 14943 transitions.
[2020-05-30 20:00:12,384 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-30 20:00:12,384 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10097 states and 14943 transitions.
[2020-05-30 20:00:12,406 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 20:00:12,434 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10097 states to 9761 states and 14506 transitions.
[2020-05-30 20:00:12,434 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 36
[2020-05-30 20:00:12,434 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 36
[2020-05-30 20:00:12,434 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9761 states and 14506 transitions.
[2020-05-30 20:00:12,442 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:00:12,442 INFO  L728         BuchiCegarLoop]: Abstraction has 9761 states and 14506 transitions.
[2020-05-30 20:00:12,448 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9761 states and 14506 transitions.
[2020-05-30 20:00:12,498 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9761 to 9018.
[2020-05-30 20:00:12,498 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9018 states.
[2020-05-30 20:00:12,510 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9018 states to 9018 states and 13373 transitions.
[2020-05-30 20:00:12,510 INFO  L751         BuchiCegarLoop]: Abstraction has 9018 states and 13373 transitions.
[2020-05-30 20:00:12,510 INFO  L631         BuchiCegarLoop]: Abstraction has 9018 states and 13373 transitions.
[2020-05-30 20:00:12,510 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-05-30 20:00:12,510 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9018 states and 13373 transitions.
[2020-05-30 20:00:12,519 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:00:12,519 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:00:12,519 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:00:12,520 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:00:12,520 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := 855885808;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:00:12,523 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:00:12,523 INFO  L82        PathProgramCache]: Analyzing trace with hash 2112701508, now seen corresponding path program 1 times
[2020-05-30 20:00:12,524 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:00:12,538 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:00:12,575 INFO  L134       CoverageAnalysis]: Checked inductivity of 59 backedges. 7 proven. 0 refuted. 0 times theorem prover too weak. 52 trivial. 0 not checked.
[2020-05-30 20:00:12,575 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:00:12,575 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-05-30 20:00:12,575 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:00:12,575 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-05-30 20:00:12,576 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-05-30 20:00:12,576 INFO  L87              Difference]: Start difference. First operand 9018 states and 13373 transitions. cyclomatic complexity: 4362 Second operand 5 states.
[2020-05-30 20:00:12,989 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:00:12,990 INFO  L93              Difference]: Finished difference Result 9425 states and 13820 transitions.
[2020-05-30 20:00:12,990 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-30 20:00:12,990 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9425 states and 13820 transitions.
[2020-05-30 20:00:13,011 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:00:13,034 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9425 states to 9425 states and 13820 transitions.
[2020-05-30 20:00:13,034 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 25
[2020-05-30 20:00:13,034 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 25
[2020-05-30 20:00:13,034 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9425 states and 13820 transitions.
[2020-05-30 20:00:13,040 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:00:13,040 INFO  L728         BuchiCegarLoop]: Abstraction has 9425 states and 13820 transitions.
[2020-05-30 20:00:13,045 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9425 states and 13820 transitions.
[2020-05-30 20:00:13,089 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9425 to 9273.
[2020-05-30 20:00:13,089 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9273 states.
[2020-05-30 20:00:13,103 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9273 states to 9273 states and 13618 transitions.
[2020-05-30 20:00:13,103 INFO  L751         BuchiCegarLoop]: Abstraction has 9273 states and 13618 transitions.
[2020-05-30 20:00:13,103 INFO  L631         BuchiCegarLoop]: Abstraction has 9273 states and 13618 transitions.
[2020-05-30 20:00:13,103 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-05-30 20:00:13,103 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9273 states and 13618 transitions.
[2020-05-30 20:00:13,113 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 20:00:13,113 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:00:13,113 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:00:13,114 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:00:13,115 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1845164479;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND FALSE  !(choice == 1)
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:00:13,118 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:00:13,118 INFO  L82        PathProgramCache]: Analyzing trace with hash -1646962068, now seen corresponding path program 1 times
[2020-05-30 20:00:13,118 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:00:13,136 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:00:13,313 INFO  L134       CoverageAnalysis]: Checked inductivity of 67 backedges. 30 proven. 7 refuted. 0 times theorem prover too weak. 30 trivial. 0 not checked.
[2020-05-30 20:00:13,314 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:00:13,314 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-05-30 20:00:13,314 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:00:13,315 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 20:00:13,315 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=20, Invalid=90, Unknown=0, NotChecked=0, Total=110
[2020-05-30 20:00:13,315 INFO  L87              Difference]: Start difference. First operand 9273 states and 13618 transitions. cyclomatic complexity: 4352 Second operand 11 states.
[2020-05-30 20:00:20,518 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:00:20,518 INFO  L93              Difference]: Finished difference Result 11053 states and 16406 transitions.
[2020-05-30 20:00:20,519 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-30 20:00:20,519 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11053 states and 16406 transitions.
[2020-05-30 20:00:20,540 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 20:00:20,567 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11053 states to 11053 states and 16406 transitions.
[2020-05-30 20:00:20,568 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 46
[2020-05-30 20:00:20,568 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 46
[2020-05-30 20:00:20,568 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11053 states and 16406 transitions.
[2020-05-30 20:00:20,576 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:00:20,576 INFO  L728         BuchiCegarLoop]: Abstraction has 11053 states and 16406 transitions.
[2020-05-30 20:00:20,581 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11053 states and 16406 transitions.
[2020-05-30 20:00:20,635 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11053 to 10929.
[2020-05-30 20:00:20,635 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10929 states.
[2020-05-30 20:00:20,652 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10929 states to 10929 states and 16233 transitions.
[2020-05-30 20:00:20,652 INFO  L751         BuchiCegarLoop]: Abstraction has 10929 states and 16233 transitions.
[2020-05-30 20:00:20,653 INFO  L631         BuchiCegarLoop]: Abstraction has 10929 states and 16233 transitions.
[2020-05-30 20:00:20,653 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-05-30 20:00:20,653 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10929 states and 16233 transitions.
[2020-05-30 20:00:20,663 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 20:00:20,663 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:00:20,663 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:00:20,665 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:00:20,665 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := 855885808;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND TRUE   DType[to] == EPXCrowdsale
[L3111]        CALL        call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L2307]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2308]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2309]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2310]                    gas := gas - 4;
[L2311]        CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND FALSE  !(DType[this] == EPXCrowdsale)
[L1645]        COND TRUE   DType[this] == StandardToken
[L1647]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1647]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1648]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND FALSE  !(DType[this] == EPXCrowdsale)
[L1267]        COND TRUE   DType[this] == StandardToken
[L1269]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1269]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1270]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND FALSE  !(DType[this] == EPXCrowdsale)
[L1535]        COND FALSE  !(DType[this] == StandardToken)
[L1543]        COND TRUE   DType[this] == safeMath
[L1545]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1545]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1546]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND FALSE  !(DType[this] == EPXCrowdsale)
[L1645]        COND TRUE   DType[this] == StandardToken
[L1647]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1647]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1648]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L2311]        RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2312]        COND FALSE  !(revert)
[L3111]        RET         call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L3112]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND FALSE  !(msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null))
[L2186]                    gas := gas - 256;
[L2187]        COND TRUE   msgsender_MSG != admin_EPXCrowdsale[this]
[L2189]                    gas := gas - 19;
[L2190]                    response_s391 := 829661217;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:00:20,670 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:00:20,670 INFO  L82        PathProgramCache]: Analyzing trace with hash 183946153, now seen corresponding path program 1 times
[2020-05-30 20:00:20,670 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:00:20,691 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:00:20,799 INFO  L134       CoverageAnalysis]: Checked inductivity of 184 backedges. 0 proven. 9 refuted. 0 times theorem prover too weak. 175 trivial. 0 not checked.
[2020-05-30 20:00:20,799 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:00:20,799 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [6] total 6
[2020-05-30 20:00:20,799 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:00:20,800 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-05-30 20:00:20,800 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-05-30 20:00:20,800 INFO  L87              Difference]: Start difference. First operand 10929 states and 16233 transitions. cyclomatic complexity: 5311 Second operand 6 states.
[2020-05-30 20:00:21,006 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:00:21,006 INFO  L93              Difference]: Finished difference Result 11089 states and 16454 transitions.
[2020-05-30 20:00:21,006 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-05-30 20:00:21,007 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11089 states and 16454 transitions.
[2020-05-30 20:00:21,030 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 20:00:21,058 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11089 states to 10999 states and 16329 transitions.
[2020-05-30 20:00:21,058 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 46
[2020-05-30 20:00:21,058 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 46
[2020-05-30 20:00:21,058 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10999 states and 16329 transitions.
[2020-05-30 20:00:21,066 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:00:21,066 INFO  L728         BuchiCegarLoop]: Abstraction has 10999 states and 16329 transitions.
[2020-05-30 20:00:21,072 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10999 states and 16329 transitions.
[2020-05-30 20:00:21,129 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10999 to 10999.
[2020-05-30 20:00:21,129 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10999 states.
[2020-05-30 20:00:21,147 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10999 states to 10999 states and 16329 transitions.
[2020-05-30 20:00:21,147 INFO  L751         BuchiCegarLoop]: Abstraction has 10999 states and 16329 transitions.
[2020-05-30 20:00:21,147 INFO  L631         BuchiCegarLoop]: Abstraction has 10999 states and 16329 transitions.
[2020-05-30 20:00:21,147 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-05-30 20:00:21,147 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10999 states and 16329 transitions.
[2020-05-30 20:00:21,159 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 20:00:21,159 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:00:21,159 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:00:21,161 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:00:21,161 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := 855885808;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND TRUE   DType[to] == EPXCrowdsale
[L3111]        CALL        call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L2307]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2308]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2309]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2310]                    gas := gas - 4;
[L2311]        CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND FALSE  !(DType[this] == EPXCrowdsale)
[L1267]        COND TRUE   DType[this] == StandardToken
[L1269]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1269]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1270]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND FALSE  !(DType[this] == EPXCrowdsale)
[L1535]        COND FALSE  !(DType[this] == StandardToken)
[L1543]        COND TRUE   DType[this] == safeMath
[L1545]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1545]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1546]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L2311]        RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2312]        COND FALSE  !(revert)
[L3111]        RET         call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L3112]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:00:21,165 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:00:21,166 INFO  L82        PathProgramCache]: Analyzing trace with hash -993537037, now seen corresponding path program 1 times
[2020-05-30 20:00:21,166 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:00:21,187 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:00:21,294 INFO  L134       CoverageAnalysis]: Checked inductivity of 183 backedges. 73 proven. 0 refuted. 0 times theorem prover too weak. 110 trivial. 0 not checked.
[2020-05-30 20:00:21,294 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:00:21,294 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-05-30 20:00:21,294 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:00:21,294 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-30 20:00:21,294 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-05-30 20:00:21,294 INFO  L87              Difference]: Start difference. First operand 10999 states and 16329 transitions. cyclomatic complexity: 5337 Second operand 10 states.
[2020-05-30 20:00:27,195 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:00:27,195 INFO  L93              Difference]: Finished difference Result 11579 states and 17043 transitions.
[2020-05-30 20:00:27,195 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-30 20:00:27,195 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11579 states and 17043 transitions.
[2020-05-30 20:00:27,229 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 20:00:27,269 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11579 states to 11412 states and 16714 transitions.
[2020-05-30 20:00:27,269 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 48
[2020-05-30 20:00:27,269 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 48
[2020-05-30 20:00:27,269 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11412 states and 16714 transitions.
[2020-05-30 20:00:27,279 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:00:27,279 INFO  L728         BuchiCegarLoop]: Abstraction has 11412 states and 16714 transitions.
[2020-05-30 20:00:27,286 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11412 states and 16714 transitions.
[2020-05-30 20:00:27,344 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11412 to 11038.
[2020-05-30 20:00:27,344 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11038 states.
[2020-05-30 20:00:27,362 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11038 states to 11038 states and 16106 transitions.
[2020-05-30 20:00:27,362 INFO  L751         BuchiCegarLoop]: Abstraction has 11038 states and 16106 transitions.
[2020-05-30 20:00:27,362 INFO  L631         BuchiCegarLoop]: Abstraction has 11038 states and 16106 transitions.
[2020-05-30 20:00:27,363 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-05-30 20:00:27,363 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11038 states and 16106 transitions.
[2020-05-30 20:00:27,374 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 20:00:27,374 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:00:27,374 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:00:27,376 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:00:27,376 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND FALSE  !(DType[this] == EPXCrowdsale)
[L1267]        COND FALSE  !(DType[this] == StandardToken)
[L1275]        COND TRUE   DType[this] == safeMath
[L1277]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1277]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1278]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND FALSE  !(DType[this] == EPXCrowdsale)
[L1535]        COND TRUE   DType[this] == StandardToken
[L1537]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1537]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1538]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1845164479;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND TRUE   DType[to] == EPXCrowdsale
[L3111]        CALL        call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L2307]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2308]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2309]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2310]                    gas := gas - 4;
[L2311]        CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND FALSE  !(DType[this] == EPXCrowdsale)
[L1267]        COND FALSE  !(DType[this] == StandardToken)
[L1275]        COND TRUE   DType[this] == safeMath
[L1277]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1277]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1278]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND FALSE  !(DType[this] == EPXCrowdsale)
[L1535]        COND FALSE  !(DType[this] == StandardToken)
[L1543]        COND TRUE   DType[this] == safeMath
[L1545]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1545]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1546]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L2311]        RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2312]        COND FALSE  !(revert)
[L3111]        RET         call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L3112]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:00:27,381 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:00:27,382 INFO  L82        PathProgramCache]: Analyzing trace with hash -1673725906, now seen corresponding path program 1 times
[2020-05-30 20:00:27,382 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:00:27,399 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:00:27,493 INFO  L134       CoverageAnalysis]: Checked inductivity of 184 backedges. 13 proven. 7 refuted. 0 times theorem prover too weak. 164 trivial. 0 not checked.
[2020-05-30 20:00:27,493 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:00:27,494 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-05-30 20:00:27,494 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:00:27,495 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-30 20:00:27,495 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-05-30 20:00:27,495 INFO  L87              Difference]: Start difference. First operand 11038 states and 16106 transitions. cyclomatic complexity: 5074 Second operand 7 states.
[2020-05-30 20:00:27,872 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:00:27,872 INFO  L93              Difference]: Finished difference Result 11113 states and 16202 transitions.
[2020-05-30 20:00:27,872 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-30 20:00:27,872 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11113 states and 16202 transitions.
[2020-05-30 20:00:27,901 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 20:00:27,933 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11113 states to 10988 states and 16016 transitions.
[2020-05-30 20:00:27,933 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 42
[2020-05-30 20:00:27,933 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 42
[2020-05-30 20:00:27,933 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10988 states and 16016 transitions.
[2020-05-30 20:00:27,942 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:00:27,942 INFO  L728         BuchiCegarLoop]: Abstraction has 10988 states and 16016 transitions.
[2020-05-30 20:00:27,948 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10988 states and 16016 transitions.
[2020-05-30 20:00:28,052 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10988 to 10988.
[2020-05-30 20:00:28,052 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10988 states.
[2020-05-30 20:00:28,070 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10988 states to 10988 states and 16016 transitions.
[2020-05-30 20:00:28,070 INFO  L751         BuchiCegarLoop]: Abstraction has 10988 states and 16016 transitions.
[2020-05-30 20:00:28,070 INFO  L631         BuchiCegarLoop]: Abstraction has 10988 states and 16016 transitions.
[2020-05-30 20:00:28,070 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-05-30 20:00:28,070 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10988 states and 16016 transitions.
[2020-05-30 20:00:28,081 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 20:00:28,081 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:00:28,081 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:00:28,083 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:00:28,083 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND FALSE  !(DType[this] == EPXCrowdsale)
[L1535]        COND TRUE   DType[this] == StandardToken
[L1537]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1537]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1538]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1845164479;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:00:28,100 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:00:28,100 INFO  L82        PathProgramCache]: Analyzing trace with hash -1436586960, now seen corresponding path program 1 times
[2020-05-30 20:00:28,101 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:00:28,118 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:00:28,210 INFO  L134       CoverageAnalysis]: Checked inductivity of 184 backedges. 13 proven. 7 refuted. 0 times theorem prover too weak. 164 trivial. 0 not checked.
[2020-05-30 20:00:28,211 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:00:28,211 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-05-30 20:00:28,211 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:00:28,211 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-30 20:00:28,211 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-05-30 20:00:28,211 INFO  L87              Difference]: Start difference. First operand 10988 states and 16016 transitions. cyclomatic complexity: 5034 Second operand 7 states.
[2020-05-30 20:00:28,397 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:00:28,397 INFO  L93              Difference]: Finished difference Result 11083 states and 16140 transitions.
[2020-05-30 20:00:28,397 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-30 20:00:28,397 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11083 states and 16140 transitions.
[2020-05-30 20:00:28,420 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 20:00:28,448 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11083 states to 10938 states and 15926 transitions.
[2020-05-30 20:00:28,448 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 42
[2020-05-30 20:00:28,449 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 42
[2020-05-30 20:00:28,449 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10938 states and 15926 transitions.
[2020-05-30 20:00:28,456 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:00:28,456 INFO  L728         BuchiCegarLoop]: Abstraction has 10938 states and 15926 transitions.
[2020-05-30 20:00:28,462 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10938 states and 15926 transitions.
[2020-05-30 20:00:28,516 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10938 to 10938.
[2020-05-30 20:00:28,516 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10938 states.
[2020-05-30 20:00:28,534 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10938 states to 10938 states and 15926 transitions.
[2020-05-30 20:00:28,534 INFO  L751         BuchiCegarLoop]: Abstraction has 10938 states and 15926 transitions.
[2020-05-30 20:00:28,534 INFO  L631         BuchiCegarLoop]: Abstraction has 10938 states and 15926 transitions.
[2020-05-30 20:00:28,534 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-05-30 20:00:28,535 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10938 states and 15926 transitions.
[2020-05-30 20:00:28,546 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 20:00:28,546 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:00:28,546 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:00:28,547 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:00:28,547 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1845164479;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:00:28,551 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:00:28,551 INFO  L82        PathProgramCache]: Analyzing trace with hash 719912330, now seen corresponding path program 1 times
[2020-05-30 20:00:28,552 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:00:28,600 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:00:28,666 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:00:28,853 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:00:28,854 INFO  L82        PathProgramCache]: Analyzing trace with hash -1103898611, now seen corresponding path program 1 times
[2020-05-30 20:00:28,854 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:00:28,860 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:00:28,883 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-30 20:00:28,883 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:00:28,883 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-05-30 20:00:28,884 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-05-30 20:00:28,884 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-05-30 20:00:28,884 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=22, Invalid=50, Unknown=0, NotChecked=0, Total=72
[2020-05-30 20:00:28,884 INFO  L87              Difference]: Start difference. First operand 10938 states and 15926 transitions. cyclomatic complexity: 4994 Second operand 9 states.
[2020-05-30 20:00:31,456 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:00:31,456 INFO  L93              Difference]: Finished difference Result 12322 states and 18104 transitions.
[2020-05-30 20:00:31,456 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-05-30 20:00:31,456 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12322 states and 18104 transitions.
[2020-05-30 20:00:31,511 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 28
[2020-05-30 20:00:31,551 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12322 states to 12148 states and 17859 transitions.
[2020-05-30 20:00:31,551 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 52
[2020-05-30 20:00:31,552 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 52
[2020-05-30 20:00:31,552 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12148 states and 17859 transitions.
[2020-05-30 20:00:31,562 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:00:31,562 INFO  L728         BuchiCegarLoop]: Abstraction has 12148 states and 17859 transitions.
[2020-05-30 20:00:31,570 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12148 states and 17859 transitions.
[2020-05-30 20:00:31,634 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12148 to 10938.
[2020-05-30 20:00:31,634 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10938 states.
[2020-05-30 20:00:31,653 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10938 states to 10938 states and 15916 transitions.
[2020-05-30 20:00:31,653 INFO  L751         BuchiCegarLoop]: Abstraction has 10938 states and 15916 transitions.
[2020-05-30 20:00:31,653 INFO  L631         BuchiCegarLoop]: Abstraction has 10938 states and 15916 transitions.
[2020-05-30 20:00:31,653 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-05-30 20:00:31,653 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10938 states and 15916 transitions.
[2020-05-30 20:00:31,665 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 20:00:31,665 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:00:31,665 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:00:31,667 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:00:31,667 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1845164479;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND TRUE   DType[to] == EPXCrowdsale
[L3111]        CALL        call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L2307]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2308]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2309]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2310]                    gas := gas - 4;
[L2311]        CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L2311]        RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2312]        COND FALSE  !(revert)
[L3111]        RET         call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L3112]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:00:31,671 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:00:31,672 INFO  L82        PathProgramCache]: Analyzing trace with hash 719912330, now seen corresponding path program 2 times
[2020-05-30 20:00:31,672 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:00:31,702 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:00:31,734 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:00:31,804 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:00:31,804 INFO  L82        PathProgramCache]: Analyzing trace with hash 1931793787, now seen corresponding path program 1 times
[2020-05-30 20:00:31,805 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:00:31,813 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:00:31,894 INFO  L134       CoverageAnalysis]: Checked inductivity of 46 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 46 trivial. 0 not checked.
[2020-05-30 20:00:31,894 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:00:31,894 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [32] imperfect sequences [] total 32
[2020-05-30 20:00:31,895 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-05-30 20:00:31,895 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-05-30 20:00:31,895 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=412, Invalid=580, Unknown=0, NotChecked=0, Total=992
[2020-05-30 20:00:31,895 INFO  L87              Difference]: Start difference. First operand 10938 states and 15916 transitions. cyclomatic complexity: 4984 Second operand 32 states.
[2020-05-30 20:00:42,604 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:00:42,604 INFO  L93              Difference]: Finished difference Result 15347 states and 22632 transitions.
[2020-05-30 20:00:42,604 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 59 states. 
[2020-05-30 20:00:42,604 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 15347 states and 22632 transitions.
[2020-05-30 20:00:42,647 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 28
[2020-05-30 20:00:42,694 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 15347 states to 14274 states and 21118 transitions.
[2020-05-30 20:00:42,695 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 46
[2020-05-30 20:00:42,695 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 46
[2020-05-30 20:00:42,695 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 14274 states and 21118 transitions.
[2020-05-30 20:00:42,707 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:00:42,707 INFO  L728         BuchiCegarLoop]: Abstraction has 14274 states and 21118 transitions.
[2020-05-30 20:00:42,715 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 14274 states and 21118 transitions.
[2020-05-30 20:00:42,789 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 14274 to 11654.
[2020-05-30 20:00:42,789 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11654 states.
[2020-05-30 20:00:42,805 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11654 states to 11654 states and 16973 transitions.
[2020-05-30 20:00:42,805 INFO  L751         BuchiCegarLoop]: Abstraction has 11654 states and 16973 transitions.
[2020-05-30 20:00:42,805 INFO  L631         BuchiCegarLoop]: Abstraction has 11654 states and 16973 transitions.
[2020-05-30 20:00:42,806 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-05-30 20:00:42,806 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11654 states and 16973 transitions.
[2020-05-30 20:00:42,817 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 20:00:42,817 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:00:42,817 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:00:42,818 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:00:42,818 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND FALSE  !(DType[this] == EPXCrowdsale)
[L1645]        COND FALSE  !(DType[this] == StandardToken)
[L1653]        COND TRUE   DType[this] == safeMath
[L1655]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1655]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1656]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1845164479;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:00:42,822 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:00:42,822 INFO  L82        PathProgramCache]: Analyzing trace with hash -911885358, now seen corresponding path program 1 times
[2020-05-30 20:00:42,823 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:00:42,839 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:00:42,926 INFO  L134       CoverageAnalysis]: Checked inductivity of 180 backedges. 18 proven. 7 refuted. 0 times theorem prover too weak. 155 trivial. 0 not checked.
[2020-05-30 20:00:42,927 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:00:42,927 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-05-30 20:00:42,927 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:00:42,927 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-30 20:00:42,927 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-05-30 20:00:42,928 INFO  L87              Difference]: Start difference. First operand 11654 states and 16973 transitions. cyclomatic complexity: 5325 Second operand 7 states.
[2020-05-30 20:00:43,506 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:00:43,506 INFO  L93              Difference]: Finished difference Result 11818 states and 17189 transitions.
[2020-05-30 20:00:43,506 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-05-30 20:00:43,507 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11818 states and 17189 transitions.
[2020-05-30 20:00:43,539 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 20:00:43,574 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11818 states to 11579 states and 16848 transitions.
[2020-05-30 20:00:43,574 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 36
[2020-05-30 20:00:43,575 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 36
[2020-05-30 20:00:43,575 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11579 states and 16848 transitions.
[2020-05-30 20:00:43,583 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:00:43,584 INFO  L728         BuchiCegarLoop]: Abstraction has 11579 states and 16848 transitions.
[2020-05-30 20:00:43,590 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11579 states and 16848 transitions.
[2020-05-30 20:00:43,648 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11579 to 11579.
[2020-05-30 20:00:43,649 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11579 states.
[2020-05-30 20:00:43,668 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11579 states to 11579 states and 16848 transitions.
[2020-05-30 20:00:43,668 INFO  L751         BuchiCegarLoop]: Abstraction has 11579 states and 16848 transitions.
[2020-05-30 20:00:43,668 INFO  L631         BuchiCegarLoop]: Abstraction has 11579 states and 16848 transitions.
[2020-05-30 20:00:43,668 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-05-30 20:00:43,668 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11579 states and 16848 transitions.
[2020-05-30 20:00:43,680 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 20:00:43,680 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:00:43,681 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:00:43,682 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:00:43,682 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1845164479;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:00:43,686 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:00:43,686 INFO  L82        PathProgramCache]: Analyzing trace with hash 719912330, now seen corresponding path program 3 times
[2020-05-30 20:00:43,686 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:00:43,714 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:00:43,744 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:00:43,810 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:00:43,810 INFO  L82        PathProgramCache]: Analyzing trace with hash 1950879131, now seen corresponding path program 1 times
[2020-05-30 20:00:43,811 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:00:43,815 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:00:43,821 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:00:43,830 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:00:43,831 INFO  L82        PathProgramCache]: Analyzing trace with hash -2042373902, now seen corresponding path program 1 times
[2020-05-30 20:00:43,831 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:00:43,860 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:00:44,392 INFO  L134       CoverageAnalysis]: Checked inductivity of 188 backedges. 59 proven. 54 refuted. 0 times theorem prover too weak. 75 trivial. 0 not checked.
[2020-05-30 20:00:44,392 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:00:44,393 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [35] total 35
[2020-05-30 20:00:44,393 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 36 interpolants.
[2020-05-30 20:00:44,393 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=98, Invalid=1162, Unknown=0, NotChecked=0, Total=1260
[2020-05-30 20:00:44,394 INFO  L87              Difference]: Start difference. First operand 11579 states and 16848 transitions. cyclomatic complexity: 5275 Second operand 36 states.
[2020-05-30 20:01:07,535 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:01:07,535 INFO  L93              Difference]: Finished difference Result 16122 states and 24363 transitions.
[2020-05-30 20:01:07,535 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 49 states. 
[2020-05-30 20:01:07,535 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 16122 states and 24363 transitions.
[2020-05-30 20:01:07,587 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 82
[2020-05-30 20:01:07,652 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 16122 states to 16122 states and 24363 transitions.
[2020-05-30 20:01:07,652 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 130
[2020-05-30 20:01:07,652 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 130
[2020-05-30 20:01:07,652 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 16122 states and 24363 transitions.
[2020-05-30 20:01:07,670 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:01:07,670 INFO  L728         BuchiCegarLoop]: Abstraction has 16122 states and 24363 transitions.
[2020-05-30 20:01:07,678 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 16122 states and 24363 transitions.
[2020-05-30 20:01:07,777 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 16122 to 15853.
[2020-05-30 20:01:07,777 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 15853 states.
[2020-05-30 20:01:07,811 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 15853 states to 15853 states and 23731 transitions.
[2020-05-30 20:01:07,811 INFO  L751         BuchiCegarLoop]: Abstraction has 15853 states and 23731 transitions.
[2020-05-30 20:01:07,811 INFO  L631         BuchiCegarLoop]: Abstraction has 15853 states and 23731 transitions.
[2020-05-30 20:01:07,811 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-05-30 20:01:07,811 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 15853 states and 23731 transitions.
[2020-05-30 20:01:07,828 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 60
[2020-05-30 20:01:07,828 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:01:07,828 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:01:07,831 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:01:07,832 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1845164479;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1845164479;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:01:07,838 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:01:07,838 INFO  L82        PathProgramCache]: Analyzing trace with hash -1024117130, now seen corresponding path program 1 times
[2020-05-30 20:01:07,839 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:01:07,855 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:01:07,971 INFO  L134       CoverageAnalysis]: Checked inductivity of 307 backedges. 3 proven. 118 refuted. 0 times theorem prover too weak. 186 trivial. 0 not checked.
[2020-05-30 20:01:07,971 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:01:07,971 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-05-30 20:01:07,971 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:01:07,971 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-30 20:01:07,972 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-05-30 20:01:07,972 INFO  L87              Difference]: Start difference. First operand 15853 states and 23731 transitions. cyclomatic complexity: 7887 Second operand 10 states.
[2020-05-30 20:01:12,748 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:01:12,748 INFO  L93              Difference]: Finished difference Result 16892 states and 25366 transitions.
[2020-05-30 20:01:12,748 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-05-30 20:01:12,748 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 16892 states and 25366 transitions.
[2020-05-30 20:01:12,790 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 60
[2020-05-30 20:01:12,853 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 16892 states to 16892 states and 25366 transitions.
[2020-05-30 20:01:12,853 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 144
[2020-05-30 20:01:12,854 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 144
[2020-05-30 20:01:12,854 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 16892 states and 25366 transitions.
[2020-05-30 20:01:12,871 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:01:12,871 INFO  L728         BuchiCegarLoop]: Abstraction has 16892 states and 25366 transitions.
[2020-05-30 20:01:12,880 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 16892 states and 25366 transitions.
[2020-05-30 20:01:12,984 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 16892 to 15986.
[2020-05-30 20:01:12,984 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 15986 states.
[2020-05-30 20:01:13,018 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 15986 states to 15986 states and 23939 transitions.
[2020-05-30 20:01:13,018 INFO  L751         BuchiCegarLoop]: Abstraction has 15986 states and 23939 transitions.
[2020-05-30 20:01:13,018 INFO  L631         BuchiCegarLoop]: Abstraction has 15986 states and 23939 transitions.
[2020-05-30 20:01:13,018 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-05-30 20:01:13,018 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 15986 states and 23939 transitions.
[2020-05-30 20:01:13,037 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 60
[2020-05-30 20:01:13,037 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:01:13,037 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:01:13,039 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:01:13,039 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1845164479;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND FALSE  !(choice == 1)
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:01:13,045 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:01:13,046 INFO  L82        PathProgramCache]: Analyzing trace with hash 18927970, now seen corresponding path program 1 times
[2020-05-30 20:01:13,046 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:01:13,075 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:01:13,246 INFO  L134       CoverageAnalysis]: Checked inductivity of 482 backedges. 39 proven. 143 refuted. 0 times theorem prover too weak. 300 trivial. 0 not checked.
[2020-05-30 20:01:13,246 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:01:13,247 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-05-30 20:01:13,247 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:01:13,247 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-30 20:01:13,247 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-05-30 20:01:13,247 INFO  L87              Difference]: Start difference. First operand 15986 states and 23939 transitions. cyclomatic complexity: 7962 Second operand 10 states.
[2020-05-30 20:01:19,104 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:01:19,104 INFO  L93              Difference]: Finished difference Result 21451 states and 32537 transitions.
[2020-05-30 20:01:19,105 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 20:01:19,105 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21451 states and 32537 transitions.
[2020-05-30 20:01:19,161 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 96
[2020-05-30 20:01:19,250 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21451 states to 21451 states and 32537 transitions.
[2020-05-30 20:01:19,250 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 215
[2020-05-30 20:01:19,250 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 215
[2020-05-30 20:01:19,250 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21451 states and 32537 transitions.
[2020-05-30 20:01:19,274 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:01:19,274 INFO  L728         BuchiCegarLoop]: Abstraction has 21451 states and 32537 transitions.
[2020-05-30 20:01:19,284 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21451 states and 32537 transitions.
[2020-05-30 20:01:19,415 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21451 to 20939.
[2020-05-30 20:01:19,415 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20939 states.
[2020-05-30 20:01:19,463 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20939 states to 20939 states and 31773 transitions.
[2020-05-30 20:01:19,463 INFO  L751         BuchiCegarLoop]: Abstraction has 20939 states and 31773 transitions.
[2020-05-30 20:01:19,463 INFO  L631         BuchiCegarLoop]: Abstraction has 20939 states and 31773 transitions.
[2020-05-30 20:01:19,463 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-05-30 20:01:19,463 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20939 states and 31773 transitions.
[2020-05-30 20:01:19,486 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 96
[2020-05-30 20:01:19,486 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:01:19,486 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:01:19,489 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:01:19,489 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1845164479;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1845164479;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:01:19,496 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:01:19,496 INFO  L82        PathProgramCache]: Analyzing trace with hash -2130426720, now seen corresponding path program 1 times
[2020-05-30 20:01:19,496 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:01:19,520 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:01:19,629 INFO  L134       CoverageAnalysis]: Checked inductivity of 297 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 272 trivial. 0 not checked.
[2020-05-30 20:01:19,629 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 20:01:19,629 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-05-30 20:01:19,629 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:01:19,629 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-05-30 20:01:19,630 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=10, Invalid=20, Unknown=0, NotChecked=0, Total=30
[2020-05-30 20:01:19,630 INFO  L87              Difference]: Start difference. First operand 20939 states and 31773 transitions. cyclomatic complexity: 10843 Second operand 6 states.
[2020-05-30 20:01:20,040 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:01:20,041 INFO  L93              Difference]: Finished difference Result 20957 states and 31662 transitions.
[2020-05-30 20:01:20,041 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-05-30 20:01:20,041 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 20957 states and 31662 transitions.
[2020-05-30 20:01:20,109 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 96
[2020-05-30 20:01:20,204 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 20957 states to 20957 states and 31662 transitions.
[2020-05-30 20:01:20,204 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 200
[2020-05-30 20:01:20,204 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 200
[2020-05-30 20:01:20,204 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 20957 states and 31662 transitions.
[2020-05-30 20:01:20,228 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:01:20,228 INFO  L728         BuchiCegarLoop]: Abstraction has 20957 states and 31662 transitions.
[2020-05-30 20:01:20,239 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 20957 states and 31662 transitions.
[2020-05-30 20:01:20,375 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 20957 to 20939.
[2020-05-30 20:01:20,376 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20939 states.
[2020-05-30 20:01:20,426 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20939 states to 20939 states and 31644 transitions.
[2020-05-30 20:01:20,426 INFO  L751         BuchiCegarLoop]: Abstraction has 20939 states and 31644 transitions.
[2020-05-30 20:01:20,426 INFO  L631         BuchiCegarLoop]: Abstraction has 20939 states and 31644 transitions.
[2020-05-30 20:01:20,426 INFO  L445         BuchiCegarLoop]: ======== Iteration 25============
[2020-05-30 20:01:20,426 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20939 states and 31644 transitions.
[2020-05-30 20:01:20,453 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 96
[2020-05-30 20:01:20,453 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:01:20,453 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:01:20,456 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:01:20,456 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := 855885808;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1845164479;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1845164479;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:01:20,464 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:01:20,464 INFO  L82        PathProgramCache]: Analyzing trace with hash 1753875752, now seen corresponding path program 1 times
[2020-05-30 20:01:20,465 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:01:20,487 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:01:20,633 INFO  L134       CoverageAnalysis]: Checked inductivity of 517 backedges. 94 proven. 113 refuted. 0 times theorem prover too weak. 310 trivial. 0 not checked.
[2020-05-30 20:01:20,633 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:01:20,633 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-05-30 20:01:20,634 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:01:20,634 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-30 20:01:20,634 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-05-30 20:01:20,634 INFO  L87              Difference]: Start difference. First operand 20939 states and 31644 transitions. cyclomatic complexity: 10714 Second operand 10 states.
[2020-05-30 20:01:27,327 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:01:27,327 INFO  L93              Difference]: Finished difference Result 26801 states and 41229 transitions.
[2020-05-30 20:01:27,327 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 20:01:27,327 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 26801 states and 41229 transitions.
[2020-05-30 20:01:27,425 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 136
[2020-05-30 20:01:27,560 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 26801 states to 26801 states and 41229 transitions.
[2020-05-30 20:01:27,560 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 325
[2020-05-30 20:01:27,561 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 325
[2020-05-30 20:01:27,561 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 26801 states and 41229 transitions.
[2020-05-30 20:01:27,594 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:01:27,594 INFO  L728         BuchiCegarLoop]: Abstraction has 26801 states and 41229 transitions.
[2020-05-30 20:01:27,607 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 26801 states and 41229 transitions.
[2020-05-30 20:01:27,790 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 26801 to 25715.
[2020-05-30 20:01:27,790 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 25715 states.
[2020-05-30 20:01:27,857 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 25715 states to 25715 states and 39613 transitions.
[2020-05-30 20:01:27,857 INFO  L751         BuchiCegarLoop]: Abstraction has 25715 states and 39613 transitions.
[2020-05-30 20:01:27,857 INFO  L631         BuchiCegarLoop]: Abstraction has 25715 states and 39613 transitions.
[2020-05-30 20:01:27,857 INFO  L445         BuchiCegarLoop]: ======== Iteration 26============
[2020-05-30 20:01:27,857 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 25715 states and 39613 transitions.
[2020-05-30 20:01:27,891 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 136
[2020-05-30 20:01:27,891 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:01:27,891 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:01:27,895 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:01:27,895 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -693742297;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0)
[L2913]                    gas := gas - 876;
[L2914]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2915]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2916]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2917]                    assume now >= 0;
[L2918]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2919-L2921]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0 && now <= fundingEndBlock_EPXCrowdsale[this]
[L2923]                    gas := gas - 20317;
[L2924]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2925]                    gas := gas - 20267;
[L2926]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2927]                    gas := gas - 409;
[L2928]                    CurrentStatus_EPXCrowdsale[this] := 1473178401;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0)
[L2913]                    gas := gas - 876;
[L2914]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2915]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2916]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2917]                    assume now >= 0;
[L2918]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2919-L2921]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0 && now <= fundingEndBlock_EPXCrowdsale[this]
[L2923]                    gas := gas - 20317;
[L2924]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2925]                    gas := gas - 20267;
[L2926]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2927]                    gas := gas - 409;
[L2928]                    CurrentStatus_EPXCrowdsale[this] := 1473178401;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:01:27,902 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:01:27,902 INFO  L82        PathProgramCache]: Analyzing trace with hash -2085039813, now seen corresponding path program 1 times
[2020-05-30 20:01:27,903 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:01:27,925 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:01:28,130 INFO  L134       CoverageAnalysis]: Checked inductivity of 529 backedges. 10 proven. 258 refuted. 0 times theorem prover too weak. 261 trivial. 0 not checked.
[2020-05-30 20:01:28,130 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:01:28,130 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 20:01:28,131 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:01:28,131 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 20:01:28,131 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=107, Unknown=0, NotChecked=0, Total=132
[2020-05-30 20:01:28,131 INFO  L87              Difference]: Start difference. First operand 25715 states and 39613 transitions. cyclomatic complexity: 13907 Second operand 12 states.
[2020-05-30 20:01:32,961 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:01:32,961 INFO  L93              Difference]: Finished difference Result 26213 states and 40368 transitions.
[2020-05-30 20:01:32,961 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-05-30 20:01:32,961 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 26213 states and 40368 transitions.
[2020-05-30 20:01:33,065 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 136
[2020-05-30 20:01:33,206 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 26213 states to 26213 states and 40368 transitions.
[2020-05-30 20:01:33,206 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 304
[2020-05-30 20:01:33,206 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 304
[2020-05-30 20:01:33,206 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 26213 states and 40368 transitions.
[2020-05-30 20:01:33,240 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:01:33,240 INFO  L728         BuchiCegarLoop]: Abstraction has 26213 states and 40368 transitions.
[2020-05-30 20:01:33,253 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 26213 states and 40368 transitions.
[2020-05-30 20:01:33,434 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 26213 to 25766.
[2020-05-30 20:01:33,434 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 25766 states.
[2020-05-30 20:01:33,505 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 25766 states to 25766 states and 39726 transitions.
[2020-05-30 20:01:33,505 INFO  L751         BuchiCegarLoop]: Abstraction has 25766 states and 39726 transitions.
[2020-05-30 20:01:33,506 INFO  L631         BuchiCegarLoop]: Abstraction has 25766 states and 39726 transitions.
[2020-05-30 20:01:33,506 INFO  L445         BuchiCegarLoop]: ======== Iteration 27============
[2020-05-30 20:01:33,506 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 25766 states and 39726 transitions.
[2020-05-30 20:01:33,537 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 136
[2020-05-30 20:01:33,538 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:01:33,538 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:01:33,540 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:01:33,540 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1845164479;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1845164479;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:01:33,546 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:01:33,547 INFO  L82        PathProgramCache]: Analyzing trace with hash 783393286, now seen corresponding path program 1 times
[2020-05-30 20:01:33,547 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:01:33,580 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:01:34,048 INFO  L134       CoverageAnalysis]: Checked inductivity of 297 backedges. 28 proven. 34 refuted. 0 times theorem prover too weak. 235 trivial. 0 not checked.
[2020-05-30 20:01:34,048 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:01:34,048 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [27] total 27
[2020-05-30 20:01:34,049 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:01:34,049 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 28 interpolants.
[2020-05-30 20:01:34,049 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=86, Invalid=670, Unknown=0, NotChecked=0, Total=756
[2020-05-30 20:01:34,049 INFO  L87              Difference]: Start difference. First operand 25766 states and 39726 transitions. cyclomatic complexity: 13972 Second operand 28 states.
[2020-05-30 20:02:07,675 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:02:07,675 INFO  L93              Difference]: Finished difference Result 53050 states and 79708 transitions.
[2020-05-30 20:02:07,676 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 53 states. 
[2020-05-30 20:02:07,676 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 53050 states and 79708 transitions.
[2020-05-30 20:02:07,867 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 166
[2020-05-30 20:02:08,144 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 53050 states to 51449 states and 77663 transitions.
[2020-05-30 20:02:08,144 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 421
[2020-05-30 20:02:08,145 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 421
[2020-05-30 20:02:08,145 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 51449 states and 77663 transitions.
[2020-05-30 20:02:08,208 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:02:08,208 INFO  L728         BuchiCegarLoop]: Abstraction has 51449 states and 77663 transitions.
[2020-05-30 20:02:08,231 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 51449 states and 77663 transitions.
[2020-05-30 20:02:08,629 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 51449 to 49104.
[2020-05-30 20:02:08,629 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 49104 states.
[2020-05-30 20:02:08,749 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 49104 states to 49104 states and 74118 transitions.
[2020-05-30 20:02:08,749 INFO  L751         BuchiCegarLoop]: Abstraction has 49104 states and 74118 transitions.
[2020-05-30 20:02:08,750 INFO  L631         BuchiCegarLoop]: Abstraction has 49104 states and 74118 transitions.
[2020-05-30 20:02:08,750 INFO  L445         BuchiCegarLoop]: ======== Iteration 28============
[2020-05-30 20:02:08,750 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 49104 states and 74118 transitions.
[2020-05-30 20:02:08,812 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 160
[2020-05-30 20:02:08,812 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:02:08,812 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:02:08,816 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:02:08,816 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -693742297;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1845164479;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1845164479;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:02:08,823 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:02:08,824 INFO  L82        PathProgramCache]: Analyzing trace with hash 1110273383, now seen corresponding path program 1 times
[2020-05-30 20:02:08,824 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:02:08,852 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:02:09,112 INFO  L134       CoverageAnalysis]: Checked inductivity of 529 backedges. 89 proven. 26 refuted. 0 times theorem prover too weak. 414 trivial. 0 not checked.
[2020-05-30 20:02:09,112 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:02:09,112 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-30 20:02:09,113 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:02:09,113 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 20:02:09,113 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=35, Invalid=75, Unknown=0, NotChecked=0, Total=110
[2020-05-30 20:02:09,113 INFO  L87              Difference]: Start difference. First operand 49104 states and 74118 transitions. cyclomatic complexity: 25042 Second operand 11 states.
[2020-05-30 20:02:15,575 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:02:15,575 INFO  L93              Difference]: Finished difference Result 56106 states and 88729 transitions.
[2020-05-30 20:02:15,575 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-30 20:02:15,576 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 56106 states and 88729 transitions.
[2020-05-30 20:02:15,830 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 288
[2020-05-30 20:02:16,209 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 56106 states to 55656 states and 87963 transitions.
[2020-05-30 20:02:16,209 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 512
[2020-05-30 20:02:16,210 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 512
[2020-05-30 20:02:16,210 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 55656 states and 87963 transitions.
[2020-05-30 20:02:16,288 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:02:16,288 INFO  L728         BuchiCegarLoop]: Abstraction has 55656 states and 87963 transitions.
[2020-05-30 20:02:16,315 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 55656 states and 87963 transitions.
[2020-05-30 20:02:16,788 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 55656 to 49104.
[2020-05-30 20:02:16,788 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 49104 states.
[2020-05-30 20:02:16,908 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 49104 states to 49104 states and 74086 transitions.
[2020-05-30 20:02:16,909 INFO  L751         BuchiCegarLoop]: Abstraction has 49104 states and 74086 transitions.
[2020-05-30 20:02:16,909 INFO  L631         BuchiCegarLoop]: Abstraction has 49104 states and 74086 transitions.
[2020-05-30 20:02:16,909 INFO  L445         BuchiCegarLoop]: ======== Iteration 29============
[2020-05-30 20:02:16,909 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 49104 states and 74086 transitions.
[2020-05-30 20:02:16,971 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 160
[2020-05-30 20:02:16,971 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:02:16,971 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:02:16,975 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:02:16,975 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -693742297;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND FALSE  !(Balance[from] >= amount)
[L3322]                    success := false;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1845164479;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1845164479;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:02:16,983 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:02:16,983 INFO  L82        PathProgramCache]: Analyzing trace with hash -967286732, now seen corresponding path program 1 times
[2020-05-30 20:02:16,983 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:02:17,016 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:02:17,190 INFO  L134       CoverageAnalysis]: Checked inductivity of 726 backedges. 44 proven. 15 refuted. 0 times theorem prover too weak. 667 trivial. 0 not checked.
[2020-05-30 20:02:17,190 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:02:17,190 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [4] total 4
[2020-05-30 20:02:17,191 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:02:17,191 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 20:02:17,191 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-30 20:02:17,191 INFO  L87              Difference]: Start difference. First operand 49104 states and 74086 transitions. cyclomatic complexity: 25010 Second operand 4 states.
[2020-05-30 20:02:17,488 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:02:17,488 INFO  L93              Difference]: Finished difference Result 49140 states and 74109 transitions.
[2020-05-30 20:02:17,488 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-30 20:02:17,488 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 49140 states and 74109 transitions.
[2020-05-30 20:02:17,658 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 160
[2020-05-30 20:02:17,900 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 49140 states to 48715 states and 73458 transitions.
[2020-05-30 20:02:17,900 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 391
[2020-05-30 20:02:17,901 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 391
[2020-05-30 20:02:17,901 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 48715 states and 73458 transitions.
[2020-05-30 20:02:17,958 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:02:17,958 INFO  L728         BuchiCegarLoop]: Abstraction has 48715 states and 73458 transitions.
[2020-05-30 20:02:17,980 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 48715 states and 73458 transitions.
[2020-05-30 20:02:18,363 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 48715 to 48715.
[2020-05-30 20:02:18,363 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 48715 states.
[2020-05-30 20:02:18,491 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 48715 states to 48715 states and 73458 transitions.
[2020-05-30 20:02:18,491 INFO  L751         BuchiCegarLoop]: Abstraction has 48715 states and 73458 transitions.
[2020-05-30 20:02:18,491 INFO  L631         BuchiCegarLoop]: Abstraction has 48715 states and 73458 transitions.
[2020-05-30 20:02:18,491 INFO  L445         BuchiCegarLoop]: ======== Iteration 30============
[2020-05-30 20:02:18,492 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 48715 states and 73458 transitions.
[2020-05-30 20:02:18,557 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 160
[2020-05-30 20:02:18,557 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:02:18,557 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:02:18,561 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:02:18,561 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -693742297;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1845164479;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1845164479;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:02:18,569 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:02:18,569 INFO  L82        PathProgramCache]: Analyzing trace with hash -1096522839, now seen corresponding path program 1 times
[2020-05-30 20:02:18,569 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:02:18,602 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:02:18,941 INFO  L134       CoverageAnalysis]: Checked inductivity of 734 backedges. 44 proven. 19 refuted. 0 times theorem prover too weak. 671 trivial. 0 not checked.
[2020-05-30 20:02:18,941 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:02:18,941 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-05-30 20:02:18,942 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:02:18,942 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-30 20:02:18,942 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=12, Invalid=30, Unknown=0, NotChecked=0, Total=42
[2020-05-30 20:02:18,942 INFO  L87              Difference]: Start difference. First operand 48715 states and 73458 transitions. cyclomatic complexity: 24771 Second operand 7 states.
[2020-05-30 20:02:19,296 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:02:19,296 INFO  L93              Difference]: Finished difference Result 48504 states and 73000 transitions.
[2020-05-30 20:02:19,297 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-05-30 20:02:19,297 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 48504 states and 73000 transitions.
[2020-05-30 20:02:19,462 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 160
[2020-05-30 20:02:19,695 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 48504 states to 48454 states and 72896 transitions.
[2020-05-30 20:02:19,695 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 388
[2020-05-30 20:02:19,696 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 388
[2020-05-30 20:02:19,696 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 48454 states and 72896 transitions.
[2020-05-30 20:02:19,767 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:02:19,767 INFO  L728         BuchiCegarLoop]: Abstraction has 48454 states and 72896 transitions.
[2020-05-30 20:02:19,788 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 48454 states and 72896 transitions.
[2020-05-30 20:02:20,153 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 48454 to 48454.
[2020-05-30 20:02:20,153 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 48454 states.
[2020-05-30 20:02:20,264 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 48454 states to 48454 states and 72896 transitions.
[2020-05-30 20:02:20,264 INFO  L751         BuchiCegarLoop]: Abstraction has 48454 states and 72896 transitions.
[2020-05-30 20:02:20,264 INFO  L631         BuchiCegarLoop]: Abstraction has 48454 states and 72896 transitions.
[2020-05-30 20:02:20,264 INFO  L445         BuchiCegarLoop]: ======== Iteration 31============
[2020-05-30 20:02:20,264 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 48454 states and 72896 transitions.
[2020-05-30 20:02:20,319 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 160
[2020-05-30 20:02:20,319 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:02:20,320 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:02:20,321 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:02:20,321 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -693742297;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1845164479;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:02:20,326 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:02:20,326 INFO  L82        PathProgramCache]: Analyzing trace with hash -115444412, now seen corresponding path program 1 times
[2020-05-30 20:02:20,326 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:02:20,354 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:02:20,563 INFO  L134       CoverageAnalysis]: Checked inductivity of 529 backedges. 121 proven. 179 refuted. 0 times theorem prover too weak. 229 trivial. 0 not checked.
[2020-05-30 20:02:20,563 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:02:20,563 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [14] total 14
[2020-05-30 20:02:20,564 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:02:20,564 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-05-30 20:02:20,564 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=152, Unknown=0, NotChecked=0, Total=182
[2020-05-30 20:02:20,564 INFO  L87              Difference]: Start difference. First operand 48454 states and 72896 transitions. cyclomatic complexity: 24470 Second operand 14 states.
[2020-05-30 20:02:29,440 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:02:29,440 INFO  L93              Difference]: Finished difference Result 50936 states and 78955 transitions.
[2020-05-30 20:02:29,440 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-30 20:02:29,440 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 50936 states and 78955 transitions.
[2020-05-30 20:02:29,659 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 242
[2020-05-30 20:02:29,979 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 50936 states to 50936 states and 78923 transitions.
[2020-05-30 20:02:29,979 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 459
[2020-05-30 20:02:29,980 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 459
[2020-05-30 20:02:29,980 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 50936 states and 78923 transitions.
[2020-05-30 20:02:30,044 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:02:30,044 INFO  L728         BuchiCegarLoop]: Abstraction has 50936 states and 78923 transitions.
[2020-05-30 20:02:30,068 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 50936 states and 78923 transitions.
[2020-05-30 20:02:30,517 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 50936 to 49298.
[2020-05-30 20:02:30,517 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 49298 states.
[2020-05-30 20:02:30,678 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 49298 states to 49298 states and 76638 transitions.
[2020-05-30 20:02:30,678 INFO  L751         BuchiCegarLoop]: Abstraction has 49298 states and 76638 transitions.
[2020-05-30 20:02:30,678 INFO  L631         BuchiCegarLoop]: Abstraction has 49298 states and 76638 transitions.
[2020-05-30 20:02:30,678 INFO  L445         BuchiCegarLoop]: ======== Iteration 32============
[2020-05-30 20:02:30,678 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 49298 states and 76638 transitions.
[2020-05-30 20:02:30,750 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 242
[2020-05-30 20:02:30,750 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:02:30,750 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:02:30,753 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:02:30,753 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1845164479;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:02:30,759 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:02:30,760 INFO  L82        PathProgramCache]: Analyzing trace with hash 1034382581, now seen corresponding path program 1 times
[2020-05-30 20:02:30,760 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:02:30,793 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:02:31,081 INFO  L134       CoverageAnalysis]: Checked inductivity of 311 backedges. 22 proven. 3 refuted. 0 times theorem prover too weak. 286 trivial. 0 not checked.
[2020-05-30 20:02:31,081 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:02:31,081 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-05-30 20:02:31,082 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:02:31,082 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-30 20:02:31,082 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-30 20:02:31,082 INFO  L87              Difference]: Start difference. First operand 49298 states and 76638 transitions. cyclomatic complexity: 27373 Second operand 8 states.
[2020-05-30 20:02:38,346 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:02:38,346 INFO  L93              Difference]: Finished difference Result 74552 states and 116420 transitions.
[2020-05-30 20:02:38,346 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-30 20:02:38,347 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 74552 states and 116420 transitions.
[2020-05-30 20:02:38,698 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 438
[2020-05-30 20:02:39,210 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 74552 states to 74552 states and 116420 transitions.
[2020-05-30 20:02:39,211 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 739
[2020-05-30 20:02:39,212 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 739
[2020-05-30 20:02:39,212 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 74552 states and 116420 transitions.
[2020-05-30 20:02:39,315 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:02:39,315 INFO  L728         BuchiCegarLoop]: Abstraction has 74552 states and 116420 transitions.
[2020-05-30 20:02:39,352 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 74552 states and 116420 transitions.
[2020-05-30 20:02:40,047 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 74552 to 74534.
[2020-05-30 20:02:40,047 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 74534 states.
[2020-05-30 20:02:40,310 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 74534 states to 74534 states and 116402 transitions.
[2020-05-30 20:02:40,310 INFO  L751         BuchiCegarLoop]: Abstraction has 74534 states and 116402 transitions.
[2020-05-30 20:02:40,310 INFO  L631         BuchiCegarLoop]: Abstraction has 74534 states and 116402 transitions.
[2020-05-30 20:02:40,310 INFO  L445         BuchiCegarLoop]: ======== Iteration 33============
[2020-05-30 20:02:40,310 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 74534 states and 116402 transitions.
[2020-05-30 20:02:40,424 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 438
[2020-05-30 20:02:40,425 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:02:40,425 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:02:40,427 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:02:40,427 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1845164479;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1845164479;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:02:40,432 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:02:40,433 INFO  L82        PathProgramCache]: Analyzing trace with hash -1091859265, now seen corresponding path program 1 times
[2020-05-30 20:02:40,433 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:02:40,466 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:02:40,888 INFO  L134       CoverageAnalysis]: Checked inductivity of 308 backedges. 164 proven. 42 refuted. 0 times theorem prover too weak. 102 trivial. 0 not checked.
[2020-05-30 20:02:40,888 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:02:40,889 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [18] total 18
[2020-05-30 20:02:40,889 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:02:40,889 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-05-30 20:02:40,889 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=41, Invalid=265, Unknown=0, NotChecked=0, Total=306
[2020-05-30 20:02:40,889 INFO  L87              Difference]: Start difference. First operand 74534 states and 116402 transitions. cyclomatic complexity: 41904 Second operand 18 states.
[2020-05-30 20:02:52,578 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:02:52,578 INFO  L93              Difference]: Finished difference Result 90769 states and 142081 transitions.
[2020-05-30 20:02:52,579 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-05-30 20:02:52,579 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 90769 states and 142081 transitions.
[2020-05-30 20:02:52,998 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 562
[2020-05-30 20:02:53,619 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 90769 states to 90463 states and 141674 transitions.
[2020-05-30 20:02:53,620 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 929
[2020-05-30 20:02:53,621 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 929
[2020-05-30 20:02:53,621 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 90463 states and 141674 transitions.
[2020-05-30 20:02:53,746 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:02:53,747 INFO  L728         BuchiCegarLoop]: Abstraction has 90463 states and 141674 transitions.
[2020-05-30 20:02:53,788 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 90463 states and 141674 transitions.
[2020-05-30 20:02:54,578 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 90463 to 88971.
[2020-05-30 20:02:54,578 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 88971 states.
[2020-05-30 20:02:54,880 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 88971 states to 88971 states and 139691 transitions.
[2020-05-30 20:02:54,880 INFO  L751         BuchiCegarLoop]: Abstraction has 88971 states and 139691 transitions.
[2020-05-30 20:02:54,880 INFO  L631         BuchiCegarLoop]: Abstraction has 88971 states and 139691 transitions.
[2020-05-30 20:02:54,881 INFO  L445         BuchiCegarLoop]: ======== Iteration 34============
[2020-05-30 20:02:54,881 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 88971 states and 139691 transitions.
[2020-05-30 20:02:55,013 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 562
[2020-05-30 20:02:55,014 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:02:55,014 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:02:55,015 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:02:55,015 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1845164479;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1845164479;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:02:55,019 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:02:55,019 INFO  L82        PathProgramCache]: Analyzing trace with hash 540053763, now seen corresponding path program 1 times
[2020-05-30 20:02:55,019 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:02:55,052 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:02:55,085 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:02:55,144 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:02:55,144 INFO  L82        PathProgramCache]: Analyzing trace with hash -1540665495, now seen corresponding path program 1 times
[2020-05-30 20:02:55,145 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:02:55,149 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:02:55,153 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:02:55,159 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:02:55,159 INFO  L82        PathProgramCache]: Analyzing trace with hash 784213611, now seen corresponding path program 1 times
[2020-05-30 20:02:55,159 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:02:55,181 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:02:55,301 INFO  L134       CoverageAnalysis]: Checked inductivity of 196 backedges. 14 proven. 4 refuted. 0 times theorem prover too weak. 178 trivial. 0 not checked.
[2020-05-30 20:02:55,301 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:02:55,301 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-05-30 20:02:55,301 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-05-30 20:02:55,302 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=55, Unknown=0, NotChecked=0, Total=72
[2020-05-30 20:02:55,302 INFO  L87              Difference]: Start difference. First operand 88971 states and 139691 transitions. cyclomatic complexity: 50762 Second operand 9 states.
[2020-05-30 20:02:58,265 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:02:58,265 INFO  L93              Difference]: Finished difference Result 70143 states and 93787 transitions.
[2020-05-30 20:02:58,265 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-05-30 20:02:58,266 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 70143 states and 93787 transitions.
[2020-05-30 20:02:58,502 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 288
[2020-05-30 20:02:58,852 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 70143 states to 69956 states and 93565 transitions.
[2020-05-30 20:02:58,852 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 208
[2020-05-30 20:02:58,852 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 208
[2020-05-30 20:02:58,852 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 69956 states and 93565 transitions.
[2020-05-30 20:02:58,925 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:02:58,925 INFO  L728         BuchiCegarLoop]: Abstraction has 69956 states and 93565 transitions.
[2020-05-30 20:02:58,958 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 69956 states and 93565 transitions.
[2020-05-30 20:02:59,462 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 69956 to 69178.
[2020-05-30 20:02:59,462 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 69178 states.
[2020-05-30 20:02:59,630 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 69178 states to 69178 states and 92572 transitions.
[2020-05-30 20:02:59,630 INFO  L751         BuchiCegarLoop]: Abstraction has 69178 states and 92572 transitions.
[2020-05-30 20:02:59,630 INFO  L631         BuchiCegarLoop]: Abstraction has 69178 states and 92572 transitions.
[2020-05-30 20:02:59,630 INFO  L445         BuchiCegarLoop]: ======== Iteration 35============
[2020-05-30 20:02:59,630 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 69178 states and 92572 transitions.
[2020-05-30 20:02:59,714 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 288
[2020-05-30 20:02:59,714 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:02:59,714 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:02:59,716 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:02:59,716 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0
[L2904]                    gas := gas - 20317;
[L2905]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2906]                    gas := gas - 20267;
[L2907]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2908]                    gas := gas - 409;
[L2909]                    CurrentStatus_EPXCrowdsale[this] := -896756104;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:02:59,720 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:02:59,720 INFO  L82        PathProgramCache]: Analyzing trace with hash -985730618, now seen corresponding path program 1 times
[2020-05-30 20:02:59,721 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:02:59,757 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:02:59,797 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:02:59,870 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:02:59,870 INFO  L82        PathProgramCache]: Analyzing trace with hash -1924946655, now seen corresponding path program 1 times
[2020-05-30 20:02:59,871 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:02:59,876 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:02:59,881 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:02:59,889 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:02:59,889 INFO  L82        PathProgramCache]: Analyzing trace with hash -1518319876, now seen corresponding path program 1 times
[2020-05-30 20:02:59,889 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:02:59,928 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:03:00,703 INFO  L134       CoverageAnalysis]: Checked inductivity of 322 backedges. 40 proven. 128 refuted. 0 times theorem prover too weak. 154 trivial. 0 not checked.
[2020-05-30 20:03:00,703 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:03:00,704 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [50] total 50
[2020-05-30 20:03:00,704 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 51 interpolants.
[2020-05-30 20:03:00,705 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=182, Invalid=2368, Unknown=0, NotChecked=0, Total=2550
[2020-05-30 20:03:00,705 INFO  L87              Difference]: Start difference. First operand 69178 states and 92572 transitions. cyclomatic complexity: 23432 Second operand 51 states.
[2020-05-30 20:03:53,384 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:03:53,384 INFO  L93              Difference]: Finished difference Result 72197 states and 97217 transitions.
[2020-05-30 20:03:53,384 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 91 states. 
[2020-05-30 20:03:53,384 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 72197 states and 97217 transitions.
[2020-05-30 20:03:53,634 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 288
[2020-05-30 20:03:54,017 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 72197 states to 72197 states and 97217 transitions.
[2020-05-30 20:03:54,017 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 208
[2020-05-30 20:03:54,017 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 208
[2020-05-30 20:03:54,018 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 72197 states and 97217 transitions.
[2020-05-30 20:03:54,097 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:03:54,097 INFO  L728         BuchiCegarLoop]: Abstraction has 72197 states and 97217 transitions.
[2020-05-30 20:03:54,128 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 72197 states and 97217 transitions.
[2020-05-30 20:03:54,650 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 72197 to 69370.
[2020-05-30 20:03:54,650 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 69370 states.
[2020-05-30 20:03:54,824 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 69370 states to 69370 states and 93416 transitions.
[2020-05-30 20:03:54,824 INFO  L751         BuchiCegarLoop]: Abstraction has 69370 states and 93416 transitions.
[2020-05-30 20:03:54,824 INFO  L631         BuchiCegarLoop]: Abstraction has 69370 states and 93416 transitions.
[2020-05-30 20:03:54,825 INFO  L445         BuchiCegarLoop]: ======== Iteration 36============
[2020-05-30 20:03:54,825 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 69370 states and 93416 transitions.
[2020-05-30 20:03:54,909 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 288
[2020-05-30 20:03:54,910 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:03:54,910 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:03:54,913 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:03:54,913 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := 855885808;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -693742297;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1845164479;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND TRUE   DType[to] == safeMath
[L3123]                    assume amount == 0;
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND TRUE   DType[to] == safeMath
[L3123]                    assume amount == 0;
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:03:54,918 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:03:54,919 INFO  L82        PathProgramCache]: Analyzing trace with hash 96166017, now seen corresponding path program 1 times
[2020-05-30 20:03:54,919 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:03:54,957 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:03:55,194 INFO  L134       CoverageAnalysis]: Checked inductivity of 1064 backedges. 58 proven. 19 refuted. 0 times theorem prover too weak. 987 trivial. 0 not checked.
[2020-05-30 20:03:55,194 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:03:55,194 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-05-30 20:03:55,194 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:03:55,195 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-30 20:03:55,195 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-30 20:03:55,195 INFO  L87              Difference]: Start difference. First operand 69370 states and 93416 transitions. cyclomatic complexity: 24102 Second operand 8 states.
[2020-05-30 20:04:01,504 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:04:01,504 INFO  L93              Difference]: Finished difference Result 90401 states and 119886 transitions.
[2020-05-30 20:04:01,505 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-30 20:04:01,505 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 90401 states and 119886 transitions.
[2020-05-30 20:04:01,973 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 424
[2020-05-30 20:04:02,377 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 90401 states to 90401 states and 119886 transitions.
[2020-05-30 20:04:02,378 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 258
[2020-05-30 20:04:02,378 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 258
[2020-05-30 20:04:02,378 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 90401 states and 119886 transitions.
[2020-05-30 20:04:02,473 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:04:02,473 INFO  L728         BuchiCegarLoop]: Abstraction has 90401 states and 119886 transitions.
[2020-05-30 20:04:02,509 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 90401 states and 119886 transitions.
[2020-05-30 20:04:03,166 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 90401 to 90251.
[2020-05-30 20:04:03,166 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 90251 states.
[2020-05-30 20:04:03,395 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 90251 states to 90251 states and 119468 transitions.
[2020-05-30 20:04:03,396 INFO  L751         BuchiCegarLoop]: Abstraction has 90251 states and 119468 transitions.
[2020-05-30 20:04:03,396 INFO  L631         BuchiCegarLoop]: Abstraction has 90251 states and 119468 transitions.
[2020-05-30 20:04:03,396 INFO  L445         BuchiCegarLoop]: ======== Iteration 37============
[2020-05-30 20:04:03,396 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 90251 states and 119468 transitions.
[2020-05-30 20:04:03,506 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 424
[2020-05-30 20:04:03,506 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:04:03,506 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:04:03,508 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:04:03,508 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := 855885808;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -693742297;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1845164479;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:04:03,531 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:04:03,532 INFO  L82        PathProgramCache]: Analyzing trace with hash -849240082, now seen corresponding path program 1 times
[2020-05-30 20:04:03,532 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:04:03,563 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:04:03,922 INFO  L134       CoverageAnalysis]: Checked inductivity of 818 backedges. 405 proven. 87 refuted. 0 times theorem prover too weak. 326 trivial. 0 not checked.
[2020-05-30 20:04:03,923 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:04:03,923 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [17] total 17
[2020-05-30 20:04:03,923 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:04:03,923 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-05-30 20:04:03,923 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=39, Invalid=267, Unknown=0, NotChecked=0, Total=306
[2020-05-30 20:04:03,923 INFO  L87              Difference]: Start difference. First operand 90251 states and 119468 transitions. cyclomatic complexity: 29276 Second operand 18 states.
[2020-05-30 20:04:11,456 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:04:11,456 INFO  L93              Difference]: Finished difference Result 101562 states and 134784 transitions.
[2020-05-30 20:04:11,456 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 23 states. 
[2020-05-30 20:04:11,457 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 101562 states and 134784 transitions.
[2020-05-30 20:04:11,855 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 492
[2020-05-30 20:04:12,450 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 101562 states to 101562 states and 134764 transitions.
[2020-05-30 20:04:12,451 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 286
[2020-05-30 20:04:12,451 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 286
[2020-05-30 20:04:12,451 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 101562 states and 134764 transitions.
[2020-05-30 20:04:12,564 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:04:12,564 INFO  L728         BuchiCegarLoop]: Abstraction has 101562 states and 134764 transitions.
[2020-05-30 20:04:12,612 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 101562 states and 134764 transitions.
[2020-05-30 20:04:13,395 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 101562 to 100603.
[2020-05-30 20:04:13,395 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 100603 states.
[2020-05-30 20:04:13,676 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 100603 states to 100603 states and 133523 transitions.
[2020-05-30 20:04:13,676 INFO  L751         BuchiCegarLoop]: Abstraction has 100603 states and 133523 transitions.
[2020-05-30 20:04:13,676 INFO  L631         BuchiCegarLoop]: Abstraction has 100603 states and 133523 transitions.
[2020-05-30 20:04:13,676 INFO  L445         BuchiCegarLoop]: ======== Iteration 38============
[2020-05-30 20:04:13,677 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 100603 states and 133523 transitions.
[2020-05-30 20:04:13,809 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 492
[2020-05-30 20:04:13,810 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:04:13,810 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:04:13,813 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:04:13,813 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := 855885808;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1845164479;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND TRUE   DType[to] == owned
[L3127]                    assume amount == 0;
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND TRUE   DType[to] == owned
[L3127]                    assume amount == 0;
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:04:13,821 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:04:13,821 INFO  L82        PathProgramCache]: Analyzing trace with hash 560270145, now seen corresponding path program 1 times
[2020-05-30 20:04:13,822 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:04:13,865 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:04:14,289 INFO  L134       CoverageAnalysis]: Checked inductivity of 1312 backedges. 65 proven. 9 refuted. 0 times theorem prover too weak. 1238 trivial. 0 not checked.
[2020-05-30 20:04:14,289 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:04:14,289 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-05-30 20:04:14,289 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:04:14,289 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-30 20:04:14,289 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-30 20:04:14,290 INFO  L87              Difference]: Start difference. First operand 100603 states and 133523 transitions. cyclomatic complexity: 32979 Second operand 8 states.
[2020-05-30 20:04:17,260 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:04:17,260 INFO  L93              Difference]: Finished difference Result 115262 states and 149833 transitions.
[2020-05-30 20:04:17,260 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-30 20:04:17,260 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 115262 states and 149833 transitions.
[2020-05-30 20:04:17,705 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 542
[2020-05-30 20:04:18,359 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 115262 states to 115262 states and 149833 transitions.
[2020-05-30 20:04:18,359 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 256
[2020-05-30 20:04:18,359 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 256
[2020-05-30 20:04:18,359 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 115262 states and 149833 transitions.
[2020-05-30 20:04:18,487 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:04:18,487 INFO  L728         BuchiCegarLoop]: Abstraction has 115262 states and 149833 transitions.
[2020-05-30 20:04:18,544 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 115262 states and 149833 transitions.
[2020-05-30 20:04:19,404 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 115262 to 115068.
[2020-05-30 20:04:19,404 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 115068 states.
[2020-05-30 20:04:19,707 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 115068 states to 115068 states and 149346 transitions.
[2020-05-30 20:04:19,708 INFO  L751         BuchiCegarLoop]: Abstraction has 115068 states and 149346 transitions.
[2020-05-30 20:04:19,708 INFO  L631         BuchiCegarLoop]: Abstraction has 115068 states and 149346 transitions.
[2020-05-30 20:04:19,708 INFO  L445         BuchiCegarLoop]: ======== Iteration 39============
[2020-05-30 20:04:19,708 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 115068 states and 149346 transitions.
[2020-05-30 20:04:19,854 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 542
[2020-05-30 20:04:19,855 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:04:19,855 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:04:19,858 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:04:19,858 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1845164479;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND FALSE  !(choice == 2)
[L3616]        COND TRUE   choice == 1
[L3618]                    gas := gas - 21000;
[L3619]        COND TRUE   gas >= 0
[L3621]                    assume msgvalue_MSG == 0;
[L3622]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3622]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:04:19,863 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:04:19,863 INFO  L82        PathProgramCache]: Analyzing trace with hash 956344745, now seen corresponding path program 1 times
[2020-05-30 20:04:19,864 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:04:19,898 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:04:20,466 INFO  L134       CoverageAnalysis]: Checked inductivity of 812 backedges. 350 proven. 86 refuted. 0 times theorem prover too weak. 376 trivial. 0 not checked.
[2020-05-30 20:04:20,467 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:04:20,467 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-05-30 20:04:20,467 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:04:20,467 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-05-30 20:04:20,467 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=71, Invalid=579, Unknown=0, NotChecked=0, Total=650
[2020-05-30 20:04:20,468 INFO  L87              Difference]: Start difference. First operand 115068 states and 149346 transitions. cyclomatic complexity: 34331 Second operand 26 states.
[2020-05-30 20:04:31,700 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:04:31,700 INFO  L93              Difference]: Finished difference Result 120931 states and 155485 transitions.
[2020-05-30 20:04:31,701 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 30 states. 
[2020-05-30 20:04:31,701 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 120931 states and 155485 transitions.
[2020-05-30 20:04:32,130 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 536
[2020-05-30 20:04:32,774 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 120931 states to 120931 states and 155470 transitions.
[2020-05-30 20:04:32,774 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 232
[2020-05-30 20:04:32,775 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 232
[2020-05-30 20:04:32,775 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 120931 states and 155470 transitions.
[2020-05-30 20:04:32,900 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:04:32,900 INFO  L728         BuchiCegarLoop]: Abstraction has 120931 states and 155470 transitions.
[2020-05-30 20:04:32,956 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 120931 states and 155470 transitions.
[2020-05-30 20:04:33,805 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 120931 to 120143.
[2020-05-30 20:04:33,805 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 120143 states.
[2020-05-30 20:04:34,115 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 120143 states to 120143 states and 154543 transitions.
[2020-05-30 20:04:34,116 INFO  L751         BuchiCegarLoop]: Abstraction has 120143 states and 154543 transitions.
[2020-05-30 20:04:34,116 INFO  L631         BuchiCegarLoop]: Abstraction has 120143 states and 154543 transitions.
[2020-05-30 20:04:34,116 INFO  L445         BuchiCegarLoop]: ======== Iteration 40============
[2020-05-30 20:04:34,116 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 120143 states and 154543 transitions.
[2020-05-30 20:04:34,266 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 536
[2020-05-30 20:04:34,267 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:04:34,267 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:04:34,270 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:04:34,270 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1845164479;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:04:34,275 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:04:34,276 INFO  L82        PathProgramCache]: Analyzing trace with hash 2037787052, now seen corresponding path program 2 times
[2020-05-30 20:04:34,276 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:04:34,314 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:04:34,566 INFO  L134       CoverageAnalysis]: Checked inductivity of 793 backedges. 253 proven. 76 refuted. 0 times theorem prover too weak. 464 trivial. 0 not checked.
[2020-05-30 20:04:34,566 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:04:34,566 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 20:04:34,567 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:04:34,567 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 20:04:34,567 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=24, Invalid=108, Unknown=0, NotChecked=0, Total=132
[2020-05-30 20:04:34,567 INFO  L87              Difference]: Start difference. First operand 120143 states and 154543 transitions. cyclomatic complexity: 34453 Second operand 12 states.
[2020-05-30 20:04:37,998 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:04:37,998 INFO  L93              Difference]: Finished difference Result 129368 states and 165172 transitions.
[2020-05-30 20:04:37,999 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-05-30 20:04:37,999 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 129368 states and 165172 transitions.
[2020-05-30 20:04:38,470 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 602
[2020-05-30 20:04:39,163 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 129368 states to 129056 states and 164844 transitions.
[2020-05-30 20:04:39,163 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 236
[2020-05-30 20:04:39,163 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 236
[2020-05-30 20:04:39,163 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 129056 states and 164844 transitions.
[2020-05-30 20:04:39,294 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:04:39,294 INFO  L728         BuchiCegarLoop]: Abstraction has 129056 states and 164844 transitions.
[2020-05-30 20:04:39,355 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 129056 states and 164844 transitions.
[2020-05-30 20:04:40,234 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 129056 to 123625.
[2020-05-30 20:04:40,234 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 123625 states.
[2020-05-30 20:04:40,536 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 123625 states to 123625 states and 157612 transitions.
[2020-05-30 20:04:40,536 INFO  L751         BuchiCegarLoop]: Abstraction has 123625 states and 157612 transitions.
[2020-05-30 20:04:40,536 INFO  L631         BuchiCegarLoop]: Abstraction has 123625 states and 157612 transitions.
[2020-05-30 20:04:40,536 INFO  L445         BuchiCegarLoop]: ======== Iteration 41============
[2020-05-30 20:04:40,536 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 123625 states and 157612 transitions.
[2020-05-30 20:04:40,690 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 534
[2020-05-30 20:04:40,690 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:04:40,690 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:04:40,692 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:04:40,692 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0)
[L2913]                    gas := gas - 876;
[L2914]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2915]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2916]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2917]                    assume now >= 0;
[L2918]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2919-L2921]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0 && now <= fundingEndBlock_EPXCrowdsale[this]
[L2923]                    gas := gas - 20317;
[L2924]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2925]                    gas := gas - 20267;
[L2926]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2927]                    gas := gas - 409;
[L2928]                    CurrentStatus_EPXCrowdsale[this] := 1473178401;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:04:40,698 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:04:40,698 INFO  L82        PathProgramCache]: Analyzing trace with hash 1893006823, now seen corresponding path program 1 times
[2020-05-30 20:04:40,698 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:04:40,753 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:04:40,819 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:04:40,938 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:04:40,938 INFO  L82        PathProgramCache]: Analyzing trace with hash 425448197, now seen corresponding path program 1 times
[2020-05-30 20:04:40,938 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:04:40,943 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:04:40,948 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:04:40,955 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:04:40,955 INFO  L82        PathProgramCache]: Analyzing trace with hash 2041605087, now seen corresponding path program 1 times
[2020-05-30 20:04:40,956 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:04:41,014 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:04:42,629 INFO  L134       CoverageAnalysis]: Checked inductivity of 827 backedges. 192 proven. 213 refuted. 0 times theorem prover too weak. 422 trivial. 0 not checked.
[2020-05-30 20:04:42,629 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:04:42,629 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [62] total 62
[2020-05-30 20:04:42,629 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 63 interpolants.
[2020-05-30 20:04:42,630 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=214, Invalid=3692, Unknown=0, NotChecked=0, Total=3906
[2020-05-30 20:04:42,630 INFO  L87              Difference]: Start difference. First operand 123625 states and 157612 transitions. cyclomatic complexity: 34046 Second operand 63 states.
[2020-05-30 20:05:02,966 WARN  L188               SmtUtils]: Spent 189.00 ms on a formula simplification. DAG size of input: 48 DAG size of output: 47
[2020-05-30 20:06:05,004 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:06:05,005 INFO  L93              Difference]: Finished difference Result 178135 states and 223978 transitions.
[2020-05-30 20:06:05,005 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 102 states. 
[2020-05-30 20:06:05,005 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 178135 states and 223978 transitions.
[2020-05-30 20:06:05,677 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 534
[2020-05-30 20:06:06,945 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 178135 states to 178135 states and 223978 transitions.
[2020-05-30 20:06:06,945 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 232
[2020-05-30 20:06:06,945 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 232
[2020-05-30 20:06:06,945 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 178135 states and 223978 transitions.
[2020-05-30 20:06:07,107 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:06:07,107 INFO  L728         BuchiCegarLoop]: Abstraction has 178135 states and 223978 transitions.
[2020-05-30 20:06:07,169 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 178135 states and 223978 transitions.
[2020-05-30 20:06:08,308 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 178135 to 174211.
[2020-05-30 20:06:08,309 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 174211 states.
[2020-05-30 20:06:08,776 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 174211 states to 174211 states and 218959 transitions.
[2020-05-30 20:06:08,776 INFO  L751         BuchiCegarLoop]: Abstraction has 174211 states and 218959 transitions.
[2020-05-30 20:06:08,776 INFO  L631         BuchiCegarLoop]: Abstraction has 174211 states and 218959 transitions.
[2020-05-30 20:06:08,776 INFO  L445         BuchiCegarLoop]: ======== Iteration 42============
[2020-05-30 20:06:08,777 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 174211 states and 218959 transitions.
[2020-05-30 20:06:08,992 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 534
[2020-05-30 20:06:08,992 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:06:08,992 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:06:08,995 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:06:08,995 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1845164479;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:06:09,013 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:06:09,013 INFO  L82        PathProgramCache]: Analyzing trace with hash 571934700, now seen corresponding path program 1 times
[2020-05-30 20:06:09,014 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:06:09,047 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:06:09,311 INFO  L134       CoverageAnalysis]: Checked inductivity of 1109 backedges. 205 proven. 114 refuted. 0 times theorem prover too weak. 790 trivial. 0 not checked.
[2020-05-30 20:06:09,311 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:06:09,311 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-30 20:06:09,311 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:06:09,312 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 20:06:09,312 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-05-30 20:06:09,312 INFO  L87              Difference]: Start difference. First operand 174211 states and 218959 transitions. cyclomatic complexity: 44963 Second operand 11 states.
[2020-05-30 20:06:14,114 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:06:14,114 INFO  L93              Difference]: Finished difference Result 120482 states and 150559 transitions.
[2020-05-30 20:06:14,114 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-05-30 20:06:14,115 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 120482 states and 150559 transitions.
[2020-05-30 20:06:14,527 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 180
[2020-05-30 20:06:15,060 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 120482 states to 112484 states and 138712 transitions.
[2020-05-30 20:06:15,060 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 148
[2020-05-30 20:06:15,060 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 148
[2020-05-30 20:06:15,060 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 112484 states and 138712 transitions.
[2020-05-30 20:06:15,165 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:06:15,166 INFO  L728         BuchiCegarLoop]: Abstraction has 112484 states and 138712 transitions.
[2020-05-30 20:06:15,221 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 112484 states and 138712 transitions.
[2020-05-30 20:06:16,000 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 112484 to 106733.
[2020-05-30 20:06:16,000 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 106733 states.
[2020-05-30 20:06:16,235 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 106733 states to 106733 states and 131600 transitions.
[2020-05-30 20:06:16,236 INFO  L751         BuchiCegarLoop]: Abstraction has 106733 states and 131600 transitions.
[2020-05-30 20:06:16,236 INFO  L631         BuchiCegarLoop]: Abstraction has 106733 states and 131600 transitions.
[2020-05-30 20:06:16,236 INFO  L445         BuchiCegarLoop]: ======== Iteration 43============
[2020-05-30 20:06:16,236 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 106733 states and 131600 transitions.
[2020-05-30 20:06:16,373 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 168
[2020-05-30 20:06:16,373 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:06:16,373 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:06:16,376 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:06:16,376 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0)
[L2913]                    gas := gas - 876;
[L2914]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2915]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2916]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2917]                    assume now >= 0;
[L2918]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2919-L2921]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0 && now <= fundingEndBlock_EPXCrowdsale[this])
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 1845164479;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:06:16,382 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:06:16,383 INFO  L82        PathProgramCache]: Analyzing trace with hash 1216623484, now seen corresponding path program 1 times
[2020-05-30 20:06:16,383 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:06:16,410 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:06:16,825 INFO  L134       CoverageAnalysis]: Checked inductivity of 808 backedges. 42 proven. 222 refuted. 0 times theorem prover too weak. 544 trivial. 0 not checked.
[2020-05-30 20:06:16,825 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:06:16,825 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [14] total 14
[2020-05-30 20:06:16,826 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:06:16,826 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-05-30 20:06:16,826 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=152, Unknown=0, NotChecked=0, Total=182
[2020-05-30 20:06:16,826 INFO  L87              Difference]: Start difference. First operand 106733 states and 131600 transitions. cyclomatic complexity: 25146 Second operand 14 states.
[2020-05-30 20:06:22,480 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:06:22,480 INFO  L93              Difference]: Finished difference Result 110582 states and 136028 transitions.
[2020-05-30 20:06:22,480 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-30 20:06:22,480 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 110582 states and 136028 transitions.
[2020-05-30 20:06:22,828 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 168
[2020-05-30 20:06:23,338 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 110582 states to 110396 states and 135782 transitions.
[2020-05-30 20:06:23,338 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 148
[2020-05-30 20:06:23,338 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 148
[2020-05-30 20:06:23,339 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 110396 states and 135782 transitions.
[2020-05-30 20:06:23,442 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:06:23,442 INFO  L728         BuchiCegarLoop]: Abstraction has 110396 states and 135782 transitions.
[2020-05-30 20:06:23,496 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 110396 states and 135782 transitions.
[2020-05-30 20:06:24,271 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 110396 to 105962.
[2020-05-30 20:06:24,271 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 105962 states.
[2020-05-30 20:06:24,729 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 105962 states to 105962 states and 130444 transitions.
[2020-05-30 20:06:24,729 INFO  L751         BuchiCegarLoop]: Abstraction has 105962 states and 130444 transitions.
[2020-05-30 20:06:24,729 INFO  L631         BuchiCegarLoop]: Abstraction has 105962 states and 130444 transitions.
[2020-05-30 20:06:24,729 INFO  L445         BuchiCegarLoop]: ======== Iteration 44============
[2020-05-30 20:06:24,730 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 105962 states and 130444 transitions.
[2020-05-30 20:06:24,853 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 168
[2020-05-30 20:06:24,853 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:06:24,853 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:06:24,856 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:06:24,856 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := 855885808;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0)
[L2913]                    gas := gas - 876;
[L2914]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2915]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2916]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2917]                    assume now >= 0;
[L2918]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2919-L2921]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0 && now <= fundingEndBlock_EPXCrowdsale[this]
[L2923]                    gas := gas - 20317;
[L2924]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2925]                    gas := gas - 20267;
[L2926]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2927]                    gas := gas - 409;
[L2928]                    CurrentStatus_EPXCrowdsale[this] := 1473178401;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:06:24,868 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:06:24,868 INFO  L82        PathProgramCache]: Analyzing trace with hash 1660202444, now seen corresponding path program 1 times
[2020-05-30 20:06:24,868 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:06:24,903 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:06:25,112 INFO  L134       CoverageAnalysis]: Checked inductivity of 832 backedges. 238 proven. 25 refuted. 0 times theorem prover too weak. 569 trivial. 0 not checked.
[2020-05-30 20:06:25,112 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:06:25,112 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-30 20:06:25,113 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:06:25,113 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 20:06:25,113 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-05-30 20:06:25,113 INFO  L87              Difference]: Start difference. First operand 105962 states and 130444 transitions. cyclomatic complexity: 24755 Second operand 12 states.
[2020-05-30 20:06:28,891 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:06:28,891 INFO  L93              Difference]: Finished difference Result 139298 states and 174451 transitions.
[2020-05-30 20:06:28,891 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-05-30 20:06:28,892 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 139298 states and 174451 transitions.
[2020-05-30 20:06:29,411 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 132
[2020-05-30 20:06:29,919 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 139298 states to 103874 states and 126794 transitions.
[2020-05-30 20:06:29,920 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 142
[2020-05-30 20:06:29,920 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 142
[2020-05-30 20:06:29,920 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 103874 states and 126794 transitions.
[2020-05-30 20:06:30,014 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:06:30,014 INFO  L728         BuchiCegarLoop]: Abstraction has 103874 states and 126794 transitions.
[2020-05-30 20:06:30,065 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 103874 states and 126794 transitions.
[2020-05-30 20:06:30,875 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 103874 to 102977.
[2020-05-30 20:06:30,875 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 102977 states.
[2020-05-30 20:06:31,103 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 102977 states to 102977 states and 125723 transitions.
[2020-05-30 20:06:31,104 INFO  L751         BuchiCegarLoop]: Abstraction has 102977 states and 125723 transitions.
[2020-05-30 20:06:31,104 INFO  L631         BuchiCegarLoop]: Abstraction has 102977 states and 125723 transitions.
[2020-05-30 20:06:31,104 INFO  L445         BuchiCegarLoop]: ======== Iteration 45============
[2020-05-30 20:06:31,104 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 102977 states and 125723 transitions.
[2020-05-30 20:06:31,229 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 132
[2020-05-30 20:06:31,230 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:06:31,230 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:06:31,233 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:06:31,233 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0)
[L2913]                    gas := gas - 876;
[L2914]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2915]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2916]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2917]                    assume now >= 0;
[L2918]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2919-L2921]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0 && now <= fundingEndBlock_EPXCrowdsale[this]
[L2923]                    gas := gas - 20317;
[L2924]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2925]                    gas := gas - 20267;
[L2926]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2927]                    gas := gas - 409;
[L2928]                    CurrentStatus_EPXCrowdsale[this] := 1473178401;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND TRUE   DType[to] == owned
[L3127]                    assume amount == 0;
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND TRUE   DType[to] == owned
[L3127]                    assume amount == 0;
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND TRUE   DType[to] == owned
[L3127]                    assume amount == 0;
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:06:31,246 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:06:31,246 INFO  L82        PathProgramCache]: Analyzing trace with hash -837446888, now seen corresponding path program 1 times
[2020-05-30 20:06:31,246 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:06:31,287 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:06:31,573 INFO  L134       CoverageAnalysis]: Checked inductivity of 1073 backedges. 212 proven. 51 refuted. 0 times theorem prover too weak. 810 trivial. 0 not checked.
[2020-05-30 20:06:31,573 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:06:31,573 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [16] total 16
[2020-05-30 20:06:31,574 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:06:31,574 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-05-30 20:06:31,574 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=43, Invalid=229, Unknown=0, NotChecked=0, Total=272
[2020-05-30 20:06:31,574 INFO  L87              Difference]: Start difference. First operand 102977 states and 125723 transitions. cyclomatic complexity: 23004 Second operand 17 states.
[2020-05-30 20:06:34,633 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:06:34,634 INFO  L93              Difference]: Finished difference Result 121370 states and 148035 transitions.
[2020-05-30 20:06:34,634 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-30 20:06:34,634 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 121370 states and 148035 transitions.
[2020-05-30 20:06:35,019 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 168
[2020-05-30 20:06:35,546 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 121370 states to 111758 states and 135102 transitions.
[2020-05-30 20:06:35,546 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 142
[2020-05-30 20:06:35,547 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 142
[2020-05-30 20:06:35,547 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 111758 states and 135102 transitions.
[2020-05-30 20:06:35,644 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:06:35,644 INFO  L728         BuchiCegarLoop]: Abstraction has 111758 states and 135102 transitions.
[2020-05-30 20:06:35,694 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 111758 states and 135102 transitions.
[2020-05-30 20:06:36,413 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 111758 to 111608.
[2020-05-30 20:06:36,414 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 111608 states.
[2020-05-30 20:06:36,658 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 111608 states to 111608 states and 134930 transitions.
[2020-05-30 20:06:36,658 INFO  L751         BuchiCegarLoop]: Abstraction has 111608 states and 134930 transitions.
[2020-05-30 20:06:36,658 INFO  L631         BuchiCegarLoop]: Abstraction has 111608 states and 134930 transitions.
[2020-05-30 20:06:36,658 INFO  L445         BuchiCegarLoop]: ======== Iteration 46============
[2020-05-30 20:06:36,658 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 111608 states and 134930 transitions.
[2020-05-30 20:06:36,794 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 168
[2020-05-30 20:06:36,794 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:06:36,794 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:06:36,797 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:06:36,797 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := 855885808;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0)
[L2913]                    gas := gas - 876;
[L2914]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2915]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2916]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2917]                    assume now >= 0;
[L2918]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2919-L2921]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0 && now <= fundingEndBlock_EPXCrowdsale[this]
[L2923]                    gas := gas - 20317;
[L2924]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2925]                    gas := gas - 20267;
[L2926]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2927]                    gas := gas - 409;
[L2928]                    CurrentStatus_EPXCrowdsale[this] := 1473178401;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:06:36,802 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:06:36,802 INFO  L82        PathProgramCache]: Analyzing trace with hash -2045327981, now seen corresponding path program 1 times
[2020-05-30 20:06:36,803 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:06:36,863 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:06:36,928 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:06:37,051 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:06:37,051 INFO  L82        PathProgramCache]: Analyzing trace with hash -1924946655, now seen corresponding path program 2 times
[2020-05-30 20:06:37,051 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:06:37,056 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:06:37,061 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:06:37,068 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:06:37,069 INFO  L82        PathProgramCache]: Analyzing trace with hash -2000470065, now seen corresponding path program 1 times
[2020-05-30 20:06:37,069 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:06:37,125 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:06:38,448 INFO  L134       CoverageAnalysis]: Checked inductivity of 1081 backedges. 121 proven. 153 refuted. 0 times theorem prover too weak. 807 trivial. 0 not checked.
[2020-05-30 20:06:38,449 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:06:38,449 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [46] total 46
[2020-05-30 20:06:38,449 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 47 interpolants.
[2020-05-30 20:06:38,450 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=159, Invalid=2003, Unknown=0, NotChecked=0, Total=2162
[2020-05-30 20:06:38,450 INFO  L87              Difference]: Start difference. First operand 111608 states and 134930 transitions. cyclomatic complexity: 23553 Second operand 47 states.
[2020-05-30 20:07:15,702 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:07:15,702 INFO  L93              Difference]: Finished difference Result 113357 states and 136989 transitions.
[2020-05-30 20:07:15,703 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 69 states. 
[2020-05-30 20:07:15,703 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 113357 states and 136989 transitions.
[2020-05-30 20:07:16,076 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 168
[2020-05-30 20:07:16,603 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 113357 states to 113357 states and 136877 transitions.
[2020-05-30 20:07:16,603 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 142
[2020-05-30 20:07:16,603 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 142
[2020-05-30 20:07:16,604 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 113357 states and 136877 transitions.
[2020-05-30 20:07:16,702 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:07:16,702 INFO  L728         BuchiCegarLoop]: Abstraction has 113357 states and 136877 transitions.
[2020-05-30 20:07:16,752 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 113357 states and 136877 transitions.
[2020-05-30 20:07:17,650 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 113357 to 111724.
[2020-05-30 20:07:17,650 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 111724 states.
[2020-05-30 20:07:17,887 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 111724 states to 111724 states and 134038 transitions.
[2020-05-30 20:07:17,887 INFO  L751         BuchiCegarLoop]: Abstraction has 111724 states and 134038 transitions.
[2020-05-30 20:07:17,887 INFO  L631         BuchiCegarLoop]: Abstraction has 111724 states and 134038 transitions.
[2020-05-30 20:07:17,887 INFO  L445         BuchiCegarLoop]: ======== Iteration 47============
[2020-05-30 20:07:17,887 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 111724 states and 134038 transitions.
[2020-05-30 20:07:18,023 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 168
[2020-05-30 20:07:18,023 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:07:18,023 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:07:18,026 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:07:18,026 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := 855885808;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0)
[L2913]                    gas := gas - 876;
[L2914]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2915]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2916]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2917]                    assume now >= 0;
[L2918]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2919-L2921]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0 && now <= fundingEndBlock_EPXCrowdsale[this]
[L2923]                    gas := gas - 20317;
[L2924]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2925]                    gas := gas - 20267;
[L2926]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2927]                    gas := gas - 409;
[L2928]                    CurrentStatus_EPXCrowdsale[this] := 1473178401;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:07:18,052 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:07:18,052 INFO  L82        PathProgramCache]: Analyzing trace with hash 232162409, now seen corresponding path program 2 times
[2020-05-30 20:07:18,052 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:07:18,117 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:07:18,191 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:07:18,346 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:07:18,346 INFO  L82        PathProgramCache]: Analyzing trace with hash -1924946655, now seen corresponding path program 3 times
[2020-05-30 20:07:18,346 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:07:18,351 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:07:18,356 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 20:07:18,363 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:07:18,364 INFO  L82        PathProgramCache]: Analyzing trace with hash 857359801, now seen corresponding path program 2 times
[2020-05-30 20:07:18,364 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:07:18,429 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:07:20,571 INFO  L134       CoverageAnalysis]: Checked inductivity of 1428 backedges. 243 proven. 543 refuted. 0 times theorem prover too weak. 642 trivial. 0 not checked.
[2020-05-30 20:07:20,571 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:07:20,572 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [69] total 69
[2020-05-30 20:07:20,572 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 70 interpolants.
[2020-05-30 20:07:20,573 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=240, Invalid=4590, Unknown=0, NotChecked=0, Total=4830
[2020-05-30 20:07:20,573 INFO  L87              Difference]: Start difference. First operand 111724 states and 134038 transitions. cyclomatic complexity: 22515 Second operand 70 states.
[2020-05-30 20:08:36,378 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:08:36,378 INFO  L93              Difference]: Finished difference Result 144899 states and 172508 transitions.
[2020-05-30 20:08:36,378 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 96 states. 
[2020-05-30 20:08:36,378 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 144899 states and 172508 transitions.
[2020-05-30 20:08:36,808 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 168
[2020-05-30 20:08:37,436 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 144899 states to 144731 states and 171465 transitions.
[2020-05-30 20:08:37,436 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 136
[2020-05-30 20:08:37,436 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 136
[2020-05-30 20:08:37,436 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 144731 states and 171465 transitions.
[2020-05-30 20:08:37,770 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:08:37,770 INFO  L728         BuchiCegarLoop]: Abstraction has 144731 states and 171465 transitions.
[2020-05-30 20:08:37,812 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 144731 states and 171465 transitions.
[2020-05-30 20:08:38,568 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 144731 to 142700.
[2020-05-30 20:08:38,569 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 142700 states.
[2020-05-30 20:08:38,852 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 142700 states to 142700 states and 169306 transitions.
[2020-05-30 20:08:38,853 INFO  L751         BuchiCegarLoop]: Abstraction has 142700 states and 169306 transitions.
[2020-05-30 20:08:38,853 INFO  L631         BuchiCegarLoop]: Abstraction has 142700 states and 169306 transitions.
[2020-05-30 20:08:38,853 INFO  L445         BuchiCegarLoop]: ======== Iteration 48============
[2020-05-30 20:08:38,853 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 142700 states and 169306 transitions.
[2020-05-30 20:08:39,019 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 168
[2020-05-30 20:08:39,019 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:08:39,019 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:08:39,023 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:08:39,023 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0)
[L2913]                    gas := gas - 876;
[L2914]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2915]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2916]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2917]                    assume now >= 0;
[L2918]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2919-L2921]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0 && now <= fundingEndBlock_EPXCrowdsale[this]
[L2923]                    gas := gas - 20317;
[L2924]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2925]                    gas := gas - 20267;
[L2926]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2927]                    gas := gas - 409;
[L2928]                    CurrentStatus_EPXCrowdsale[this] := 1473178401;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3152]                    assume Balance[from] >= amount;
[L3153]                    Balance[from] := Balance[from] - amount;
[L3154]                    Balance[to] := Balance[to] + amount;
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:08:39,062 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:08:39,062 INFO  L82        PathProgramCache]: Analyzing trace with hash -1201494929, now seen corresponding path program 1 times
[2020-05-30 20:08:39,062 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:08:39,163 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:08:41,459 INFO  L134       CoverageAnalysis]: Checked inductivity of 1959 backedges. 374 proven. 598 refuted. 0 times theorem prover too weak. 987 trivial. 0 not checked.
[2020-05-30 20:08:41,460 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:08:41,460 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [68] total 68
[2020-05-30 20:08:41,460 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:08:41,460 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 69 interpolants.
[2020-05-30 20:08:41,461 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=249, Invalid=4443, Unknown=0, NotChecked=0, Total=4692
[2020-05-30 20:08:41,461 INFO  L87              Difference]: Start difference. First operand 142700 states and 169306 transitions. cyclomatic complexity: 26879 Second operand 69 states.
[2020-05-30 20:09:47,546 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:09:47,546 INFO  L93              Difference]: Finished difference Result 176259 states and 207677 transitions.
[2020-05-30 20:09:47,546 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 95 states. 
[2020-05-30 20:09:47,546 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 176259 states and 207677 transitions.
[2020-05-30 20:09:48,039 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 168
[2020-05-30 20:09:48,369 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 176259 states to 78417 states and 95616 transitions.
[2020-05-30 20:09:48,369 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 132
[2020-05-30 20:09:48,369 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 132
[2020-05-30 20:09:48,369 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 78417 states and 95616 transitions.
[2020-05-30 20:09:48,436 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:09:48,436 INFO  L728         BuchiCegarLoop]: Abstraction has 78417 states and 95616 transitions.
[2020-05-30 20:09:48,472 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 78417 states and 95616 transitions.
[2020-05-30 20:09:48,919 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 78417 to 74883.
[2020-05-30 20:09:48,919 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 74883 states.
[2020-05-30 20:09:49,038 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 74883 states to 74883 states and 91448 transitions.
[2020-05-30 20:09:49,038 INFO  L751         BuchiCegarLoop]: Abstraction has 74883 states and 91448 transitions.
[2020-05-30 20:09:49,038 INFO  L631         BuchiCegarLoop]: Abstraction has 74883 states and 91448 transitions.
[2020-05-30 20:09:49,038 INFO  L445         BuchiCegarLoop]: ======== Iteration 49============
[2020-05-30 20:09:49,038 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 74883 states and 91448 transitions.
[2020-05-30 20:09:49,110 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 166
[2020-05-30 20:09:49,110 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:09:49,110 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:09:49,113 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:09:49,113 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0)
[L2913]                    gas := gas - 876;
[L2914]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2915]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2916]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2917]                    assume now >= 0;
[L2918]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2919-L2921]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0 && now <= fundingEndBlock_EPXCrowdsale[this]
[L2923]                    gas := gas - 20317;
[L2924]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2925]                    gas := gas - 20267;
[L2926]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2927]                    gas := gas - 409;
[L2928]                    CurrentStatus_EPXCrowdsale[this] := 1473178401;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:09:49,119 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:09:49,119 INFO  L82        PathProgramCache]: Analyzing trace with hash 677819279, now seen corresponding path program 1 times
[2020-05-30 20:09:49,119 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:09:49,140 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:09:49,593 INFO  L134       CoverageAnalysis]: Checked inductivity of 1937 backedges. 6 proven. 397 refuted. 0 times theorem prover too weak. 1534 trivial. 0 not checked.
[2020-05-30 20:09:49,593 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:09:49,594 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-30 20:09:49,594 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:09:49,594 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 20:09:49,594 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=20, Invalid=90, Unknown=0, NotChecked=0, Total=110
[2020-05-30 20:09:49,595 INFO  L87              Difference]: Start difference. First operand 74883 states and 91448 transitions. cyclomatic complexity: 16667 Second operand 11 states.
[2020-05-30 20:09:51,949 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:09:51,949 INFO  L93              Difference]: Finished difference Result 74460 states and 90823 transitions.
[2020-05-30 20:09:51,949 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-05-30 20:09:51,949 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 74460 states and 90823 transitions.
[2020-05-30 20:09:52,157 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 166
[2020-05-30 20:09:52,440 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 74460 states to 74427 states and 90780 transitions.
[2020-05-30 20:09:52,440 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 132
[2020-05-30 20:09:52,441 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 132
[2020-05-30 20:09:52,441 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 74427 states and 90780 transitions.
[2020-05-30 20:09:52,501 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:09:52,501 INFO  L728         BuchiCegarLoop]: Abstraction has 74427 states and 90780 transitions.
[2020-05-30 20:09:52,535 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 74427 states and 90780 transitions.
[2020-05-30 20:09:52,981 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 74427 to 74292.
[2020-05-30 20:09:52,981 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 74292 states.
[2020-05-30 20:09:53,119 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 74292 states to 74292 states and 90605 transitions.
[2020-05-30 20:09:53,119 INFO  L751         BuchiCegarLoop]: Abstraction has 74292 states and 90605 transitions.
[2020-05-30 20:09:53,119 INFO  L631         BuchiCegarLoop]: Abstraction has 74292 states and 90605 transitions.
[2020-05-30 20:09:53,119 INFO  L445         BuchiCegarLoop]: ======== Iteration 50============
[2020-05-30 20:09:53,119 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 74292 states and 90605 transitions.
[2020-05-30 20:09:53,201 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 166
[2020-05-30 20:09:53,202 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 20:09:53,202 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 20:09:53,205 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 20:09:53,205 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3635]                    assume null == 0;
[L3636]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3636]        RET         call this := FreshRefGenerator__success();
[L3637]                    assume now >= 0;
[L3638]                    assume DType[this] == EPXCrowdsale;
[L3639]                    gas := gas - 53000;
[L3640]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := 1882373009;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 1653402166;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3640]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3641]                    assume !revert && gas >= 0;
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND TRUE   choice == 5
[L3582]                    gas := gas - 21000;
[L3583]        COND TRUE   gas >= 0
[L3585]                    assume msgvalue_MSG == 0;
[L3586]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -1324483994;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -1324483994;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3586]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND FALSE  !(choice == 3)
[L3607]        COND TRUE   choice == 2
[L3609]                    gas := gas - 21000;
[L3610]        COND TRUE   gas >= 0
[L3612]                    assume msgvalue_MSG == 0;
[L3613]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0)
[L2913]                    gas := gas - 876;
[L2914]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2915]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2916]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2917]                    assume now >= 0;
[L2918]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2919-L2921]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0 && now <= fundingEndBlock_EPXCrowdsale[this]
[L2923]                    gas := gas - 20317;
[L2924]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2925]                    gas := gas - 20267;
[L2926]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2927]                    gas := gas - 409;
[L2928]                    CurrentStatus_EPXCrowdsale[this] := 1473178401;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3613]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND TRUE   choice == 4
[L3591]                    gas := gas - 21000;
[L3592]        COND TRUE   gas >= 0
[L3594]                    assume msgvalue_MSG >= 0;
[L3595]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3595]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);
[L3644]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3541]                    havoc msgsender_MSG;
[L3542]                    havoc msgvalue_MSG;
[L3543]                    havoc choice;
[L3544]                    havoc initialEPXtokenCount_s286;
[L3545]                    havoc remainingEPXtokenCount_s299;
[L3546]                    havoc _fundingStartBlock_s391;
[L3547]                    havoc _fundingEndBlock_s391;
[L3548]                    havoc response_s391;
[L3549]                    havoc _amount_s558;
[L3550]                    havoc tmpNow;
[L3551]                    havoc gas;
[L3552]                    assume gas > 4000000 && gas <= 8000000;
[L3553]                    tmpNow := now;
[L3554]                    havoc now;
[L3555]                    assume now > tmpNow;
[L3556]                    assume msgsender_MSG != null;
[L3557]                    assume DType[msgsender_MSG] != owned;
[L3558]                    assume DType[msgsender_MSG] != safeMath;
[L3559]                    assume DType[msgsender_MSG] != StandardToken;
[L3560]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3561]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3562]        COND FALSE  !(choice == 7)
[L3571]        COND FALSE  !(choice == 6)
[L3580]        COND FALSE  !(choice == 5)
[L3589]        COND FALSE  !(choice == 4)
[L3598]        COND TRUE   choice == 3
[L3600]                    gas := gas - 21000;
[L3601]        COND TRUE   gas >= 0
[L3603]                    assume msgvalue_MSG == 0;
[L3604]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]                    gas := gas - 828;
[L3346]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3275]                    havoc __exception;
[L3276]        COND FALSE  !(__exception)
[L3315]        COND TRUE   Balance[from] >= amount
[L3317]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3317]        RET         call FallbackDispatch__success(from, to, amount);
[L3318]                    success := true;
[L3325]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3604]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3644]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 20:09:53,212 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 20:09:53,212 INFO  L82        PathProgramCache]: Analyzing trace with hash -1879462183, now seen corresponding path program 1 times
[2020-05-30 20:09:53,213 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 20:09:53,249 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 20:09:53,744 INFO  L134       CoverageAnalysis]: Checked inductivity of 2293 backedges. 131 proven. 468 refuted. 0 times theorem prover too weak. 1694 trivial. 0 not checked.
[2020-05-30 20:09:53,744 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 20:09:53,744 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-30 20:09:53,745 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 20:09:53,745 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 20:09:53,745 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-05-30 20:09:53,745 INFO  L87              Difference]: Start difference. First operand 74292 states and 90605 transitions. cyclomatic complexity: 16412 Second operand 11 states.
[2020-05-30 20:09:55,725 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 20:09:55,725 INFO  L93              Difference]: Finished difference Result 10483 states and 14663 transitions.
[2020-05-30 20:09:55,726 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-05-30 20:09:55,726 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10483 states and 14663 transitions.
[2020-05-30 20:09:55,747 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-05-30 20:09:55,748 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10483 states to 0 states and 0 transitions.
[2020-05-30 20:09:55,748 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-05-30 20:09:55,748 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-05-30 20:09:55,748 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-05-30 20:09:55,748 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 20:09:55,748 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-30 20:09:55,748 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-30 20:09:55,748 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-30 20:09:55,748 INFO  L445         BuchiCegarLoop]: ======== Iteration 51============
[2020-05-30 20:09:55,748 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-05-30 20:09:55,748 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-05-30 20:09:55,749 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-05-30 20:09:55,752 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 30.05 08:09:55 BasicIcfg
[2020-05-30 20:09:55,752 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-05-30 20:09:55,753 INFO  L168              Benchmark]: Toolchain (without parser) took 608829.15 ms. Allocated memory was 514.9 MB in the beginning and 6.5 GB in the end (delta: 6.0 GB). Free memory was 457.5 MB in the beginning and 3.6 GB in the end (delta: -3.2 GB). Peak memory consumption was 2.9 GB. Max. memory is 15.3 GB.
[2020-05-30 20:09:55,753 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.11 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-05-30 20:09:55,753 INFO  L168              Benchmark]: Boogie Preprocessor took 71.92 ms. Allocated memory is still 514.9 MB. Free memory was 457.5 MB in the beginning and 449.4 MB in the end (delta: 8.1 MB). Peak memory consumption was 8.1 MB. Max. memory is 15.3 GB.
[2020-05-30 20:09:55,754 INFO  L168              Benchmark]: UtopiaSpecLang took 49.66 ms. Allocated memory is still 514.9 MB. Free memory was 449.4 MB in the beginning and 444.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-05-30 20:09:55,754 INFO  L168              Benchmark]: Boogie Printer took 13.10 ms. Allocated memory is still 514.9 MB. Free memory was 444.0 MB in the beginning and 441.3 MB in the end (delta: 2.7 MB). Peak memory consumption was 2.7 MB. Max. memory is 15.3 GB.
[2020-05-30 20:09:55,755 INFO  L168              Benchmark]: RCFGBuilder took 577.20 ms. Allocated memory was 514.9 MB in the beginning and 553.1 MB in the end (delta: 38.3 MB). Free memory was 441.3 MB in the beginning and 502.3 MB in the end (delta: -61.1 MB). Peak memory consumption was 98.6 MB. Max. memory is 15.3 GB.
[2020-05-30 20:09:55,755 INFO  L168              Benchmark]: UtopiaLTL2Aut took 48.40 ms. Allocated memory is still 553.1 MB. Free memory was 502.3 MB in the beginning and 495.9 MB in the end (delta: 6.4 MB). Peak memory consumption was 6.4 MB. Max. memory is 15.3 GB.
[2020-05-30 20:09:55,755 INFO  L168              Benchmark]: BÃ¼chi Program Product took 6158.68 ms. Allocated memory was 553.1 MB in the beginning and 1.5 GB in the end (delta: 925.9 MB). Free memory was 495.9 MB in the beginning and 285.3 MB in the end (delta: 210.6 MB). Peak memory consumption was 1.1 GB. Max. memory is 15.3 GB.
[2020-05-30 20:09:55,756 INFO  L168              Benchmark]: BlockEncodingV2 took 589.07 ms. Allocated memory was 1.5 GB in the beginning and 1.5 GB in the end (delta: 7.3 MB). Free memory was 285.3 MB in the beginning and 1.0 GB in the end (delta: -717.7 MB). Peak memory consumption was 167.6 MB. Max. memory is 15.3 GB.
[2020-05-30 20:09:55,756 INFO  L168              Benchmark]: BuchiAutomizer took 601317.48 ms. Allocated memory was 1.5 GB in the beginning and 6.5 GB in the end (delta: 5.0 GB). Free memory was 1.0 GB in the beginning and 3.6 GB in the end (delta: -2.6 GB). Peak memory consumption was 2.4 GB. Max. memory is 15.3 GB.
[2020-05-30 20:09:55,761 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    9687 locations, 34449 edges
  - StatisticsResult: Encoded RCFG
    9502 locations, 33372 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.11 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 71.92 ms. Allocated memory is still 514.9 MB. Free memory was 457.5 MB in the beginning and 449.4 MB in the end (delta: 8.1 MB). Peak memory consumption was 8.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 49.66 ms. Allocated memory is still 514.9 MB. Free memory was 449.4 MB in the beginning and 444.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 13.10 ms. Allocated memory is still 514.9 MB. Free memory was 444.0 MB in the beginning and 441.3 MB in the end (delta: 2.7 MB). Peak memory consumption was 2.7 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 577.20 ms. Allocated memory was 514.9 MB in the beginning and 553.1 MB in the end (delta: 38.3 MB). Free memory was 441.3 MB in the beginning and 502.3 MB in the end (delta: -61.1 MB). Peak memory consumption was 98.6 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 48.40 ms. Allocated memory is still 553.1 MB. Free memory was 502.3 MB in the beginning and 495.9 MB in the end (delta: 6.4 MB). Peak memory consumption was 6.4 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 6158.68 ms. Allocated memory was 553.1 MB in the beginning and 1.5 GB in the end (delta: 925.9 MB). Free memory was 495.9 MB in the beginning and 285.3 MB in the end (delta: 210.6 MB). Peak memory consumption was 1.1 GB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 589.07 ms. Allocated memory was 1.5 GB in the beginning and 1.5 GB in the end (delta: 7.3 MB). Free memory was 285.3 MB in the beginning and 1.0 GB in the end (delta: -717.7 MB). Peak memory consumption was 167.6 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 601317.48 ms. Allocated memory was 1.5 GB in the beginning and 6.5 GB in the end (delta: 5.0 GB). Free memory was 1.0 GB in the beginning and 3.6 GB in the end (delta: -2.6 GB). Peak memory consumption was 2.4 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    6 locations, 20 edges
  - StatisticsResult: Initial RCFG
    1699 locations, 2085 edges
  - StatisticsResult: BuchiProgram size
    9687 locations, 34449 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 50 terminating modules (50 trivial, 0 deterministic, 0 nondeterministic). 50 modules have a trivial ranking function, the largest among these consists of 70 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 601.2s and 51 iterations.  TraceHistogramMax:12. Analysis of lassos took 21.1s. Construction of modules took 428.1s. BÃ¼chi inclusion checks took 98.9s. Highest rank in rank-based complementation 0. Minimization of det autom 50. Minimization of nondet autom 0. Automata minimization 24.7s AutomataMinimizationTime, 49 MinimizatonAttempts, 55625 StatesRemovedByMinimization, 40 NontrivialMinimizations. Non-live state removal took 21.9s Buchi closure took 0.0s. Biggest automaton had 174211 states and ocurred in iteration 41.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 554931 SDtfs, 1166542 SDslu, 1540087 SDs, 0 SdLazy, 3597208 SolverSat, 134848 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 428.1s Time	LassoAnalysisResults: nont0 unkn0 SFLI2 SFLT0 conc6 concLT0 SILN0 SILU42 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ( ( []( (call_(success_CorralChoice_EPXCrowdsale2)orral(success_CorralChoice_EPXCrowdsale2)hoice_EPX(success_CorralChoice_EPXCrowdsale2)rowdsale1) ==> ( <>(success_beneficiaryMultiSigWithdraw_EPX(success_CorralChoice_EPXCrowdsale2)rowdsale0) ) ) ) && ( <>(success_CorralChoice_EPXCrowdsale2) ) )&& ! ( ( <>(success_CorralChoice_EPXCrowdsale0) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
